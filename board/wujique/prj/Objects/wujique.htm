<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\wujique.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\wujique.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Sun Apr 05 00:11:35 2020
<BR><P>
<H3>Maximum Stack Usage =       1728 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
test_tp_calibrate &rArr; ts_calibrate &rArr; get_sample &rArr; getxy &rArr; wjq_log &rArr; mcu_uart_write
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[af]">CAN1_RX1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[af]">CAN1_RX1_IRQHandler</a><BR>
 <LI><a href="#[11b]">qsort</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11b]">qsort</a><BR>
 <LI><a href="#[18e]">Explore_Disk</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18e]">Explore_Disk</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[ac]">ADC_IRQHandler</a> from stm32f4xx_it.o(i.ADC_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[94]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[ae]">CAN1_RX0_IRQHandler</a> from stm32f4xx_it.o(i.CAN1_RX0_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[af]">CAN1_RX1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[b0]">CAN1_SCE_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[ad]">CAN1_TX_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[da]">CAN2_RX0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[db]">CAN2_RX1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[dc]">CAN2_SCE_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[d9]">CAN2_TX_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[e9]">CRYP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[e8]">DCMI_IRQHandler</a> from stm32f4xx_it.o(i.DCMI_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[a5]">DMA1_Stream0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[a6]">DMA1_Stream1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[a7]">DMA1_Stream2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[a8]">DMA1_Stream3_IRQHandler</a> from stm32f4xx_it.o(i.DMA1_Stream3_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[a9]">DMA1_Stream4_IRQHandler</a> from stm32f4xx_it.o(i.DMA1_Stream4_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[aa]">DMA1_Stream5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[ab]">DMA1_Stream6_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[c9]">DMA1_Stream7_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[d2]">DMA2_Stream0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[d3]">DMA2_Stream1_IRQHandler</a> from stm32f4xx_it.o(i.DMA2_Stream1_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[d4]">DMA2_Stream2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[d5]">DMA2_Stream3_IRQHandler</a> from stm32f4xx_it.o(i.DMA2_Stream3_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[d6]">DMA2_Stream4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[de]">DMA2_Stream5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[df]">DMA2_Stream6_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[e0]">DMA2_Stream7_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[97]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[d7]">ETH_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[d8]">ETH_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[a0]">EXTI0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[c2]">EXTI15_10_IRQHandler</a> from stm32f4xx_it.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[a1]">EXTI1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[a2]">EXTI2_IRQHandler</a> from stm32f4xx_it.o(i.EXTI2_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[a3]">EXTI3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[a4]">EXTI4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[b1]">EXTI9_5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[9e]">FLASH_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[eb]">FPU_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[ca]">FSMC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[ea]">HASH_RNG_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[92]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[ba]">I2C1_ER_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[b9]">I2C1_EV_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[bc]">I2C2_ER_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[bb]">I2C2_EV_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[e3]">I2C3_ER_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[e2]">I2C3_EV_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[93]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[91]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[dd]">OTG_FS_IRQHandler</a> from stm32f4xx_it.o(i.OTG_FS_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[c4]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[e5]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[e4]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[e7]">OTG_HS_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[e6]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[9b]">PVD_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[98]">PendSV_Handler</a> from stm32f4xx_it.o(i.PendSV_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[9f]">RCC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[c3]">RTC_Alarm_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[9d]">RTC_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[90]">Reset_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[cb]">SDIO_IRQHandler</a> from stm32f4xx_it.o(i.SDIO_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[bd]">SPI1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[be]">SPI2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[cd]">SPI3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[71]">STORAGE_GetCapacity</a> from usbd_storage_msd.o(i.STORAGE_GetCapacity) referenced 2 times from usbd_storage_msd.o(.data)
 <LI><a href="#[76]">STORAGE_GetMaxLun</a> from usbd_storage_msd.o(i.STORAGE_GetMaxLun) referenced 2 times from usbd_storage_msd.o(.data)
 <LI><a href="#[70]">STORAGE_Init</a> from usbd_storage_msd.o(i.STORAGE_Init) referenced 2 times from usbd_storage_msd.o(.data)
 <LI><a href="#[72]">STORAGE_IsReady</a> from usbd_storage_msd.o(i.STORAGE_IsReady) referenced 2 times from usbd_storage_msd.o(.data)
 <LI><a href="#[73]">STORAGE_IsWriteProtected</a> from usbd_storage_msd.o(i.STORAGE_IsWriteProtected) referenced 2 times from usbd_storage_msd.o(.data)
 <LI><a href="#[74]">STORAGE_Read</a> from usbd_storage_msd.o(i.STORAGE_Read) referenced 2 times from usbd_storage_msd.o(.data)
 <LI><a href="#[75]">STORAGE_Write</a> from usbd_storage_msd.o(i.STORAGE_Write) referenced 2 times from usbd_storage_msd.o(.data)
 <LI><a href="#[96]">SVC_Handler</a> from stm32f4xx_it.o(i.SVC_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[99]">SysTick_Handler</a> from stm32f4xx_it.o(i.SysTick_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[ed]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f40_41xxx.o(.text)
 <LI><a href="#[9c]">TAMP_STAMP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[b2]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[b5]">TIM1_CC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[b4]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[b3]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[b6]">TIM2_IRQHandler</a> from stm32f4xx_it.o(i.TIM2_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[b7]">TIM3_IRQHandler</a> from stm32f4xx_it.o(i.TIM3_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[b8]">TIM4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[cc]">TIM5_IRQHandler</a> from stm32f4xx_it.o(i.TIM5_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[d0]">TIM6_DAC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[d1]">TIM7_IRQHandler</a> from stm32f4xx_it.o(i.TIM7_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[c5]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[c8]">TIM8_CC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[c7]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[c6]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[ce]">UART4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[cf]">UART5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[bf]">USART1_IRQHandler</a> from stm32f4xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[c0]">USART2_IRQHandler</a> from stm32f4xx_it.o(i.USART2_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[c1]">USART3_IRQHandler</a> from stm32f4xx_it.o(i.USART3_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[e1]">USART6_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5b]">USBD_DataInStage</a> from usbd_core.o(i.USBD_DataInStage) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[5a]">USBD_DataOutStage</a> from usbd_core.o(i.USBD_DataOutStage) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[61]">USBD_IsoINIncomplete</a> from usbd_core.o(i.USBD_IsoINIncomplete) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[62]">USBD_IsoOUTIncomplete</a> from usbd_core.o(i.USBD_IsoOUTIncomplete) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[66]">USBD_MSC_DataIn</a> from usbd_msc_core.o(i.USBD_MSC_DataIn) referenced 2 times from usbd_msc_core.o(.data)
 <LI><a href="#[67]">USBD_MSC_DataOut</a> from usbd_msc_core.o(i.USBD_MSC_DataOut) referenced 2 times from usbd_msc_core.o(.data)
 <LI><a href="#[64]">USBD_MSC_DeInit</a> from usbd_msc_core.o(i.USBD_MSC_DeInit) referenced 2 times from usbd_msc_core.o(.data)
 <LI><a href="#[68]">USBD_MSC_GetCfgDesc</a> from usbd_msc_core.o(i.USBD_MSC_GetCfgDesc) referenced 2 times from usbd_msc_core.o(.data)
 <LI><a href="#[63]">USBD_MSC_Init</a> from usbd_msc_core.o(i.USBD_MSC_Init) referenced 2 times from usbd_msc_core.o(.data)
 <LI><a href="#[65]">USBD_MSC_Setup</a> from usbd_msc_core.o(i.USBD_MSC_Setup) referenced 2 times from usbd_msc_core.o(.data)
 <LI><a href="#[5e]">USBD_Reset</a> from usbd_core.o(i.USBD_Reset) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[60]">USBD_Resume</a> from usbd_core.o(i.USBD_Resume) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[5d]">USBD_SOF</a> from usbd_core.o(i.USBD_SOF) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[5c]">USBD_SetupStage</a> from usbd_core.o(i.USBD_SetupStage) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[5f]">USBD_Suspend</a> from usbd_core.o(i.USBD_Suspend) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[6e]">USBD_USR_ConfigStrDescriptor</a> from usbd_desc.o(i.USBD_USR_ConfigStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[79]">USBD_USR_DeviceConfigured</a> from usbd_usr.o(i.USBD_USR_DeviceConfigured) referenced 2 times from usbd_usr.o(.data)
 <LI><a href="#[7c]">USBD_USR_DeviceConnected</a> from usbd_usr.o(i.USBD_USR_DeviceConnected) referenced 2 times from usbd_usr.o(.data)
 <LI><a href="#[69]">USBD_USR_DeviceDescriptor</a> from usbd_desc.o(i.USBD_USR_DeviceDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[7d]">USBD_USR_DeviceDisconnected</a> from usbd_usr.o(i.USBD_USR_DeviceDisconnected) referenced 2 times from usbd_usr.o(.data)
 <LI><a href="#[78]">USBD_USR_DeviceReset</a> from usbd_usr.o(i.USBD_USR_DeviceReset) referenced 2 times from usbd_usr.o(.data)
 <LI><a href="#[7b]">USBD_USR_DeviceResumed</a> from usbd_usr.o(i.USBD_USR_DeviceResumed) referenced 2 times from usbd_usr.o(.data)
 <LI><a href="#[7a]">USBD_USR_DeviceSuspended</a> from usbd_usr.o(i.USBD_USR_DeviceSuspended) referenced 2 times from usbd_usr.o(.data)
 <LI><a href="#[77]">USBD_USR_Init</a> from usbd_usr.o(i.USBD_USR_Init) referenced 2 times from usbd_usr.o(.data)
 <LI><a href="#[6f]">USBD_USR_InterfaceStrDescriptor</a> from usbd_desc.o(i.USBD_USR_InterfaceStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[6a]">USBD_USR_LangIDStrDescriptor</a> from usbd_desc.o(i.USBD_USR_LangIDStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[6b]">USBD_USR_ManufacturerStrDescriptor</a> from usbd_desc.o(i.USBD_USR_ManufacturerStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[6c]">USBD_USR_ProductStrDescriptor</a> from usbd_desc.o(i.USBD_USR_ProductStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[6d]">USBD_USR_SerialStrDescriptor</a> from usbd_desc.o(i.USBD_USR_SerialStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[52]">USBH_Connected</a> from usbh_core.o(i.USBH_Connected) referenced 2 times from usbh_core.o(.data)
 <LI><a href="#[53]">USBH_Disconnected</a> from usbh_core.o(i.USBH_Disconnected) referenced 2 times from usbh_core.o(.data)
 <LI><a href="#[58]">USBH_MSC_ClassRequest</a> from usbh_msc_core.o(i.USBH_MSC_ClassRequest) referenced 2 times from usbh_msc_core.o(.data)
 <LI><a href="#[59]">USBH_MSC_Handle</a> from usbh_msc_core.o(i.USBH_MSC_Handle) referenced 2 times from usbh_msc_core.o(.data)
 <LI><a href="#[57]">USBH_MSC_InterfaceDeInit</a> from usbh_msc_core.o(i.USBH_MSC_InterfaceDeInit) referenced 2 times from usbh_msc_core.o(.data)
 <LI><a href="#[56]">USBH_MSC_InterfaceInit</a> from usbh_msc_core.o(i.USBH_MSC_InterfaceInit) referenced 2 times from usbh_msc_core.o(.data)
 <LI><a href="#[55]">USBH_PortDisabled</a> from usbh_core.o(i.USBH_PortDisabled) referenced 2 times from usbh_core.o(.data)
 <LI><a href="#[54]">USBH_PortEnabled</a> from usbh_core.o(i.USBH_PortEnabled) referenced 2 times from usbh_core.o(.data)
 <LI><a href="#[51]">USBH_SOF</a> from usbh_core.o(i.USBH_SOF) referenced 2 times from usbh_core.o(.data)
 <LI><a href="#[87]">USBH_USR_Configuration_DescAvailable</a> from usbh_msc_usr.o(i.USBH_USR_Configuration_DescAvailable) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[7f]">USBH_USR_DeInit</a> from usbh_msc_usr.o(i.USBH_USR_DeInit) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[86]">USBH_USR_DeviceAddressAssigned</a> from usbh_msc_usr.o(i.USBH_USR_DeviceAddressAssigned) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[80]">USBH_USR_DeviceAttached</a> from usbh_msc_usr.o(i.USBH_USR_DeviceAttached) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[82]">USBH_USR_DeviceDisconnected</a> from usbh_msc_usr.o(i.USBH_USR_DeviceDisconnected) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[8e]">USBH_USR_DeviceNotSupported</a> from usbh_msc_usr.o(i.USBH_USR_DeviceNotSupported) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[84]">USBH_USR_DeviceSpeedDetected</a> from usbh_msc_usr.o(i.USBH_USR_DeviceSpeedDetected) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[85]">USBH_USR_Device_DescAvailable</a> from usbh_msc_usr.o(i.USBH_USR_Device_DescAvailable) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[8b]">USBH_USR_EnumerationDone</a> from usbh_msc_usr.o(i.USBH_USR_EnumerationDone) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[7e]">USBH_USR_Init</a> from usbh_msc_usr.o(i.USBH_USR_Init) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[8d]">USBH_USR_MSC_Application</a> from usbh_msc_usr.o(i.USBH_USR_MSC_Application) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[88]">USBH_USR_Manufacturer_String</a> from usbh_msc_usr.o(i.USBH_USR_Manufacturer_String) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[83]">USBH_USR_OverCurrentDetected</a> from usbh_msc_usr.o(i.USBH_USR_OverCurrentDetected) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[89]">USBH_USR_Product_String</a> from usbh_msc_usr.o(i.USBH_USR_Product_String) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[81]">USBH_USR_ResetDevice</a> from usbh_msc_usr.o(i.USBH_USR_ResetDevice) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[8a]">USBH_USR_SerialNum_String</a> from usbh_msc_usr.o(i.USBH_USR_SerialNum_String) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[8f]">USBH_USR_UnrecoveredError</a> from usbh_msc_usr.o(i.USBH_USR_UnrecoveredError) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[8c]">USBH_USR_UserInput</a> from usbh_msc_usr.o(i.USBH_USR_UserInput) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[95]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[9a]">WWDG_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[ee]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f40_41xxx.o(.text)
 <LI><a href="#[ef]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[ef]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0vsprintf)
 <LI><a href="#[f0]">dev_dacsound_timerinit</a> from dev_dacsound.o(i.dev_dacsound_timerinit) referenced from dev_dacsound.o(i.dev_dacsound_open)
 <LI><a href="#[f1]">dev_xpt2046_task</a> from dev_xpt2046.o(i.dev_xpt2046_task) referenced from dev_xpt2046.o(i.dev_xpt2046_open)
 <LI><a href="#[f2]">dhcp_recv</a> from dhcp.o(i.dhcp_recv) referenced from dhcp.o(i.dhcp_start)
 <LI><a href="#[3]">drv_IL3820_color_fill</a> from dev_il3820.o(i.drv_IL3820_color_fill) referenced 2 times from dev_il3820.o(.data)
 <LI><a href="#[7]">drv_IL3820_display_onoff</a> from dev_il3820.o(i.drv_IL3820_display_onoff) referenced 2 times from dev_il3820.o(.data)
 <LI><a href="#[2]">drv_IL3820_drawpoint</a> from dev_il3820.o(i.drv_IL3820_drawpoint) referenced 2 times from dev_il3820.o(.data)
 <LI><a href="#[4]">drv_IL3820_fill</a> from dev_il3820.o(i.drv_IL3820_fill) referenced 2 times from dev_il3820.o(.data)
 <LI><a href="#[6]">drv_IL3820_flush</a> from dev_il3820.o(i.drv_IL3820_flush) referenced 2 times from dev_il3820.o(.data)
 <LI><a href="#[1]">drv_IL3820_init</a> from dev_il3820.o(i.drv_IL3820_init) referenced 2 times from dev_il3820.o(.data)
 <LI><a href="#[9]">drv_IL3820_lcd_bl</a> from dev_il3820.o(i.drv_IL3820_lcd_bl) referenced 2 times from dev_il3820.o(.data)
 <LI><a href="#[5]">drv_IL3820_prepare_display</a> from dev_il3820.o(i.drv_IL3820_prepare_display) referenced 2 times from dev_il3820.o(.data)
 <LI><a href="#[8]">drv_IL3820_scan_dir</a> from dev_il3820.o(i.drv_IL3820_scan_dir) referenced 2 times from dev_il3820.o(.data)
 <LI><a href="#[a]">drv_IL3820_update</a> from dev_il3820.o(i.drv_IL3820_update) referenced 2 times from dev_il3820.o(.data)
 <LI><a href="#[d]">drv_IL91874_color_fill</a> from dev_il91874.o(i.drv_IL91874_color_fill) referenced 2 times from dev_il91874.o(.data)
 <LI><a href="#[11]">drv_IL91874_display_onoff</a> from dev_il91874.o(i.drv_IL91874_display_onoff) referenced 2 times from dev_il91874.o(.data)
 <LI><a href="#[c]">drv_IL91874_drawpoint</a> from dev_il91874.o(i.drv_IL91874_drawpoint) referenced 2 times from dev_il91874.o(.data)
 <LI><a href="#[e]">drv_IL91874_fill</a> from dev_il91874.o(i.drv_IL91874_fill) referenced 2 times from dev_il91874.o(.data)
 <LI><a href="#[10]">drv_IL91874_flush</a> from dev_il91874.o(i.drv_IL91874_flush) referenced 2 times from dev_il91874.o(.data)
 <LI><a href="#[b]">drv_IL91874_init</a> from dev_il91874.o(i.drv_IL91874_init) referenced 2 times from dev_il91874.o(.data)
 <LI><a href="#[13]">drv_IL91874_lcd_bl</a> from dev_il91874.o(i.drv_IL91874_lcd_bl) referenced 2 times from dev_il91874.o(.data)
 <LI><a href="#[f]">drv_IL91874_prepare_display</a> from dev_il91874.o(i.drv_IL91874_prepare_display) referenced 2 times from dev_il91874.o(.data)
 <LI><a href="#[12]">drv_IL91874_scan_dir</a> from dev_il91874.o(i.drv_IL91874_scan_dir) referenced 2 times from dev_il91874.o(.data)
 <LI><a href="#[14]">drv_IL91874_update</a> from dev_il91874.o(i.drv_IL91874_update) referenced 2 times from dev_il91874.o(.data)
 <LI><a href="#[17]">drv_ILI9325_color_fill</a> from dev_ili9325.o(i.drv_ILI9325_color_fill) referenced 2 times from dev_ili9325.o(.data)
 <LI><a href="#[1b]">drv_ILI9325_display_onoff</a> from dev_ili9325.o(i.drv_ILI9325_display_onoff) referenced 2 times from dev_ili9325.o(.data)
 <LI><a href="#[16]">drv_ILI9325_drawpoint</a> from dev_ili9325.o(i.drv_ILI9325_drawpoint) referenced 2 times from dev_ili9325.o(.data)
 <LI><a href="#[18]">drv_ILI9325_fill</a> from dev_ili9325.o(i.drv_ILI9325_fill) referenced 2 times from dev_ili9325.o(.data)
 <LI><a href="#[1a]">drv_ILI9325_flush</a> from dev_ili9325.o(i.drv_ILI9325_flush) referenced 2 times from dev_ili9325.o(.data)
 <LI><a href="#[15]">drv_ILI9325_init</a> from dev_ili9325.o(i.drv_ILI9325_init) referenced 2 times from dev_ili9325.o(.data)
 <LI><a href="#[1d]">drv_ILI9325_lcd_bl</a> from dev_ili9325.o(i.drv_ILI9325_lcd_bl) referenced 2 times from dev_ili9325.o(.data)
 <LI><a href="#[19]">drv_ILI9325_prepare_display</a> from dev_ili9325.o(i.drv_ILI9325_prepare_display) referenced 2 times from dev_ili9325.o(.data)
 <LI><a href="#[1c]">drv_ILI9325_scan_dir</a> from dev_ili9325.o(i.drv_ILI9325_scan_dir) referenced 2 times from dev_ili9325.o(.data)
 <LI><a href="#[1e]">drv_ILI9325_update</a> from dev_ili9325.o(i.drv_ILI9325_update) referenced 2 times from dev_ili9325.o(.data)
 <LI><a href="#[2b]">drv_ILI9341_8_color_fill</a> from dev_ili9341.o(i.drv_ILI9341_8_color_fill) referenced 2 times from dev_ili9341.o(.data)
 <LI><a href="#[2a]">drv_ILI9341_8_drawpoint</a> from dev_ili9341.o(i.drv_ILI9341_8_drawpoint) referenced 2 times from dev_ili9341.o(.data)
 <LI><a href="#[2c]">drv_ILI9341_8_fill</a> from dev_ili9341.o(i.drv_ILI9341_8_fill) referenced 2 times from dev_ili9341.o(.data)
 <LI><a href="#[2e]">drv_ILI9341_8_flush</a> from dev_ili9341.o(i.drv_ILI9341_8_flush) referenced 2 times from dev_ili9341.o(.data)
 <LI><a href="#[29]">drv_ILI9341_8_init</a> from dev_ili9341.o(i.drv_ILI9341_8_init) referenced 2 times from dev_ili9341.o(.data)
 <LI><a href="#[2d]">drv_ILI9341_8_prepare_display</a> from dev_ili9341.o(i.drv_ILI9341_8_prepare_display) referenced 2 times from dev_ili9341.o(.data)
 <LI><a href="#[2f]">drv_ILI9341_8_scan_dir</a> from dev_ili9341.o(i.drv_ILI9341_8_scan_dir) referenced 2 times from dev_ili9341.o(.data)
 <LI><a href="#[30]">drv_ILI9341_8_update</a> from dev_ili9341.o(i.drv_ILI9341_8_update) referenced 2 times from dev_ili9341.o(.data)
 <LI><a href="#[21]">drv_ILI9341_color_fill</a> from dev_ili9341.o(i.drv_ILI9341_color_fill) referenced 2 times from dev_ili9341.o(.data)
 <LI><a href="#[25]">drv_ILI9341_display_onoff</a> from dev_ili9341.o(i.drv_ILI9341_display_onoff) referenced 4 times from dev_ili9341.o(.data)
 <LI><a href="#[20]">drv_ILI9341_drawpoint</a> from dev_ili9341.o(i.drv_ILI9341_drawpoint) referenced 2 times from dev_ili9341.o(.data)
 <LI><a href="#[22]">drv_ILI9341_fill</a> from dev_ili9341.o(i.drv_ILI9341_fill) referenced 2 times from dev_ili9341.o(.data)
 <LI><a href="#[24]">drv_ILI9341_flush</a> from dev_ili9341.o(i.drv_ILI9341_flush) referenced 2 times from dev_ili9341.o(.data)
 <LI><a href="#[1f]">drv_ILI9341_init</a> from dev_ili9341.o(i.drv_ILI9341_init) referenced 2 times from dev_ili9341.o(.data)
 <LI><a href="#[27]">drv_ILI9341_lcd_bl</a> from dev_ili9341.o(i.drv_ILI9341_lcd_bl) referenced 4 times from dev_ili9341.o(.data)
 <LI><a href="#[23]">drv_ILI9341_prepare_display</a> from dev_ili9341.o(i.drv_ILI9341_prepare_display) referenced 2 times from dev_ili9341.o(.data)
 <LI><a href="#[26]">drv_ILI9341_scan_dir</a> from dev_ili9341.o(i.drv_ILI9341_scan_dir) referenced 2 times from dev_ili9341.o(.data)
 <LI><a href="#[28]">drv_ILI9341_update</a> from dev_ili9341.o(i.drv_ILI9341_update) referenced 2 times from dev_ili9341.o(.data)
 <LI><a href="#[47]">drv_ST7565_color_fill</a> from dev_str7565.o(i.drv_ST7565_color_fill) referenced 4 times from dev_str7565.o(.data)
 <LI><a href="#[4b]">drv_ST7565_display_onoff</a> from dev_str7565.o(i.drv_ST7565_display_onoff) referenced 2 times from dev_str7565.o(.data)
 <LI><a href="#[46]">drv_ST7565_drawpoint</a> from dev_str7565.o(i.drv_ST7565_drawpoint) referenced 4 times from dev_str7565.o(.data)
 <LI><a href="#[48]">drv_ST7565_fill</a> from dev_str7565.o(i.drv_ST7565_fill) referenced 4 times from dev_str7565.o(.data)
 <LI><a href="#[4a]">drv_ST7565_flush</a> from dev_str7565.o(i.drv_ST7565_flush) referenced 4 times from dev_str7565.o(.data)
 <LI><a href="#[45]">drv_ST7565_init</a> from dev_str7565.o(i.drv_ST7565_init) referenced 2 times from dev_str7565.o(.data)
 <LI><a href="#[4d]">drv_ST7565_lcd_bl</a> from dev_str7565.o(i.drv_ST7565_lcd_bl) referenced 4 times from dev_str7565.o(.data)
 <LI><a href="#[49]">drv_ST7565_prepare_display</a> from dev_str7565.o(i.drv_ST7565_prepare_display) referenced 4 times from dev_str7565.o(.data)
 <LI><a href="#[4c]">drv_ST7565_scan_dir</a> from dev_str7565.o(i.drv_ST7565_scan_dir) referenced 4 times from dev_str7565.o(.data)
 <LI><a href="#[4e]">drv_ST7565_update</a> from dev_str7565.o(i.drv_ST7565_update) referenced 4 times from dev_str7565.o(.data)
 <LI><a href="#[33]">drv_ST7735R_color_fill</a> from dev_st7735r.o(i.drv_ST7735R_color_fill) referenced 2 times from dev_st7735r.o(.data)
 <LI><a href="#[37]">drv_ST7735R_display_onoff</a> from dev_st7735r.o(i.drv_ST7735R_display_onoff) referenced 2 times from dev_st7735r.o(.data)
 <LI><a href="#[32]">drv_ST7735R_drawpoint</a> from dev_st7735r.o(i.drv_ST7735R_drawpoint) referenced 2 times from dev_st7735r.o(.data)
 <LI><a href="#[34]">drv_ST7735R_fill</a> from dev_st7735r.o(i.drv_ST7735R_fill) referenced 2 times from dev_st7735r.o(.data)
 <LI><a href="#[36]">drv_ST7735R_flush</a> from dev_st7735r.o(i.drv_ST7735R_flush) referenced 2 times from dev_st7735r.o(.data)
 <LI><a href="#[31]">drv_ST7735R_init</a> from dev_st7735r.o(i.drv_ST7735R_init) referenced 2 times from dev_st7735r.o(.data)
 <LI><a href="#[39]">drv_ST7735R_lcd_bl</a> from dev_st7735r.o(i.drv_ST7735R_lcd_bl) referenced 2 times from dev_st7735r.o(.data)
 <LI><a href="#[35]">drv_ST7735R_prepare_display</a> from dev_st7735r.o(i.drv_ST7735R_prepare_display) referenced 2 times from dev_st7735r.o(.data)
 <LI><a href="#[38]">drv_ST7735R_scan_dir</a> from dev_st7735r.o(i.drv_ST7735R_scan_dir) referenced 2 times from dev_st7735r.o(.data)
 <LI><a href="#[3a]">drv_ST7735R_update</a> from dev_st7735r.o(i.drv_ST7735R_update) referenced 2 times from dev_st7735r.o(.data)
 <LI><a href="#[3d]">drv_ST7789_color_fill</a> from dev_st7789.o(i.drv_ST7789_color_fill) referenced 2 times from dev_st7789.o(.data)
 <LI><a href="#[41]">drv_ST7789_display_onoff</a> from dev_st7789.o(i.drv_ST7789_display_onoff) referenced 2 times from dev_st7789.o(.data)
 <LI><a href="#[3c]">drv_ST7789_drawpoint</a> from dev_st7789.o(i.drv_ST7789_drawpoint) referenced 2 times from dev_st7789.o(.data)
 <LI><a href="#[3e]">drv_ST7789_fill</a> from dev_st7789.o(i.drv_ST7789_fill) referenced 2 times from dev_st7789.o(.data)
 <LI><a href="#[40]">drv_ST7789_flush</a> from dev_st7789.o(i.drv_ST7789_flush) referenced 2 times from dev_st7789.o(.data)
 <LI><a href="#[3b]">drv_ST7789_init</a> from dev_st7789.o(i.drv_ST7789_init) referenced 2 times from dev_st7789.o(.data)
 <LI><a href="#[43]">drv_ST7789_lcd_bl</a> from dev_st7789.o(i.drv_ST7789_lcd_bl) referenced 2 times from dev_st7789.o(.data)
 <LI><a href="#[3f]">drv_ST7789_prepare_display</a> from dev_st7789.o(i.drv_ST7789_prepare_display) referenced 2 times from dev_st7789.o(.data)
 <LI><a href="#[42]">drv_ST7789_scan_dir</a> from dev_st7789.o(i.drv_ST7789_scan_dir) referenced 2 times from dev_st7789.o(.data)
 <LI><a href="#[44]">drv_ST7789_update</a> from dev_st7789.o(i.drv_ST7789_update) referenced 2 times from dev_st7789.o(.data)
 <LI><a href="#[50]">drv_ssd1615_display_onoff</a> from dev_str7565.o(i.drv_ssd1615_display_onoff) referenced 2 times from dev_str7565.o(.data)
 <LI><a href="#[4f]">drv_ssd1615_init</a> from dev_str7565.o(i.drv_ssd1615_init) referenced 2 times from dev_str7565.o(.data)
 <LI><a href="#[f5]">ipfrag_free_pbuf_custom</a> from ip_frag.o(i.ipfrag_free_pbuf_custom) referenced from ip_frag.o(i.ip_frag)
 <LI><a href="#[ec]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[f9]">prvIdleTask</a> from frtos_tasks.o(i.prvIdleTask) referenced from frtos_tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[f7]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[fb]">prvTimerTask</a> from frtos_timers.o(i.prvTimerTask) referenced from frtos_timers.o(i.xTimerCreateTimerTask)
 <LI><a href="#[f3]">sort_by_x</a> from testutils.o(i.sort_by_x) referenced from testutils.o(i.getxy)
 <LI><a href="#[f4]">sort_by_y</a> from testutils.o(i.sort_by_y) referenced from testutils.o(i.getxy)
 <LI><a href="#[f6]">start_task</a> from main.o(i.start_task) referenced from main.o(i.main)
 <LI><a href="#[10b]">test_camera</a> from wujique_test.o(i.test_camera) referenced from wujique_test.o(.constdata)
 <LI><a href="#[110]">test_can_rec</a> from wujique_test.o(i.test_can_rec) referenced from wujique_test.o(.constdata)
 <LI><a href="#[111]">test_can_snd</a> from wujique_test.o(i.test_can_snd) referenced from wujique_test.o(.constdata)
 <LI><a href="#[113]">test_esp8266</a> from wujique_test.o(i.test_esp8266) referenced from wujique_test.o(.constdata)
 <LI><a href="#[fc]">test_i2c_oled_display</a> from wujique_test.o(i.test_i2c_oled_display) referenced from wujique_test.o(.constdata)
 <LI><a href="#[108]">test_key</a> from wujique_test.o(i.test_key) referenced from wujique_test.o(.constdata)
 <LI><a href="#[10a]">test_keypad</a> from wujique_test.o(i.test_keypad) referenced from wujique_test.o(.constdata)
 <LI><a href="#[100]">test_lcd_font</a> from wujique_test.o(i.test_lcd_font) referenced from wujique_test.o(.constdata)
 <LI><a href="#[ff]">test_lcd_pic</a> from wujique_test.o(i.test_lcd_pic) referenced from wujique_test.o(.constdata)
 <LI><a href="#[10e]">test_rs485_rec</a> from wujique_test.o(i.test_rs485_rec) referenced from wujique_test.o(.constdata)
 <LI><a href="#[10f]">test_rs485_snd</a> from wujique_test.o(i.test_rs485_snd) referenced from wujique_test.o(.constdata)
 <LI><a href="#[101]">test_sound_buzzer</a> from wujique_test.o(i.test_sound_buzzer) referenced from wujique_test.o(.constdata)
 <LI><a href="#[102]">test_sound_dac</a> from wujique_test.o(i.test_sound_dac) referenced from wujique_test.o(.constdata)
 <LI><a href="#[103]">test_sound_fm</a> from wujique_test.o(i.test_sound_fm) referenced from wujique_test.o(.constdata)
 <LI><a href="#[105]">test_sound_rec</a> from wujique_test.o(i.test_sound_rec) referenced from wujique_test.o(.constdata)
 <LI><a href="#[104]">test_sound_wm8978</a> from wujique_test.o(i.test_sound_wm8978) referenced from wujique_test.o(.constdata)
 <LI><a href="#[fd]">test_spi_cog_display</a> from wujique_test.o(i.test_spi_cog_display) referenced from wujique_test.o(.constdata)
 <LI><a href="#[10d]">test_spiflash_board</a> from wujique_test.o(i.test_spiflash_board) referenced from wujique_test.o(.constdata)
 <LI><a href="#[10c]">test_spiflash_core</a> from wujique_test.o(i.test_spiflash_core) referenced from wujique_test.o(.constdata)
 <LI><a href="#[fe]">test_tft_display</a> from wujique_test.o(i.test_tft_display) referenced from wujique_test.o(.constdata)
 <LI><a href="#[109]">test_touchkey</a> from wujique_test.o(i.test_touchkey) referenced from wujique_test.o(.constdata)
 <LI><a href="#[106]">test_tp_calibrate</a> from wujique_test.o(i.test_tp_calibrate) referenced from wujique_test.o(.constdata)
 <LI><a href="#[107]">test_tp_test</a> from wujique_test.o(i.test_tp_test) referenced from wujique_test.o(.constdata)
 <LI><a href="#[112]">test_uart</a> from wujique_test.o(i.test_uart) referenced from wujique_test.o(.constdata)
 <LI><a href="#[f8]">usb_main</a> from dual_func_demo.o(i.usb_main) referenced from dual_func_demo.o(i.usb_task_create)
 <LI><a href="#[fa]">wujique_stm407_test</a> from wujique_test.o(i.wujique_stm407_test) referenced from wujique_test.o(i.wujique_407test_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[ee]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(.text)
</UL>
<P><STRONG><a name="[4e9]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[114]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[12b]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[4ea]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[4eb]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[4ec]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[4ed]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[4ee]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[223]"></a>vPortSVCHandler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[4e1]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[4e0]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[116]"></a>xPortPendSVHandler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[4d5]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[90]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[af]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[b0]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[ad]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[da]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[db]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[dc]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[d9]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[e9]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[aa]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[c9]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[d2]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[d4]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[d6]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[de]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[df]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[e0]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[d7]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[d8]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[b1]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[eb]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[ca]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[ea]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[ba]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[b9]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[bc]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[bb]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[e3]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[e2]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[c4]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[e5]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[e4]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[e7]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[e6]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[c3]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[bd]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[be]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[cd]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[b2]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[b5]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[b4]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[b3]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[b8]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[d0]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[c5]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[c8]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[c7]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[c6]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[ce]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[cf]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[e1]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[118]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessWrite
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessRead
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[11b]"></a>qsort</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, qsort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = qsort &rArr;  qsort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsort
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getxy
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsort
</UL>

<P><STRONG><a name="[4ef]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[2ec]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_get_asc
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_register
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_spich_register
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_spi_register
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcdbus_register
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2c_register
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>

<P><STRONG><a name="[4cf]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_set_cal
</UL>

<P><STRONG><a name="[4f0]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[4f1]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[4f2]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[11d]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[4f3]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[4f4]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[11c]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL91874_init
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ssd1615_init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_init
</UL>

<P><STRONG><a name="[386]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emenu_display
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_get_dir_name
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_dejitter_init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_rs485_rec
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_esp8266
</UL>

<P><STRONG><a name="[4f5]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[11e]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1a3]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emenu_display
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explore_Disk
</UL>

<P><STRONG><a name="[325]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emenu_display
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_string_center
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_get_dir_name
</UL>

<P><STRONG><a name="[2e3]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_open
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_spi_open
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_register
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_play
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2c_open
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_register
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_open
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_transfer
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_open
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_init
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_close
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_spich_register
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_spi_register
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcdbus_register
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2c_register
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_find_index
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_find_dir
</UL>

<P><STRONG><a name="[1a1]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_get_dir_name
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explore_Disk
</UL>

<P><STRONG><a name="[11f]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_calibration
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log2
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[123]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[124]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[471]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_calibration
</UL>

<P><STRONG><a name="[125]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_calibration
</UL>

<P><STRONG><a name="[4f6]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[2b6]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[11a]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[4f7]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[119]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[4f8]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[120]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[4f9]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[4fa]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[126]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[4fb]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[122]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[121]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[127]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log2
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[128]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log2
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[129]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log2
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[12a]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2b0]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log2
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[407]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log2
</UL>

<P><STRONG><a name="[2b3]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[115]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[4fc]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[4fd]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[4fe]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[40e]"></a>ADC_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_adc_IRQhandler
</UL>

<P><STRONG><a name="[40f]"></a>ADC_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_adc_IRQhandler
</UL>

<P><STRONG><a name="[414]"></a>ADC_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_adc_temprate_init
</UL>

<P><STRONG><a name="[411]"></a>ADC_CommonInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_adc.o(i.ADC_CommonInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_CommonInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_adc_temprate_init
</UL>

<P><STRONG><a name="[40d]"></a>ADC_GetConversionValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_GetConversionValue))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_adc_IRQhandler
</UL>

<P><STRONG><a name="[40c]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_adc_IRQhandler
</UL>

<P><STRONG><a name="[40b]"></a>ADC_GetITStatus</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f4xx_adc.o(i.ADC_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_adc_IRQhandler
</UL>

<P><STRONG><a name="[ac]"></a>ADC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.ADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ADC_IRQHandler &rArr; mcu_adc_IRQhandler &rArr; ADC_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_adc_IRQhandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[412]"></a>ADC_Init</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32f4xx_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_adc_temprate_init
</UL>

<P><STRONG><a name="[413]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f4xx_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_adc_temprate_init
</UL>

<P><STRONG><a name="[410]"></a>ADC_TempSensorVrefintCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_TempSensorVrefintCmd))
<BR><BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_adc_temprate_init
</UL>

<P><STRONG><a name="[134]"></a>BUS_DCMI_Config</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, mcu_dcmi.o(i.BUS_DCMI_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = BUS_DCMI_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB2PeriphClockCmd
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_Init
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_Init
</UL>

<P><STRONG><a name="[139]"></a>BUS_DCMI_DMA_Init</STRONG> (Thumb, 176 bytes, Stack size 88 bytes, mcu_dcmi.o(i.BUS_DCMI_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = BUS_DCMI_DMA_Init &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DoubleBufferModeConfig
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DoubleBufferModeCmd
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_camera_config
</UL>

<P><STRONG><a name="[140]"></a>BUS_DCMI_HW_Init</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, mcu_dcmi.o(i.BUS_DCMI_HW_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BUS_DCMI_HW_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_camera_init
</UL>

<P><STRONG><a name="[94]"></a>BusFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BusFault_Handler &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[ae]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CAN1_RX0_IRQHandler &rArr; mcu_can1_rx0_IRQ &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_can1_rx0_IRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[415]"></a>CAN_Receive</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, stm32f4xx_can.o(i.CAN_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_can1_rx0_IRQ
</UL>

<P><STRONG><a name="[417]"></a>DAC_Cmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_dac.o(i.DAC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dac_open
</UL>

<P><STRONG><a name="[416]"></a>DAC_Init</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, stm32f4xx_dac.o(i.DAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DAC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dac_open
</UL>

<P><STRONG><a name="[418]"></a>DAC_SetChannel2Data</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_dac.o(i.DAC_SetChannel2Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DAC_SetChannel2Data
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dac_output
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dac_open
</UL>

<P><STRONG><a name="[14f]"></a>DCD_DevDisconnect</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_dcd.o(i.DCD_DevDisconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DCD_DevDisconnect &rArr; USB_OTG_BSP_mDelay &rArr; BSP_Delay &rArr; BSP_SetTime &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demo_Application
</UL>

<P><STRONG><a name="[151]"></a>DCD_EP_Close</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usb_dcd.o(i.DCD_EP_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DCD_EP_Close &rArr; USB_OTG_EPDeactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPDeactivate
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Setup
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DeInit
</UL>

<P><STRONG><a name="[153]"></a>DCD_EP_ClrStall</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usb_dcd.o(i.DCD_EP_ClrStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DCD_EP_ClrStall &rArr; USB_OTG_EPClearStall
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[155]"></a>DCD_EP_Flush</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usb_dcd.o(i.DCD_EP_Flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = DCD_EP_Flush &rArr; USB_OTG_FlushTxFifo &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushRxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Setup
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_Init
</UL>

<P><STRONG><a name="[158]"></a>DCD_EP_Open</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, usb_dcd.o(i.DCD_EP_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DCD_EP_Open &rArr; USB_OTG_EPActivate
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPActivate
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Setup
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Reset
</UL>

<P><STRONG><a name="[15a]"></a>DCD_EP_PrepareRx</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usb_dcd.o(i.DCD_EP_PrepareRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPStartXfer
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessWrite
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_SendCSW
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_Reset
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_Init
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_Abort
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
</UL>

<P><STRONG><a name="[252]"></a>DCD_EP_SetAddress</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_dcd.o(i.DCD_EP_SetAddress))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
</UL>

<P><STRONG><a name="[15d]"></a>DCD_EP_Stall</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usb_dcd.o(i.DCD_EP_Stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DCD_EP_Stall &rArr; USB_OTG_EPSetStall
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPSetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CplClrFeature
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_Abort
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[15f]"></a>DCD_EP_Tx</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, usb_dcd.o(i.DCD_EP_Tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPStartXfer
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessRead
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_SendCSW
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_SendData
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
</UL>

<P><STRONG><a name="[16f]"></a>DCD_Init</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, usb_dcd.o(i.DCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = DCD_Init &rArr; USB_OTG_CoreInitDev &rArr; USB_OTG_FlushTxFifo &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_SetCurrentMode
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_SelectCore
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableGlobalInt
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DisableGlobalInt
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitDev
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInit
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[311]"></a>DCMI_CaptureCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_dcmi.o(i.DCMI_CaptureCmd))
<BR><BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_camera_stop
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_camera_fresh
</UL>

<P><STRONG><a name="[178]"></a>DCMI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_dcmi.o(i.DCMI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_IRQHandler
</UL>

<P><STRONG><a name="[310]"></a>DCMI_Cmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_dcmi.o(i.DCMI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_camera_stop
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_camera_fresh
</UL>

<P><STRONG><a name="[177]"></a>DCMI_GetITStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_dcmi.o(i.DCMI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_IRQHandler
</UL>

<P><STRONG><a name="[e8]"></a>DCMI_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.DCMI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DCMI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_GetITStatus
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_ClearITPendingBit
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dcmi_frame_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[137]"></a>DCMI_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_dcmi.o(i.DCMI_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_DCMI_Config
</UL>

<P><STRONG><a name="[136]"></a>DCMI_Init</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, stm32f4xx_dcmi.o(i.DCMI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DCMI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_DCMI_Config
</UL>

<P><STRONG><a name="[17a]"></a>DCMI_PWDN_RESET_Init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, mcu_dcmi.o(i.DCMI_PWDN_RESET_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DCMI_PWDN_RESET_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_camera_init
</UL>

<P><STRONG><a name="[a8]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f4xx_it.o(i.DMA1_Stream3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA1_Stream3_IRQHandler &rArr; DMA_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2sext_dma_process
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[a9]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f4xx_it.o(i.DMA1_Stream4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA1_Stream4_IRQHandler &rArr; DMA_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_dma_process
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[d3]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f4xx_it.o(i.DMA2_Stream1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA2_Stream1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dcmi_dma_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[d5]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA2_Stream3_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessDMAIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[183]"></a>DMA_ClearFlag</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessDMAIRQ
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream1_IRQHandler
</UL>

<P><STRONG><a name="[17f]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2sext_dma_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream4_IRQHandler
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream3_IRQHandler
</UL>

<P><STRONG><a name="[210]"></a>DMA_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2sext_dma_stop
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2sext_dma_start
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_dma_stop
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_dma_start
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_camera_stop
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_camera_fresh
</UL>

<P><STRONG><a name="[13b]"></a>DMA_DeInit</STRONG> (Thumb, 278 bytes, Stack size 28 bytes, stm32f4xx_dma.o(i.DMA_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2sext_dma_init
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_dma_init
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_DCMI_DMA_Init
</UL>

<P><STRONG><a name="[13e]"></a>DMA_DoubleBufferModeCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_DoubleBufferModeCmd))
<BR><BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2sext_dma_init
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_dma_init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_DCMI_DMA_Init
</UL>

<P><STRONG><a name="[13d]"></a>DMA_DoubleBufferModeConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_DoubleBufferModeConfig))
<BR><BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2sext_dma_init
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_dma_init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_DCMI_DMA_Init
</UL>

<P><STRONG><a name="[211]"></a>DMA_FlowControllerConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_FlowControllerConfig))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
</UL>

<P><STRONG><a name="[431]"></a>DMA_GetCmdStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_GetCmdStatus))
<BR><BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2sext_dma_init
</UL>

<P><STRONG><a name="[182]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream1_IRQHandler
</UL>

<P><STRONG><a name="[17e]"></a>DMA_GetITStatus</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, stm32f4xx_dma.o(i.DMA_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream4_IRQHandler
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream3_IRQHandler
</UL>

<P><STRONG><a name="[13f]"></a>DMA_ITConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2sext_dma_init
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_dma_init
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_DCMI_DMA_Init
</UL>

<P><STRONG><a name="[13c]"></a>DMA_Init</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, stm32f4xx_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2sext_dma_init
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_dma_init
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_DCMI_DMA_Init
</UL>

<P><STRONG><a name="[97]"></a>DebugMon_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DebugMon_Handler &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[17c]"></a>Delay</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stimer.o(i.Delay))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_init
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_init
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_init
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_init
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_init
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL91874_init
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL91874_refresh_gram
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_init
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_QVGAConfig
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_QQVGAConfig
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_QVGAConfig
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_QQVGAConfig
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_JPEGConfig
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_PWDN_RESET_Init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ssd1615_init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_esp8266
</UL>

<P><STRONG><a name="[189]"></a>Demo_HandleDisconnect</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, dual_func_demo.o(i.Demo_HandleDisconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Demo_HandleDisconnect &rArr; USBH_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demo_Application
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_DeviceDisconnected
</UL>

<P><STRONG><a name="[194]"></a>Demo_Process</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dual_func_demo.o(i.Demo_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = Demo_Process &rArr; Demo_Application &rArr; Explore_Disk &rArr;  Explore_Disk (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demo_Application
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_loop_task
</UL>

<P><STRONG><a name="[196]"></a>EPD_select_LUT</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, dev_il3820.o(i.EPD_select_LUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = EPD_select_LUT &rArr; drv_il3820_write_data &rArr; bus_lcd_write_data &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_il3820_write_data
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_il3820_write_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_init
</UL>

<P><STRONG><a name="[3c2]"></a>ETH_CheckFrameReceived</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, stm32f4x7_eth.o(i.ETH_CheckFrameReceived))
<BR><BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_loop_task
</UL>

<P><STRONG><a name="[408]"></a>ETH_Get_Received_Frame</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, stm32f4x7_eth.o(i.ETH_Get_Received_Frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ETH_Get_Received_Frame
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
</UL>

<P><STRONG><a name="[19c]"></a>ETH_ReadPHYRegister</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, stm32f4x7_eth.o(i.ETH_ReadPHYRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ETH_ReadPHYRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eth_Link_ITHandler
</UL>

<P><STRONG><a name="[c2]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = EXTI15_10_IRQHandler &rArr; Eth_Link_ITHandler &rArr; netif_set_link_up &rArr; dhcp_network_changed &rArr; dhcp_reboot &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eth_Link_ITHandler
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[19b]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[199]"></a>EXTI_GetITStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[19a]"></a>Eth_Link_ITHandler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f4x7_eth_bsp.o(i.Eth_Link_ITHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = Eth_Link_ITHandler &rArr; netif_set_link_up &rArr; dhcp_network_changed &rArr; dhcp_reboot &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_down
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_ReadPHYRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[41b]"></a>FSMC_NORSRAMCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(i.FSMC_NORSRAMCmd))
<BR><BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_fsmc_lcd_Init
</UL>

<P><STRONG><a name="[41a]"></a>FSMC_NORSRAMInit</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, stm32f4xx_fsmc.o(i.FSMC_NORSRAMInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FSMC_NORSRAMInit
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_fsmc_lcd_Init
</UL>

<P><STRONG><a name="[142]"></a>GPIO_Init</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32f4xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_open
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_in
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_dac
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_timer
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_out
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_init
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_init
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_fsmc_lcd_Init
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_GPIO_Config
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCO1_Init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_PWDN_RESET_Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_DCMI_HW_Init
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_adc_temprate_init
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_DriveVBUS
</UL>

<P><STRONG><a name="[141]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_open
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_timer
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_init
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_init
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_fsmc_lcd_Init
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_GPIO_Config
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCO1_Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_DCMI_HW_Init
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
</UL>

<P><STRONG><a name="[201]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_input_readbit
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Detect
</UL>

<P><STRONG><a name="[17b]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_rs485_write
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_resetbit
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_PWDN_RESET_Init
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_DriveVBUS
</UL>

<P><STRONG><a name="[17d]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_rs485_write
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_setbit
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_PWDN_RESET_Init
</UL>

<P><STRONG><a name="[26f]"></a>HCD_GetCurrentFrame</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_hcd.o(i.HCD_GetCurrentFrame))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[290]"></a>HCD_GetCurrentSpeed</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_hcd.o(i.HCD_GetCurrentSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[26e]"></a>HCD_GetURB_State</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_hcd.o(i.HCD_GetURB_State))
<BR><BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[276]"></a>HCD_GetXferCnt</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_hcd.o(i.HCD_GetXferCnt))
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_DecodeCSW
</UL>

<P><STRONG><a name="[1aa]"></a>HCD_Init</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, usb_hcd.o(i.HCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HCD_Init &rArr; USB_OTG_CoreInitHost &rArr; USB_OTG_DriveVbus &rArr; USB_OTG_BSP_DriveVBUS &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_SetCurrentMode
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_SelectCore
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableGlobalInt
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DisableGlobalInt
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInit
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
</UL>

<P><STRONG><a name="[187]"></a>HCD_IsDeviceConnected</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_hcd.o(i.HCD_IsDeviceConnected))
<BR><BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_TestUnitReady
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_RequestSense
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_ReadCapacity10
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_ModeSense6
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Init
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_DecodeCSW
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Write10
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Read10
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_disk_write
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_disk_read
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_disk_initialize
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demo_Process
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explore_Disk
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demo_Application
</UL>

<P><STRONG><a name="[28f]"></a>HCD_IsPortEnabled</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_hcd.o(i.HCD_IsPortEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[1ac]"></a>HCD_ResetPort</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usb_hcd.o(i.HCD_ResetPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HCD_ResetPort &rArr; USB_OTG_ResetPort &rArr; USB_OTG_BSP_mDelay &rArr; BSP_Delay &rArr; BSP_SetTime &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ResetPort
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[1ae]"></a>HCD_SubmitRequest</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_hcd.o(i.HCD_SubmitRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_BulkSendData
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_BulkReceiveData
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendSetup
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendData
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReceiveData
</UL>

<P><STRONG><a name="[92]"></a>HardFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HardFault_Handler &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1ed]"></a>I2C_AcknowledgeConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_AcknowledgeConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_sccb_readreg
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_GPIO_Config
</UL>

<P><STRONG><a name="[2ee]"></a>I2C_CheckEvent</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_CheckEvent))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_sccb_writereg
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_sccb_readreg
</UL>

<P><STRONG><a name="[1ec]"></a>I2C_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_GPIO_Config
</UL>

<P><STRONG><a name="[1b0]"></a>I2C_DeInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f4xx_i2c.o(i.I2C_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_GPIO_Config
</UL>

<P><STRONG><a name="[2ed]"></a>I2C_GenerateSTART</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_GenerateSTART))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_sccb_writereg
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_sccb_readreg
</UL>

<P><STRONG><a name="[2f1]"></a>I2C_GenerateSTOP</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_GenerateSTOP))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_sccb_writereg
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_sccb_readreg
</UL>

<P><STRONG><a name="[1b2]"></a>I2C_Init</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, stm32f4xx_i2c.o(i.I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_GPIO_Config
</UL>

<P><STRONG><a name="[2f2]"></a>I2C_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_sccb_readreg
</UL>

<P><STRONG><a name="[2ef]"></a>I2C_Send7bitAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_Send7bitAddress))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_sccb_writereg
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_sccb_readreg
</UL>

<P><STRONG><a name="[2f0]"></a>I2C_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_sccb_writereg
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_sccb_readreg
</UL>

<P><STRONG><a name="[42e]"></a>I2S_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.I2S_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2sext_config
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_config
</UL>

<P><STRONG><a name="[430]"></a>I2S_FullDuplexConfig</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, stm32f4xx_spi.o(i.I2S_FullDuplexConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2S_FullDuplexConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2sext_config
</UL>

<P><STRONG><a name="[42d]"></a>I2S_Init</STRONG> (Thumb, 226 bytes, Stack size 20 bytes, stm32f4xx_spi.o(i.I2S_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = I2S_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_config
</UL>

<P><STRONG><a name="[1b3]"></a>LwIP_DHCP_Process_Handle</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, netconf.o(i.LwIP_DHCP_Process_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = LwIP_DHCP_Process_Handle &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Periodic_Handle
</UL>

<P><STRONG><a name="[1b8]"></a>LwIP_Periodic_Handle</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, netconf.o(i.LwIP_Periodic_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = LwIP_Periodic_Handle &rArr; LwIP_DHCP_Process_Handle &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_DHCP_Process_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_loop_task
</UL>

<P><STRONG><a name="[1bd]"></a>LwIP_Pkt_Handle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, netconf.o(i.LwIP_Pkt_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = LwIP_Pkt_Handle &rArr; ethernetif_input &rArr; low_level_input &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_loop_task
</UL>

<P><STRONG><a name="[1bf]"></a>MCO1_Init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, mcu_dcmi.o(i.MCO1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MCO1_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_MCO1Config
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClockSecuritySystemCmd
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_camera_init
</UL>

<P><STRONG><a name="[1c9]"></a>MSC_BOT_CplClrFeature</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usbd_msc_bot.o(i.MSC_BOT_CplClrFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MSC_BOT_CplClrFeature &rArr; MSC_BOT_SendCSW &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_SendCSW
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Setup
</UL>

<P><STRONG><a name="[1ca]"></a>MSC_BOT_DataIn</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, usbd_msc_bot.o(i.MSC_BOT_DataIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = MSC_BOT_DataIn &rArr; SCSI_ProcessCmd &rArr; SCSI_Write10 &rArr; SCSI_ProcessWrite &rArr; MSC_BOT_SendCSW &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_SendCSW
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DataIn
</UL>

<P><STRONG><a name="[1cb]"></a>MSC_BOT_DataOut</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, usbd_msc_bot.o(i.MSC_BOT_DataOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = MSC_BOT_DataOut &rArr; MSC_BOT_CBW_Decode &rArr; SCSI_ProcessCmd &rArr; SCSI_Write10 &rArr; SCSI_ProcessWrite &rArr; MSC_BOT_SendCSW &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_SendCSW
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CBW_Decode
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DataOut
</UL>

<P><STRONG><a name="[249]"></a>MSC_BOT_DeInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_msc_bot.o(i.MSC_BOT_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DeInit
</UL>

<P><STRONG><a name="[1cc]"></a>MSC_BOT_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usbd_msc_bot.o(i.MSC_BOT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MSC_BOT_Init &rArr; DCD_EP_Flush &rArr; USB_OTG_FlushTxFifo &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Flush
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Init
</UL>

<P><STRONG><a name="[1cd]"></a>MSC_BOT_Reset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_msc_bot.o(i.MSC_BOT_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = MSC_BOT_Reset &rArr; DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Setup
</UL>

<P><STRONG><a name="[1c8]"></a>MSC_BOT_SendCSW</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usbd_msc_bot.o(i.MSC_BOT_SendCSW))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MSC_BOT_SendCSW &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessWrite
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DataOut
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DataIn
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CplClrFeature
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CBW_Decode
</UL>

<P><STRONG><a name="[93]"></a>MemManage_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MemManage_Handler &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>NMI_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = NMI_Handler &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[138]"></a>NVIC_Init</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_open
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_init
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2sext_dma_init
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_dma_init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_NVIC_Configuration
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_DCMI_Config
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_DCMI_DMA_Init
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_EnableInterrupt
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_TimeInit
</UL>

<P><STRONG><a name="[293]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_mcu_preinit
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_EnableInterrupt
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_TimeInit
</UL>

<P><STRONG><a name="[2d6]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, misc.o(i.NVIC_SetVectorTable))
<BR><BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_mcu_preinit
</UL>

<P><STRONG><a name="[dd]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.OTG_FS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = OTG_FS_IRQHandler &rArr; USBD_OTG_ISR_Handler &rArr; DCD_HandleUsbReset_ISR &rArr; USB_OTG_FlushTxFifo &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_IsHostMode
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1d1]"></a>OV2640_Init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, drv_ov2640.o(i.OV2640_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OV2640_Init &rArr; OV2640_QVGAConfig &rArr; OV2640_Reset &rArr; OV2640_WriteReg &rArr; bus_sccb_writereg
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_DCMI_Config
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_QVGAConfig
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_QQVGAConfig
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_JPEGConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_camera_config
</UL>

<P><STRONG><a name="[1d3]"></a>OV2640_JPEGConfig</STRONG> (Thumb, 260 bytes, Stack size 16 bytes, drv_ov2640.o(i.OV2640_JPEGConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OV2640_JPEGConfig &rArr; OV2640_Reset &rArr; OV2640_WriteReg &rArr; bus_sccb_writereg
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_WriteReg
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_Init
</UL>

<P><STRONG><a name="[1d4]"></a>OV2640_QQVGAConfig</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, drv_ov2640.o(i.OV2640_QQVGAConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OV2640_QQVGAConfig &rArr; OV2640_Reset &rArr; OV2640_WriteReg &rArr; bus_sccb_writereg
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_WriteReg
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_Init
</UL>

<P><STRONG><a name="[1d2]"></a>OV2640_QVGAConfig</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, drv_ov2640.o(i.OV2640_QVGAConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OV2640_QVGAConfig &rArr; OV2640_Reset &rArr; OV2640_WriteReg &rArr; bus_sccb_writereg
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_WriteReg
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_Init
</UL>

<P><STRONG><a name="[1d7]"></a>OV2640_ReadID</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, drv_ov2640.o(i.OV2640_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OV2640_ReadID &rArr; OV2640_WriteReg &rArr; bus_sccb_writereg
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_WriteReg
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_camera_init
</UL>

<P><STRONG><a name="[1d8]"></a>OV2640_ReadReg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_ov2640.o(i.OV2640_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OV2640_ReadReg &rArr; bus_sccb_readreg
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_sccb_readreg
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_ReadID
</UL>

<P><STRONG><a name="[1d5]"></a>OV2640_Reset</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, drv_ov2640.o(i.OV2640_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OV2640_Reset &rArr; OV2640_WriteReg &rArr; bus_sccb_writereg
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_QVGAConfig
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_QQVGAConfig
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_JPEGConfig
</UL>

<P><STRONG><a name="[1d6]"></a>OV2640_WriteReg</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, drv_ov2640.o(i.OV2640_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OV2640_WriteReg &rArr; bus_sccb_writereg
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_sccb_writereg
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_Reset
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_QVGAConfig
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_QQVGAConfig
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_JPEGConfig
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_ReadID
</UL>

<P><STRONG><a name="[1db]"></a>OV9655_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, drv_ov9655.o(i.OV9655_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = OV9655_Init &rArr; BUS_DCMI_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_QVGAConfig
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_QQVGAConfig
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_DCMI_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_camera_config
</UL>

<P><STRONG><a name="[1dc]"></a>OV9655_QQVGAConfig</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, drv_ov9655.o(i.OV9655_QQVGAConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OV9655_QQVGAConfig &rArr; OV9655_WriteReg &rArr; bus_sccb_writereg
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_WriteReg
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_Init
</UL>

<P><STRONG><a name="[1dd]"></a>OV9655_QVGAConfig</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, drv_ov9655.o(i.OV9655_QVGAConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OV9655_QVGAConfig &rArr; OV9655_WriteReg &rArr; bus_sccb_writereg
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_WriteReg
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_Init
</UL>

<P><STRONG><a name="[1e0]"></a>OV9655_ReadID</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, drv_ov9655.o(i.OV9655_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OV9655_ReadID &rArr; OV9655_ReadReg &rArr; bus_sccb_readreg
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_camera_init
</UL>

<P><STRONG><a name="[1e1]"></a>OV9655_ReadReg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_ov9655.o(i.OV9655_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OV9655_ReadReg &rArr; bus_sccb_readreg
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_sccb_readreg
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_ReadID
</UL>

<P><STRONG><a name="[1de]"></a>OV9655_Reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_ov9655.o(i.OV9655_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_QVGAConfig
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_QQVGAConfig
</UL>

<P><STRONG><a name="[1df]"></a>OV9655_WriteReg</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, drv_ov9655.o(i.OV9655_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OV9655_WriteReg &rArr; bus_sccb_writereg
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_sccb_writereg
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_QVGAConfig
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_QQVGAConfig
</UL>

<P><STRONG><a name="[433]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(i.PWR_BackupAccessCmd))
<BR><BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_rtc_init
</UL>

<P><STRONG><a name="[98]"></a>PendSV_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.PendSV_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortPendSVHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[13a]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_open
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2sext_dma_init
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_dma_init
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_init
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_fsmc_lcd_Init
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_GPIO_Config
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCO1_Init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_PWDN_RESET_Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_DCMI_HW_Init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_DCMI_DMA_Init
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_init
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_DriveVBUS
</UL>

<P><STRONG><a name="[135]"></a>RCC_AHB2PeriphClockCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_DCMI_Config
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
</UL>

<P><STRONG><a name="[419]"></a>RCC_AHB3PeriphClockCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB3PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_fsmc_lcd_Init
</UL>

<P><STRONG><a name="[1eb]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_cap_init
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_open
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_init
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dac_open
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_pwm_init
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_config
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_init
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_GPIO_Config
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_rtc_init
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_TimeInit
</UL>

<P><STRONG><a name="[1b1]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
</UL>

<P><STRONG><a name="[213]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_cap_init
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_open
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_init
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_pwm_init
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_adc_temprate_init
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
</UL>

<P><STRONG><a name="[1fe]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DeInit
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_adc_temprate_init
</UL>

<P><STRONG><a name="[1c0]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_ClockSecuritySystemCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCO1_Init
</UL>

<P><STRONG><a name="[162]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_mcu_preinit
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleEnumDone_ISR
</UL>

<P><STRONG><a name="[42c]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_config
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_rtc_init
</UL>

<P><STRONG><a name="[42a]"></a>RCC_I2SCLKConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_I2SCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_config
</UL>

<P><STRONG><a name="[435]"></a>RCC_LSEConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_LSEConfig))
<BR><BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_rtc_init
</UL>

<P><STRONG><a name="[1c1]"></a>RCC_MCO1Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_MCO1Config))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCO1_Init
</UL>

<P><STRONG><a name="[42b]"></a>RCC_PLLI2SCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_PLLI2SCmd))
<BR><BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_config
</UL>

<P><STRONG><a name="[437]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_RTCCLKCmd))
<BR><BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_rtc_init
</UL>

<P><STRONG><a name="[436]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_RTCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_rtc_init
</UL>

<P><STRONG><a name="[1e3]"></a>RTC_EnterInitMode</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[1e4]"></a>RTC_ExitInitMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_ExitInitMode))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[1e2]"></a>RTC_Init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(i.RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC_Init &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_rtc_init
</UL>

<P><STRONG><a name="[434]"></a>RTC_ReadBackupRegister</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(i.RTC_ReadBackupRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_rtc_init
</UL>

<P><STRONG><a name="[1e5]"></a>RTC_SetDate</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(i.RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RTC_SetDate &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_rtc_init
</UL>

<P><STRONG><a name="[1e9]"></a>RTC_SetTime</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, stm32f4xx_rtc.o(i.RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RTC_SetTime &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_rtc_init
</UL>

<P><STRONG><a name="[1e8]"></a>RTC_WaitForSynchro</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, stm32f4xx_rtc.o(i.RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
</UL>

<P><STRONG><a name="[438]"></a>RTC_WriteBackupRegister</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(i.RTC_WriteBackupRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_rtc_init
</UL>

<P><STRONG><a name="[1ea]"></a>SCCB_GPIO_Config</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, mcu_i2c.o(i.SCCB_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SCCB_GPIO_Config &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_AcknowledgeConfig
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_camera_init
</UL>

<P><STRONG><a name="[1c6]"></a>SCSI_ProcessCmd</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, usbd_msc_scsi.o(i.SCSI_ProcessCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = SCSI_ProcessCmd &rArr; SCSI_Write10 &rArr; SCSI_ProcessWrite &rArr; MSC_BOT_SendCSW &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Verify10
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_TestUnitReady
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_StartStopUnit
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_RequestSense
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadFormatCapacity
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadCapacity10
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ModeSense6
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ModeSense10
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Inquiry
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DataOut
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DataIn
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CBW_Decode
</UL>

<P><STRONG><a name="[1c5]"></a>SCSI_SenseCode</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usbd_msc_scsi.o(i.SCSI_SenseCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Verify10
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_TestUnitReady
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadFormatCapacity
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadCapacity10
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessWrite
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessRead
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CheckAddressRange
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CBW_Decode
</UL>

<P><STRONG><a name="[147]"></a>SDIO_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitWriteOperation
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitReadOperation
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp7Error
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp3Error
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp2Error
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
</UL>

<P><STRONG><a name="[217]"></a>SDIO_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[215]"></a>SDIO_ClockCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_ClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[21a]"></a>SDIO_DMACmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
</UL>

<P><STRONG><a name="[1a6]"></a>SDIO_DataConfig</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f4xx_sdio.o(i.SDIO_DataConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_DataConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[1fd]"></a>SDIO_DeInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_sdio.o(i.SDIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[149]"></a>SDIO_GetCommandResponse</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_GetCommandResponse))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>

<P><STRONG><a name="[146]"></a>SDIO_GetFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
</UL>

<P><STRONG><a name="[216]"></a>SDIO_GetITStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[20e]"></a>SDIO_GetPowerState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_GetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[14a]"></a>SDIO_GetResponse</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f4xx_sdio.o(i.SDIO_GetResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>

<P><STRONG><a name="[cb]"></a>SDIO_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SDIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDIO_IRQHandler &rArr; SD_ProcessIRQSrc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[218]"></a>SDIO_ITConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[203]"></a>SDIO_Init</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, stm32f4xx_sdio.o(i.SDIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SDIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
</UL>

<P><STRONG><a name="[1a7]"></a>SDIO_ReadData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_ReadData))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[1a5]"></a>SDIO_SendCommand</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_sdio.o(i.SDIO_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransfer
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[214]"></a>SDIO_SetPowerState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_SetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[200]"></a>SD_Detect</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm324xg_eval_sdio_sd.o(i.SD_Detect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SD_Detect
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetState
</UL>

<P><STRONG><a name="[202]"></a>SD_EnableWideBusOperation</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, stm324xg_eval_sdio_sd.o(i.SD_EnableWideBusOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[204]"></a>SD_GetCardInfo</STRONG> (Thumb, 622 bytes, Stack size 32 bytes, stm324xg_eval_sdio_sd.o(i.SD_GetCardInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SD_GetCardInfo &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[205]"></a>SD_GetState</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm324xg_eval_sdio_sd.o(i.SD_GetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SD_GetState &rArr; SD_SendStatus &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Detect
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetStatus
</UL>

<P><STRONG><a name="[207]"></a>SD_GetStatus</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm324xg_eval_sdio_sd.o(i.SD_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SD_GetStatus &rArr; SD_GetState &rArr; SD_SendStatus &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_disk_write
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_disk_read
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_Write
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_Read
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_IsReady
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_GetCapacity
</UL>

<P><STRONG><a name="[208]"></a>SD_Init</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, stm324xg_eval_sdio_sd.o(i.SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DeInit
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCardInfo
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_NVIC_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_disk_initialize
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_IsReady
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_Init
</UL>

<P><STRONG><a name="[20c]"></a>SD_InitializeCards</STRONG> (Thumb, 270 bytes, Stack size 40 bytes, stm324xg_eval_sdio_sd.o(i.SD_InitializeCards))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SD_InitializeCards &rArr; CmdResp6Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetPowerState
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp2Error
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[20f]"></a>SD_LowLevel_DMA_RxConfig</STRONG> (Thumb, 126 bytes, Stack size 80 bytes, mcu_sdio.o(i.SD_LowLevel_DMA_RxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = SD_LowLevel_DMA_RxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_FlowControllerConfig
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
</UL>

<P><STRONG><a name="[212]"></a>SD_LowLevel_DMA_TxConfig</STRONG> (Thumb, 128 bytes, Stack size 80 bytes, mcu_sdio.o(i.SD_LowLevel_DMA_TxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_FlowControllerConfig
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
</UL>

<P><STRONG><a name="[20a]"></a>SD_LowLevel_Init</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, mcu_sdio.o(i.SD_LowLevel_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SD_LowLevel_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[20b]"></a>SD_PowerON</STRONG> (Thumb, 376 bytes, Stack size 40 bytes, stm324xg_eval_sdio_sd.o(i.SD_PowerON))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SD_PowerON &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetPowerState
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClockCmd
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp7Error
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp3Error
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[185]"></a>SD_ProcessDMAIRQ</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm324xg_eval_sdio_sd.o(i.SD_ProcessDMAIRQ))
<BR><BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream3_IRQHandler
</UL>

<P><STRONG><a name="[1ff]"></a>SD_ProcessIRQSrc</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, stm324xg_eval_sdio_sd.o(i.SD_ProcessIRQSrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SD_ProcessIRQSrc
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetITStatus
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
</UL>

<P><STRONG><a name="[219]"></a>SD_ReadMultiBlocks</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, stm324xg_eval_sdio_sd.o(i.SD_ReadMultiBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = SD_ReadMultiBlocks &rArr; SD_LowLevel_DMA_RxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_disk_read
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_Read
</UL>

<P><STRONG><a name="[20d]"></a>SD_SelectDeselect</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm324xg_eval_sdio_sd.o(i.SD_SelectDeselect))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SD_SelectDeselect &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[206]"></a>SD_SendStatus</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm324xg_eval_sdio_sd.o(i.SD_SendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SD_SendStatus &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetState
</UL>

<P><STRONG><a name="[21b]"></a>SD_StopTransfer</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm324xg_eval_sdio_sd.o(i.SD_StopTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SD_StopTransfer &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitWriteOperation
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitReadOperation
</UL>

<P><STRONG><a name="[21c]"></a>SD_WaitReadOperation</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, stm324xg_eval_sdio_sd.o(i.SD_WaitReadOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SD_WaitReadOperation &rArr; SD_StopTransfer &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_disk_read
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_Read
</UL>

<P><STRONG><a name="[21d]"></a>SD_WaitWriteOperation</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, stm324xg_eval_sdio_sd.o(i.SD_WaitWriteOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SD_WaitWriteOperation &rArr; SD_StopTransfer &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_disk_write
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_Write
</UL>

<P><STRONG><a name="[21e]"></a>SD_WriteMultiBlocks</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, stm324xg_eval_sdio_sd.o(i.SD_WriteMultiBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_disk_write
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_Write
</UL>

<P><STRONG><a name="[21f]"></a>SD_disk_initialize</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm324xg_eval_sdio_sd.o(i.SD_disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SD_disk_initialize &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[3a3]"></a>SD_disk_ioctl</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm324xg_eval_sdio_sd.o(i.SD_disk_ioctl))
<BR><BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>

<P><STRONG><a name="[220]"></a>SD_disk_read</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm324xg_eval_sdio_sd.o(i.SD_disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = SD_disk_read &rArr; SD_ReadMultiBlocks &rArr; SD_LowLevel_DMA_RxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitReadOperation
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[3a7]"></a>SD_disk_status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm324xg_eval_sdio_sd.o(i.SD_disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>

<P><STRONG><a name="[221]"></a>SD_disk_write</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm324xg_eval_sdio_sd.o(i.SD_disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitWriteOperation
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[41d]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_open
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_close
</UL>

<P><STRONG><a name="[42f]"></a>SPI_I2S_DMACmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2sext_dma_init
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_dma_init
</UL>

<P><STRONG><a name="[222]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, stm32f4xx_spi.o(i.SPI_I2S_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_I2S_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_config
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_open
</UL>

<P><STRONG><a name="[422]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_transfer
</UL>

<P><STRONG><a name="[423]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_transfer
</UL>

<P><STRONG><a name="[424]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_transfer
</UL>

<P><STRONG><a name="[420]"></a>SPI_Init</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32f4xx_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_open
</UL>

<P><STRONG><a name="[71]"></a>STORAGE_GetCapacity</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, usbd_storage_msd.o(i.STORAGE_GetCapacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = STORAGE_GetCapacity &rArr; SD_GetStatus &rArr; SD_GetState &rArr; SD_SendStatus &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage_msd.o(.data)
</UL>
<P><STRONG><a name="[76]"></a>STORAGE_GetMaxLun</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_storage_msd.o(i.STORAGE_GetMaxLun))
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage_msd.o(.data)
</UL>
<P><STRONG><a name="[70]"></a>STORAGE_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_storage_msd.o(i.STORAGE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = STORAGE_Init &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage_msd.o(.data)
</UL>
<P><STRONG><a name="[72]"></a>STORAGE_IsReady</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, usbd_storage_msd.o(i.STORAGE_IsReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = STORAGE_IsReady &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage_msd.o(.data)
</UL>
<P><STRONG><a name="[73]"></a>STORAGE_IsWriteProtected</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_storage_msd.o(i.STORAGE_IsWriteProtected))
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage_msd.o(.data)
</UL>
<P><STRONG><a name="[74]"></a>STORAGE_Read</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, usbd_storage_msd.o(i.STORAGE_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = STORAGE_Read &rArr; SD_ReadMultiBlocks &rArr; SD_LowLevel_DMA_RxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitReadOperation
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage_msd.o(.data)
</UL>
<P><STRONG><a name="[75]"></a>STORAGE_Write</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, usbd_storage_msd.o(i.STORAGE_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = STORAGE_Write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitWriteOperation
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage_msd.o(.data)
</UL>
<P><STRONG><a name="[96]"></a>SVC_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SVC_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSVCHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3c3]"></a>Stime_get_localtime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stimer.o(i.Stime_get_localtime))
<BR><BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_loop_task
</UL>

<P><STRONG><a name="[99]"></a>SysTick_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysTick_Handler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Update
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[ed]"></a>SystemInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, system_stm32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(.text)
</UL>
<P><STRONG><a name="[b6]"></a>TIM2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM2_IRQHandler &rArr; USB_OTG_BSP_TimerIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_TimerIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[b7]"></a>TIM3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM3_IRQHandler &rArr; mcu_tim3_IRQhandler
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_tim3_IRQhandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[cc]"></a>TIM5_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.TIM5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM5_IRQHandler &rArr; mcu_tim5_IRQhandler
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_tim5_IRQhandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[d1]"></a>TIM7_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.TIM7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM7_IRQHandler &rArr; mcu_tim7_IRQhandler
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_tim7_IRQhandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[133]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ARRPreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_pwm_init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SetTime
</UL>

<P><STRONG><a name="[43f]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_config
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_tim7_IRQhandler
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_tim5_IRQhandler
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_tim3_IRQhandler
</UL>

<P><STRONG><a name="[132]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_cap_init
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_TimerIRQ
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SetTime
</UL>

<P><STRONG><a name="[12f]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_init
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_config
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_stop
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_start
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_tim7_IRQhandler
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_tim5_IRQhandler
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_tim3_IRQhandler
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_TimerIRQ
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SetTime
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Delay
</UL>

<P><STRONG><a name="[443]"></a>TIM_GetCapture1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_GetCapture1))
<BR><BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_get_cap
</UL>

<P><STRONG><a name="[444]"></a>TIM_GetCapture2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_GetCapture2))
<BR><BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_get_cap
</UL>

<P><STRONG><a name="[445]"></a>TIM_GetCapture3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_GetCapture3))
<BR><BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_get_cap
</UL>

<P><STRONG><a name="[446]"></a>TIM_GetCapture4</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_GetCapture4))
<BR><BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_get_cap
</UL>

<P><STRONG><a name="[441]"></a>TIM_GetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_GetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_get_cap
</UL>

<P><STRONG><a name="[442]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_get_cap
</UL>

<P><STRONG><a name="[295]"></a>TIM_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_tim7_IRQhandler
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_tim5_IRQhandler
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_tim3_IRQhandler
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_TimerIRQ
</UL>

<P><STRONG><a name="[22b]"></a>TIM_ICInit</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_ICInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TIM_ICInit &rArr; TI3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI4_Config
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI3_Config
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_cap_init
</UL>

<P><STRONG><a name="[130]"></a>TIM_ITConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_init
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_config
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SetTime
</UL>

<P><STRONG><a name="[447]"></a>TIM_OC1Init</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, stm32f4xx_tim.o(i.TIM_OC1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_pwm_init
</UL>

<P><STRONG><a name="[449]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC1PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_pwm_init
</UL>

<P><STRONG><a name="[44a]"></a>TIM_OC2Init</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_OC2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_pwm_init
</UL>

<P><STRONG><a name="[44c]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC2PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_pwm_init
</UL>

<P><STRONG><a name="[44d]"></a>TIM_OC3Init</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_OC3Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC3Init
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_pwm_init
</UL>

<P><STRONG><a name="[44f]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC3PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_pwm_init
</UL>

<P><STRONG><a name="[450]"></a>TIM_OC4Init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_OC4Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_pwm_init
</UL>

<P><STRONG><a name="[452]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC4PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_pwm_init
</UL>

<P><STRONG><a name="[448]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetCompare1))
<BR><BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_pwm_init
</UL>

<P><STRONG><a name="[44b]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetCompare2))
<BR><BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_pwm_init
</UL>

<P><STRONG><a name="[44e]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetCompare3))
<BR><BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_pwm_init
</UL>

<P><STRONG><a name="[451]"></a>TIM_SetCompare4</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetCompare4))
<BR><BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_pwm_init
</UL>

<P><STRONG><a name="[440]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_cap_init
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_init
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_config
</UL>

<P><STRONG><a name="[22f]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetIC1Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[231]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetIC2Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[233]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetIC3Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[22d]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetIC4Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[131]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, stm32f4xx_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_cap_init
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_config
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_pwm_init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SetTime
</UL>

<P><STRONG><a name="[224]"></a>Time_Update</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stimer.o(i.Time_Update))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[bf]"></a>USART1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART1_IRQHandler &rArr; mcu_uart1_IRQhandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart1_IRQhandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[c0]"></a>USART2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART2_IRQHandler &rArr; mcu_uart2_IRQhandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart2_IRQhandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[c1]"></a>USART3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART3_IRQHandler &rArr; mcu_uart3_IRQhandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart3_IRQhandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[457]"></a>USART_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_open
</UL>

<P><STRONG><a name="[454]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart3_IRQhandler
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart2_IRQhandler
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart1_IRQhandler
</UL>

<P><STRONG><a name="[456]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_set_baud
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_open
</UL>

<P><STRONG><a name="[45a]"></a>USART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_write
</UL>

<P><STRONG><a name="[453]"></a>USART_GetITStatus</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f4xx_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart3_IRQhandler
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart2_IRQhandler
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart1_IRQhandler
</UL>

<P><STRONG><a name="[458]"></a>USART_ITConfig</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_open
</UL>

<P><STRONG><a name="[237]"></a>USART_Init</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, stm32f4xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_set_baud
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_open
</UL>

<P><STRONG><a name="[455]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart3_IRQhandler
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart2_IRQhandler
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart1_IRQhandler
</UL>

<P><STRONG><a name="[45b]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_write
</UL>

<P><STRONG><a name="[255]"></a>USBD_ClrCfg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_ClrCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_ClrCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[23b]"></a>USBD_CtlContinueRx</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlContinueRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBD_CtlContinueRx &rArr; DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataOutStage
</UL>

<P><STRONG><a name="[23c]"></a>USBD_CtlContinueSendData</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlContinueSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USBD_CtlContinueSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
</UL>

<P><STRONG><a name="[239]"></a>USBD_CtlError</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbd_req.o(i.USBD_CtlError))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_CtlError &rArr; DCD_EP_Stall &rArr; USB_OTG_EPSetStall
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Setup
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetStatus
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetConfig
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrFeature
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[23d]"></a>USBD_CtlReceiveStatus</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_ioreq.o(i.USBD_CtlReceiveStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USBD_CtlReceiveStatus &rArr; DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
</UL>

<P><STRONG><a name="[23e]"></a>USBD_CtlSendData</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Setup
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetStatus
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetConfig
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[23a]"></a>USBD_CtlSendStatus</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_ioreq.o(i.USBD_CtlSendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetFeature
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrFeature
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataOutStage
</UL>

<P><STRONG><a name="[247]"></a>USBD_DeInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[1c4]"></a>USBD_GetRxCount</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbd_ioreq.o(i.USBD_GetRxCount))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CBW_Decode
</UL>

<P><STRONG><a name="[243]"></a>USBD_GetString</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_GetString))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetLen
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_ProductStrDescriptor
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_ManufacturerStrDescriptor
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_InterfaceStrDescriptor
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_ConfigStrDescriptor
</UL>

<P><STRONG><a name="[193]"></a>USBD_Init</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, usbd_core.o(i.USBD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = USBD_Init &rArr; DCD_Init &rArr; USB_OTG_CoreInitDev &rArr; USB_OTG_FlushTxFifo &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_EnableInterrupt
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_DriveVBUS
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demo_Application
</UL>

<P><STRONG><a name="[66]"></a>USBD_MSC_DataIn</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbd_msc_core.o(i.USBD_MSC_DataIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = USBD_MSC_DataIn &rArr; MSC_BOT_DataIn &rArr; SCSI_ProcessCmd &rArr; SCSI_Write10 &rArr; SCSI_ProcessWrite &rArr; MSC_BOT_SendCSW &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DataIn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc_core.o(.data)
</UL>
<P><STRONG><a name="[67]"></a>USBD_MSC_DataOut</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbd_msc_core.o(i.USBD_MSC_DataOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = USBD_MSC_DataOut &rArr; MSC_BOT_DataOut &rArr; MSC_BOT_CBW_Decode &rArr; SCSI_ProcessCmd &rArr; SCSI_Write10 &rArr; SCSI_ProcessWrite &rArr; MSC_BOT_SendCSW &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DataOut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc_core.o(.data)
</UL>
<P><STRONG><a name="[64]"></a>USBD_MSC_DeInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbd_msc_core.o(i.USBD_MSC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USBD_MSC_DeInit &rArr; DCD_EP_Close &rArr; USB_OTG_EPDeactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Close
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc_core.o(.data)
</UL>
<P><STRONG><a name="[68]"></a>USBD_MSC_GetCfgDesc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_msc_core.o(i.USBD_MSC_GetCfgDesc))
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc_core.o(.data)
</UL>
<P><STRONG><a name="[63]"></a>USBD_MSC_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usbd_msc_core.o(i.USBD_MSC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USBD_MSC_Init &rArr; MSC_BOT_Init &rArr; DCD_EP_Flush &rArr; USB_OTG_FlushTxFifo &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DeInit
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc_core.o(.data)
</UL>
<P><STRONG><a name="[65]"></a>USBD_MSC_Setup</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, usbd_msc_core.o(i.USBD_MSC_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USBD_MSC_Setup &rArr; MSC_BOT_CplClrFeature &rArr; MSC_BOT_SendCSW &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Flush
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Close
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_Reset
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CplClrFeature
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc_core.o(.data)
</UL>
<P><STRONG><a name="[1d0]"></a>USBD_OTG_ISR_Handler</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, usb_dcd_int.o(i.USBD_OTG_ISR_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USBD_OTG_ISR_Handler &rArr; DCD_HandleUsbReset_ISR &rArr; USB_OTG_FlushTxFifo &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_IsoOUTIncomplete_ISR
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_IsoINIncomplete_ISR
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleUsbReset_ISR
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleUSBSuspend_ISR
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleSof_ISR
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleRxStatusQueueLevel_ISR
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleResume_ISR
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleOutEP_ISR
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleInEP_ISR
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleEnumDone_ISR
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadCoreItr
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_IsDeviceMode
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[257]"></a>USBD_ParseSetupRequest</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, usbd_req.o(i.USBD_ParseSetupRequest))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[254]"></a>USBD_SetCfg</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_SetCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_SetCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[258]"></a>USBD_StdDevReq</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, usbd_req.o(i.USBD_StdDevReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USBD_StdDevReq &rArr; USBD_SetFeature &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetFeature
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetStatus
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetConfig
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[25a]"></a>USBD_StdEPReq</STRONG> (Thumb, 310 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_StdEPReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USBD_StdEPReq &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_ClrStall
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[259]"></a>USBD_StdItfReq</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_StdItfReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USBD_StdItfReq &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[6e]"></a>USBD_USR_ConfigStrDescriptor</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_USR_ConfigStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_USR_ConfigStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[79]"></a>USBD_USR_DeviceConfigured</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_usr.o(i.USBD_USR_DeviceConfigured))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_USR_DeviceConfigured &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[7c]"></a>USBD_USR_DeviceConnected</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_usr.o(i.USBD_USR_DeviceConnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_USR_DeviceConnected &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[69]"></a>USBD_USR_DeviceDescriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_desc.o(i.USBD_USR_DeviceDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[7d]"></a>USBD_USR_DeviceDisconnected</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_usr.o(i.USBD_USR_DeviceDisconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_USR_DeviceDisconnected &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[78]"></a>USBD_USR_DeviceReset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_usr.o(i.USBD_USR_DeviceReset))
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[7b]"></a>USBD_USR_DeviceResumed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_usr.o(i.USBD_USR_DeviceResumed))
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[7a]"></a>USBD_USR_DeviceSuspended</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_usr.o(i.USBD_USR_DeviceSuspended))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_USR_DeviceSuspended &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[77]"></a>USBD_USR_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_usr.o(i.USBD_USR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_USR_Init &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[6f]"></a>USBD_USR_InterfaceStrDescriptor</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_USR_InterfaceStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_USR_InterfaceStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[6a]"></a>USBD_USR_LangIDStrDescriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_desc.o(i.USBD_USR_LangIDStrDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[6b]"></a>USBD_USR_ManufacturerStrDescriptor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_USR_ManufacturerStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_USR_ManufacturerStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[6c]"></a>USBD_USR_ProductStrDescriptor</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_USR_ProductStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_USR_ProductStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[6d]"></a>USBD_USR_SerialStrDescriptor</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_USR_SerialStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USBD_USR_SerialStrDescriptor &rArr; Get_SerialNum &rArr; IntToUnicode
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SerialNum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[25b]"></a>USBH_Alloc_Channel</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usbh_hcs.o(i.USBH_Alloc_Channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_Alloc_Channel
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetFreeChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceInit
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[25d]"></a>USBH_BulkReceiveData</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, usbh_ioreq.o(i.USBH_BulkReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
</UL>

<P><STRONG><a name="[25e]"></a>USBH_BulkSendData</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, usbh_ioreq.o(i.USBH_BulkSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
</UL>

<P><STRONG><a name="[25f]"></a>USBH_ClrFeature</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usbh_stdreq.o(i.USBH_ClrFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_ClrFeature &rArr; USBH_CtlReq
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Abort
</UL>

<P><STRONG><a name="[52]"></a>USBH_Connected</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbh_core.o(i.USBH_Connected))
<BR>[Address Reference Count : 1]<UL><LI> usbh_core.o(.data)
</UL>
<P><STRONG><a name="[261]"></a>USBH_CtlReceiveData</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usbh_ioreq.o(i.USBH_CtlReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBH_CtlReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[260]"></a>USBH_CtlReq</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, usbh_ioreq.o(i.USBH_CtlReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_CtlReq
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SubmitSetupRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_GETMaxLUN
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClrFeature
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetCfg
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetAddress
</UL>

<P><STRONG><a name="[263]"></a>USBH_CtlSendData</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, usbh_ioreq.o(i.USBH_CtlSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBH_CtlSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[264]"></a>USBH_CtlSendSetup</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, usbh_ioreq.o(i.USBH_CtlSendSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBH_CtlSendSetup &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[292]"></a>USBH_DeAllocate_AllChannel</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usbh_hcs.o(i.USBH_DeAllocate_AllChannel))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[18d]"></a>USBH_DeInit</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, usbh_core.o(i.USBH_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Free_Channel
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demo_HandleDisconnect
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demo_Application
</UL>

<P><STRONG><a name="[53]"></a>USBH_Disconnected</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usbh_core.o(i.USBH_Disconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBH_Disconnected &rArr; USB_OTG_BSP_DriveVBUS &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_DriveVBUS
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DisableGlobalInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_core.o(.data)
</UL>
<P><STRONG><a name="[291]"></a>USBH_ErrorHandle</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, usbh_core.o(i.USBH_ErrorHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_ErrorHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[265]"></a>USBH_Free_Channel</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usbh_hcs.o(i.USBH_Free_Channel))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceDeInit
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeInit
</UL>

<P><STRONG><a name="[266]"></a>USBH_GetDescriptor</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usbh_stdreq.o(i.USBH_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_GetDescriptor &rArr; USBH_CtlReq
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_StringDesc
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_DevDesc
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_CfgDesc
</UL>

<P><STRONG><a name="[28c]"></a>USBH_GetNextDesc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbh_stdreq.o(i.USBH_GetNextDesc))
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseCfgDesc
</UL>

<P><STRONG><a name="[267]"></a>USBH_Get_CfgDesc</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, usbh_stdreq.o(i.USBH_Get_CfgDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBH_Get_CfgDesc &rArr; USBH_ParseCfgDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseCfgDesc
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[269]"></a>USBH_Get_DevDesc</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, usbh_stdreq.o(i.USBH_Get_DevDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBH_Get_DevDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseDevDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[26b]"></a>USBH_Get_StringDesc</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, usbh_stdreq.o(i.USBH_Get_StringDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBH_Get_StringDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseStringDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[26d]"></a>USBH_HandleControl</STRONG> (Thumb, 512 bytes, Stack size 40 bytes, usbh_core.o(i.USBH_HandleControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBH_HandleControl &rArr; USBH_CtlSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendSetup
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendData
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReceiveData
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_GetURB_State
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_GetCurrentFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[188]"></a>USBH_Init</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, usbh_core.o(i.USBH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USBH_Init &rArr; HCD_Init &rArr; USB_OTG_CoreInitHost &rArr; USB_OTG_DriveVbus &rArr; USB_OTG_BSP_DriveVBUS &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_EnableInterrupt
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeInit
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_DriveVBUS
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demo_Application
</UL>

<P><STRONG><a name="[274]"></a>USBH_MSC_BOT_Abort</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, usbh_msc_bot.o(i.USBH_MSC_BOT_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBH_MSC_BOT_Abort &rArr; USBH_ClrFeature &rArr; USBH_CtlReq
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClrFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
</UL>

<P><STRONG><a name="[275]"></a>USBH_MSC_DecodeCSW</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, usbh_msc_bot.o(i.USBH_MSC_DecodeCSW))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_MSC_DecodeCSW
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_GetXferCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
</UL>

<P><STRONG><a name="[27a]"></a>USBH_MSC_ErrorHandle</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, usbh_msc_core.o(i.USBH_MSC_ErrorHandle))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[27d]"></a>USBH_MSC_HandleBOTXfer</STRONG> (Thumb, 708 bytes, Stack size 48 bytes, usbh_msc_bot.o(i.USBH_MSC_HandleBOTXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_DecodeCSW
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Abort
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_BulkSendData
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_BulkReceiveData
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_GetURB_State
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_disk_write
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_disk_read
</UL>

<P><STRONG><a name="[278]"></a>USBH_MSC_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usbh_msc_bot.o(i.USBH_MSC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_MSC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[27c]"></a>USBH_MSC_ModeSense6</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, usbh_msc_scsi.o(i.USBH_MSC_ModeSense6))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_MSC_ModeSense6
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[281]"></a>USBH_MSC_Read10</STRONG> (Thumb, 208 bytes, Stack size 56 bytes, usbh_msc_scsi.o(i.USBH_MSC_Read10))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBH_MSC_Read10
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_disk_read
</UL>

<P><STRONG><a name="[27b]"></a>USBH_MSC_ReadCapacity10</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, usbh_msc_scsi.o(i.USBH_MSC_ReadCapacity10))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_MSC_ReadCapacity10
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[27e]"></a>USBH_MSC_RequestSense</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, usbh_msc_scsi.o(i.USBH_MSC_RequestSense))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_MSC_RequestSense
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[279]"></a>USBH_MSC_TestUnitReady</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, usbh_msc_scsi.o(i.USBH_MSC_TestUnitReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_MSC_TestUnitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[282]"></a>USBH_MSC_Write10</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, usbh_msc_scsi.o(i.USBH_MSC_Write10))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBH_MSC_Write10
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_disk_write
</UL>

<P><STRONG><a name="[271]"></a>USBH_Modify_Channel</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, usbh_hcs.o(i.USBH_Modify_Channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USBH_Modify_Channel &rArr; USB_OTG_HC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[1cf]"></a>USBH_OTG_ISR_Handler</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, usb_hcd_int.o(i.USBH_OTG_ISR_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USBH_OTG_ISR_Handler &rArr; USB_OTG_USBH_handle_hc_ISR &rArr; USB_OTG_USBH_handle_hc_n_In_ISR &rArr; USB_OTG_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_IsHostMode
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_sof_ISR
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_rx_qlvl_ISR
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_ptxfempty_ISR
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_port_ISR
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_nptxfempty_ISR
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_ISR
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_Disconnect_ISR
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadCoreItr
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[280]"></a>USBH_Open_Channel</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, usbh_hcs.o(i.USBH_Open_Channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBH_Open_Channel &rArr; USB_OTG_HC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceInit
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[268]"></a>USBH_ParseCfgDesc</STRONG> (Thumb, 268 bytes, Stack size 72 bytes, usbh_stdreq.o(i.USBH_ParseCfgDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBH_ParseCfgDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetNextDesc
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseInterfaceDesc
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseEPDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_CfgDesc
</UL>

<P><STRONG><a name="[55]"></a>USBH_PortDisabled</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbh_core.o(i.USBH_PortDisabled))
<BR>[Address Reference Count : 1]<UL><LI> usbh_core.o(.data)
</UL>
<P><STRONG><a name="[54]"></a>USBH_PortEnabled</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbh_core.o(i.USBH_PortEnabled))
<BR>[Address Reference Count : 1]<UL><LI> usbh_core.o(.data)
</UL>
<P><STRONG><a name="[195]"></a>USBH_Process</STRONG> (Thumb, 484 bytes, Stack size 40 bytes, usbh_core.o(i.USBH_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = USBH_Process &rArr; USBH_HandleEnum &rArr; USBH_Get_CfgDesc &rArr; USBH_ParseCfgDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Open_Channel
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeAllocate_AllChannel
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Alloc_Channel
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ErrorHandle
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeInit
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_ResetPort
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsPortEnabled
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_GetCurrentSpeed
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demo_Process
</UL>

<P><STRONG><a name="[51]"></a>USBH_SOF</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbh_core.o(i.USBH_SOF))
<BR>[Address Reference Count : 1]<UL><LI> usbh_core.o(.data)
</UL>
<P><STRONG><a name="[272]"></a>USBH_SetAddress</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbh_stdreq.o(i.USBH_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_SetAddress &rArr; USBH_CtlReq
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[273]"></a>USBH_SetCfg</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbh_stdreq.o(i.USBH_SetCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_SetCfg &rArr; USBH_CtlReq
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[87]"></a>USBH_USR_Configuration_DescAvailable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbh_msc_usr.o(i.USBH_USR_Configuration_DescAvailable))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBH_USR_Configuration_DescAvailable &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[7f]"></a>USBH_USR_DeInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_msc_usr.o(i.USBH_USR_DeInit))
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[86]"></a>USBH_USR_DeviceAddressAssigned</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_msc_usr.o(i.USBH_USR_DeviceAddressAssigned))
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[80]"></a>USBH_USR_DeviceAttached</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_msc_usr.o(i.USBH_USR_DeviceAttached))
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[82]"></a>USBH_USR_DeviceDisconnected</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbh_msc_usr.o(i.USBH_USR_DeviceDisconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBH_USR_DeviceDisconnected &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demo_HandleDisconnect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[8e]"></a>USBH_USR_DeviceNotSupported</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_msc_usr.o(i.USBH_USR_DeviceNotSupported))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBH_USR_DeviceNotSupported &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[84]"></a>USBH_USR_DeviceSpeedDetected</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, usbh_msc_usr.o(i.USBH_USR_DeviceSpeedDetected))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBH_USR_DeviceSpeedDetected &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[85]"></a>USBH_USR_Device_DescAvailable</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_msc_usr.o(i.USBH_USR_Device_DescAvailable))
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[8b]"></a>USBH_USR_EnumerationDone</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_msc_usr.o(i.USBH_USR_EnumerationDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBH_USR_EnumerationDone &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[7e]"></a>USBH_USR_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_msc_usr.o(i.USBH_USR_Init))
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[8d]"></a>USBH_USR_MSC_Application</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbh_msc_usr.o(i.USBH_USR_MSC_Application))
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[88]"></a>USBH_USR_Manufacturer_String</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbh_msc_usr.o(i.USBH_USR_Manufacturer_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBH_USR_Manufacturer_String &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[83]"></a>USBH_USR_OverCurrentDetected</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_msc_usr.o(i.USBH_USR_OverCurrentDetected))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBH_USR_OverCurrentDetected &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[89]"></a>USBH_USR_Product_String</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbh_msc_usr.o(i.USBH_USR_Product_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBH_USR_Product_String &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[81]"></a>USBH_USR_ResetDevice</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_msc_usr.o(i.USBH_USR_ResetDevice))
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[8a]"></a>USBH_USR_SerialNum_String</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbh_msc_usr.o(i.USBH_USR_SerialNum_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBH_USR_SerialNum_String &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[8f]"></a>USBH_USR_UnrecoveredError</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_msc_usr.o(i.USBH_USR_UnrecoveredError))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBH_USR_UnrecoveredError &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[8c]"></a>USBH_USR_UserInput</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbh_msc_usr.o(i.USBH_USR_UserInput))
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[246]"></a>USB_OTG_BSP_DriveVBUS</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, usb_bsp.o(i.USB_OTG_BSP_DriveVBUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USB_OTG_BSP_DriveVBUS &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Disconnected
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DriveVbus
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[248]"></a>USB_OTG_BSP_EnableInterrupt</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usb_bsp.o(i.USB_OTG_BSP_EnableInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_OTG_BSP_EnableInterrupt &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[245]"></a>USB_OTG_BSP_Init</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, usb_bsp.o(i.USB_OTG_BSP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USB_OTG_BSP_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB2PeriphClockCmd
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_TimeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[227]"></a>USB_OTG_BSP_TimerIRQ</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usb_bsp.o(i.USB_OTG_BSP_TimerIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_BSP_TimerIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[150]"></a>USB_OTG_BSP_mDelay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_bsp.o(i.USB_OTG_BSP_mDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USB_OTG_BSP_mDelay &rArr; BSP_Delay &rArr; BSP_SetTime &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_DevDisconnect
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_SetCurrentMode
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ResetPort
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DriveVbus
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInit
</UL>

<P><STRONG><a name="[296]"></a>USB_OTG_BSP_uDelay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_bsp.o(i.USB_OTG_BSP_uDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushRxFifo
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreReset
</UL>

<P><STRONG><a name="[172]"></a>USB_OTG_CoreInit</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, usb_core.o(i.USB_OTG_CoreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USB_OTG_CoreInit &rArr; USB_OTG_CoreReset &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreReset
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
</UL>

<P><STRONG><a name="[174]"></a>USB_OTG_CoreInitDev</STRONG> (Thumb, 324 bytes, Stack size 56 bytes, usb_core.o(i.USB_OTG_CoreInitDev))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USB_OTG_CoreInitDev &rArr; USB_OTG_FlushTxFifo &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_InitDevSpeed
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushRxFifo
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableDevInt
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
</UL>

<P><STRONG><a name="[1ab]"></a>USB_OTG_CoreInitHost</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, usb_core.o(i.USB_OTG_CoreInitHost))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USB_OTG_CoreInitHost &rArr; USB_OTG_DriveVbus &rArr; USB_OTG_BSP_DriveVBUS &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_DriveVBUS
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ResetPort
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_InitFSLSPClkSel
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushRxFifo
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableHostInt
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DriveVbus
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
</UL>

<P><STRONG><a name="[171]"></a>USB_OTG_DisableGlobalInt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_DisableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Disconnected
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demo_Application
</UL>

<P><STRONG><a name="[29b]"></a>USB_OTG_DriveVbus</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_DriveVbus))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USB_OTG_DriveVbus &rArr; USB_OTG_BSP_DriveVBUS &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_DriveVBUS
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadHPRT0
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
</UL>

<P><STRONG><a name="[161]"></a>USB_OTG_EP0Activate</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, usb_core.o(i.USB_OTG_EP0Activate))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_OTG_EP0Activate
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleEnumDone_ISR
</UL>

<P><STRONG><a name="[15c]"></a>USB_OTG_EP0StartXfer</STRONG> (Thumb, 230 bytes, Stack size 28 bytes, usb_core.o(i.USB_OTG_EP0StartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USB_OTG_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>

<P><STRONG><a name="[167]"></a>USB_OTG_EP0_OutStart</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, usb_core.o(i.USB_OTG_EP0_OutStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_OTG_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleUsbReset_ISR
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleOutEP_ISR
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleInEP_ISR
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
</UL>

<P><STRONG><a name="[159]"></a>USB_OTG_EPActivate</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, usb_core.o(i.USB_OTG_EPActivate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_OTG_EPActivate
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
</UL>

<P><STRONG><a name="[154]"></a>USB_OTG_EPClearStall</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, usb_core.o(i.USB_OTG_EPClearStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_OTG_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_ClrStall
</UL>

<P><STRONG><a name="[152]"></a>USB_OTG_EPDeactivate</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, usb_core.o(i.USB_OTG_EPDeactivate))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_OTG_EPDeactivate
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Close
</UL>

<P><STRONG><a name="[15e]"></a>USB_OTG_EPSetStall</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_EPSetStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_EPSetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
</UL>

<P><STRONG><a name="[15b]"></a>USB_OTG_EPStartXfer</STRONG> (Thumb, 356 bytes, Stack size 32 bytes, usb_core.o(i.USB_OTG_EPStartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>

<P><STRONG><a name="[299]"></a>USB_OTG_EnableDevInt</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_EnableDevInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_EnableDevInt
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableCommonInt
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitDev
</UL>

<P><STRONG><a name="[175]"></a>USB_OTG_EnableGlobalInt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_EnableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demo_Application
</UL>

<P><STRONG><a name="[29c]"></a>USB_OTG_EnableHostInt</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_EnableHostInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_EnableHostInt
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableCommonInt
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
</UL>

<P><STRONG><a name="[157]"></a>USB_OTG_FlushRxFifo</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_FlushRxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USB_OTG_FlushRxFifo &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_uDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Flush
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_StopHost
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_StopDevice
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitDev
</UL>

<P><STRONG><a name="[156]"></a>USB_OTG_FlushTxFifo</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_FlushTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USB_OTG_FlushTxFifo &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_uDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleUsbReset_ISR
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Flush
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_StopHost
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_StopDevice
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitDev
</UL>

<P><STRONG><a name="[163]"></a>USB_OTG_GetDeviceSpeed</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_GetDeviceSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_GetDeviceSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleEnumDone_ISR
</UL>

<P><STRONG><a name="[2a0]"></a>USB_OTG_GetMode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_GetMode))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_IsHostMode
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_IsDeviceMode
</UL>

<P><STRONG><a name="[2a4]"></a>USB_OTG_HC_DoPing</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_HC_DoPing))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_HC_DoPing
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_n_Out_ISR
</UL>

<P><STRONG><a name="[27f]"></a>USB_OTG_HC_Halt</STRONG> (Thumb, 108 bytes, Stack size 36 bytes, usb_core.o(i.USB_OTG_HC_Halt))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USB_OTG_HC_Halt
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceDeInit
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_n_Out_ISR
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_n_In_ISR
</UL>

<P><STRONG><a name="[283]"></a>USB_OTG_HC_Init</STRONG> (Thumb, 316 bytes, Stack size 36 bytes, usb_core.o(i.USB_OTG_HC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USB_OTG_HC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Open_Channel
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Modify_Channel
</UL>

<P><STRONG><a name="[1af]"></a>USB_OTG_HC_StartXfer</STRONG> (Thumb, 288 bytes, Stack size 52 bytes, usb_core.o(i.USB_OTG_HC_StartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_WritePacket
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_IsEvenFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>

<P><STRONG><a name="[298]"></a>USB_OTG_InitDevSpeed</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_InitDevSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitDev
</UL>

<P><STRONG><a name="[29a]"></a>USB_OTG_InitFSLSPClkSel</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_InitFSLSPClkSel))
<BR><BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_port_ISR
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
</UL>

<P><STRONG><a name="[24a]"></a>USB_OTG_IsDeviceMode</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, usb_core.o(i.USB_OTG_IsDeviceMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USB_OTG_IsDeviceMode
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_GetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[29f]"></a>USB_OTG_IsEvenFrame</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_IsEvenFrame))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_StartXfer
</UL>

<P><STRONG><a name="[1ce]"></a>USB_OTG_IsHostMode</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, usb_core.o(i.USB_OTG_IsHostMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USB_OTG_IsHostMode
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_GetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[24b]"></a>USB_OTG_ReadCoreItr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_ReadCoreItr))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[165]"></a>USB_OTG_ReadDevAllInEPItr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_ReadDevAllInEPItr))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleInEP_ISR
</UL>

<P><STRONG><a name="[16a]"></a>USB_OTG_ReadDevAllOutEp_itr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_ReadDevAllOutEp_itr))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleOutEP_ISR
</UL>

<P><STRONG><a name="[16b]"></a>USB_OTG_ReadDevOutEP_itr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_ReadDevOutEP_itr))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleOutEP_ISR
</UL>

<P><STRONG><a name="[29d]"></a>USB_OTG_ReadHPRT0</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_ReadHPRT0))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ResetPort
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DriveVbus
</UL>

<P><STRONG><a name="[2a1]"></a>USB_OTG_ReadHostAllChannels_intr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_ReadHostAllChannels_intr))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_ISR
</UL>

<P><STRONG><a name="[16d]"></a>USB_OTG_ReadPacket</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_ReadPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_rx_qlvl_ISR
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleRxStatusQueueLevel_ISR
</UL>

<P><STRONG><a name="[1ad]"></a>USB_OTG_ResetPort</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_ResetPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USB_OTG_ResetPort &rArr; USB_OTG_BSP_mDelay &rArr; BSP_Delay &rArr; BSP_SetTime &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadHPRT0
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_ResetPort
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
</UL>

<P><STRONG><a name="[170]"></a>USB_OTG_SelectCore</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_SelectCore))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_SelectCore
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
</UL>

<P><STRONG><a name="[173]"></a>USB_OTG_SetCurrentMode</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_SetCurrentMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USB_OTG_SetCurrentMode &rArr; USB_OTG_BSP_mDelay &rArr; BSP_Delay &rArr; BSP_SetTime &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
</UL>

<P><STRONG><a name="[192]"></a>USB_OTG_StopDevice</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_StopDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USB_OTG_StopDevice &rArr; USB_OTG_FlushTxFifo &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushRxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demo_Application
</UL>

<P><STRONG><a name="[18c]"></a>USB_OTG_StopHost</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_StopHost))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = USB_OTG_StopHost &rArr; USB_OTG_FlushTxFifo &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushRxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demo_Application
</UL>

<P><STRONG><a name="[176]"></a>USB_OTG_WritePacket</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, usb_core.o(i.USB_OTG_WritePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_ptxfempty_ISR
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_nptxfempty_ISR
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_WriteEmptyTxFifo
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_StartXfer
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPStartXfer
</UL>

<P><STRONG><a name="[2a5]"></a>USB_disk_initialize</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbh_msc_fatfs.o(i.USB_disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_disk_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[3a4]"></a>USB_disk_ioctl</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, usbh_msc_fatfs.o(i.USB_disk_ioctl))
<BR><BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>

<P><STRONG><a name="[2a6]"></a>USB_disk_read</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, usbh_msc_fatfs.o(i.USB_disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = USB_disk_read &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Read10
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[3a8]"></a>USB_disk_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbh_msc_fatfs.o(i.USB_disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>

<P><STRONG><a name="[2a7]"></a>USB_disk_write</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, usbh_msc_fatfs.o(i.USB_disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = USB_disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Write10
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[95]"></a>UsageFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UsageFault_Handler &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2a8]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4ff]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1b5]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emenu_display
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_DHCP_Process_Handle
</UL>

<P><STRONG><a name="[500]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[501]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[2aa]"></a>__0vsprintf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[502]"></a>__1vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[503]"></a>__2vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[504]"></a>__c89vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[4dd]"></a>vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>

<P><STRONG><a name="[2ab]"></a>__hardfp_log</STRONG> (Thumb, 872 bytes, Stack size 88 bytes, log.o(i.__hardfp_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[2b1]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[2af]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[2ac]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log2
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[2ae]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log2
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[505]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[506]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[507]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[2ad]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log2
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[2b7]"></a>board_low_task</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, wujique_main.o(i.board_low_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = board_low_task &rArr; eth_loop_task &rArr; LwIP_Periodic_Handle &rArr; LwIP_DHCP_Process_Handle &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_keypad_scan
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_key_scan
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_task
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_rec_task
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_touchkey_task
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_loop_task
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[2be]"></a>board_main_init</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, wujique_main.o(i.board_main_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = board_main_init &rArr; font_hzfont_init &rArr; vfs_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_rs485_init
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_keypad_init
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_key_init
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_8266_init
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_dacsound_init
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_buzzer_init
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_init
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_touchscreen_init
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_touchkey_init
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_tea5767_init
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_camera_init
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_ptHCHO_init
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_htu21d_init
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_hzfont_init
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mount
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_init
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_adc_temprate_init
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wujique_407test_init
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_task_create
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dev_register
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[2d3]"></a>board_mcu_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wujique_main.o(i.board_mcu_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = board_mcu_init &rArr; mcu_rtc_init &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_rtc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[2d5]"></a>board_mcu_preinit</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, wujique_main.o(i.board_mcu_preinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = board_mcu_preinit &rArr; mcu_uart_open &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_open
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_init
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2dd]"></a>bus_lcd_bl</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bus_lcd.o(i.bus_lcd_bl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bus_lcd_bl
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_setbit
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_resetbit
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_lcd_bl
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_lcd_bl
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_lcd_bl
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_lcd_bl
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL91874_lcd_bl
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_lcd_bl
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_lcd_bl
</UL>

<P><STRONG><a name="[2df]"></a>bus_lcd_close</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, bus_lcd.o(i.bus_lcd_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bus_lcd_close &rArr; mcu_spi_close &rArr; mcu_hspi_close &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_spi_close
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2c_close
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_refresh_gram
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_refresh_gram
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_drawpoint
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_display_onoff
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_set_cp_addr
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_lcd_bl
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_init
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_flush
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_fill
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_color_fill
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_drawpoint
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_display_onoff
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_set_cp_addr
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_lcd_bl
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_init
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_flush
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_fill
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_color_fill
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_drawpoint
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_display_onoff
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_set_cp_addr
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_lcd_bl
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_init
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_flush
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_fill
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_color_fill
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_set_cp_addr
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_init
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_flush
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_fill
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_color_fill
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_scan_dir
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_drawpoint
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_display_onoff
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_scan_dir
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_drawpoint
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_lcd_bl
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_init
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_flush
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_fill
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_color_fill
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_set_cp_addr
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_scan_dir
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_drawpoint
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_display_onoff
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL91874_lcd_bl
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL91874_init
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL91874_refresh_gram
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_lcd_bl
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ssd1615_init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ssd1615_display_onoff
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_lcd_bl
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_init
</UL>

<P><STRONG><a name="[2e2]"></a>bus_lcd_open</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, bus_lcd.o(i.bus_lcd_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = bus_lcd_open &rArr; mcu_spi_open &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_spi_open
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2c_open
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_refresh_gram
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_refresh_gram
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_drawpoint
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_display_onoff
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_set_cp_addr
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_lcd_bl
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_init
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_flush
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_fill
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_color_fill
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_drawpoint
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_display_onoff
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_set_cp_addr
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_lcd_bl
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_init
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_flush
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_fill
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_color_fill
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_drawpoint
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_display_onoff
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_set_cp_addr
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_lcd_bl
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_init
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_flush
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_fill
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_color_fill
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_set_cp_addr
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_init
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_flush
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_fill
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_color_fill
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_scan_dir
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_drawpoint
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_display_onoff
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_scan_dir
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_drawpoint
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_lcd_bl
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_init
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_flush
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_fill
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_color_fill
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_set_cp_addr
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_scan_dir
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_drawpoint
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_display_onoff
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL91874_lcd_bl
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL91874_init
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL91874_refresh_gram
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_lcd_bl
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ssd1615_init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ssd1615_display_onoff
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_lcd_bl
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_init
</UL>

<P><STRONG><a name="[2e6]"></a>bus_lcd_read_data</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, bus_lcd.o(i.bus_lcd_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = bus_lcd_read_data &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_spi_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_init
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_init
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_init
</UL>

<P><STRONG><a name="[2e8]"></a>bus_lcd_rst</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bus_lcd.o(i.bus_lcd_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bus_lcd_rst
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_setbit
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_resetbit
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_init
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_init
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_init
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_init
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_init
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL91874_init
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ssd1615_init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_init
</UL>

<P><STRONG><a name="[3b0]"></a>bus_lcd_w_data</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bus_lcd.o(i.bus_lcd_w_data))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_color_fill
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_color_fill
</UL>

<P><STRONG><a name="[2e9]"></a>bus_lcd_write_cmd</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, bus_lcd.o(i.bus_lcd_write_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = bus_lcd_write_cmd &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_spi_transfer
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_setbit
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_resetbit
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2c_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_refresh_gram
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_drawpoint
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_display_onoff
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_set_cp_addr
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_init
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_display_onoff
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_set_cp_addr
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_init
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_display_onoff
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_set_cp_addr
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_init
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_set_cp_addr
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_init
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_scan_dir
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_display_onoff
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_scan_dir
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_init
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_set_cp_addr
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_scan_dir
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_display_onoff
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_il91874_write_cmd
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_il3820_write_cmd
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ssd1615_init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ssd1615_display_onoff
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_init
</UL>

<P><STRONG><a name="[2eb]"></a>bus_lcd_write_data</STRONG> (Thumb, 96 bytes, Stack size 272 bytes, bus_lcd.o(i.bus_lcd_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = bus_lcd_write_data &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_spi_transfer
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2c_transfer
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_refresh_gram
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_drawpoint
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_set_cp_addr
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_init
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_flush
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_fill
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_color_fill
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_drawpoint
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_set_cp_addr
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_init
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_flush
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_fill
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_color_fill
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_drawpoint
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_set_cp_addr
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_init
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_flush
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_fill
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_set_cp_addr
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_init
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_flush
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_fill
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_color_fill
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_scan_dir
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_drawpoint
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_scan_dir
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_drawpoint
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_init
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_flush
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_fill
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_set_cp_addr
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_scan_dir
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_drawpoint
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_display_onoff
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_il91874_write_data
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_il3820_write_data
</UL>

<P><STRONG><a name="[1d9]"></a>bus_sccb_readreg</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, mcu_i2c.o(i.bus_sccb_readreg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bus_sccb_readreg
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceiveData
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_AcknowledgeConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_ReadReg
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_ReadReg
</UL>

<P><STRONG><a name="[1da]"></a>bus_sccb_writereg</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, mcu_i2c.o(i.bus_sccb_writereg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bus_sccb_writereg
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_WriteReg
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_WriteReg
</UL>

<P><STRONG><a name="[39a]"></a>clust2sect</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.clust2sect))
<BR><BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[2ca]"></a>dev_8266_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dev_esp8266.o(i.dev_8266_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dev_8266_init &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_main_init
</UL>

<P><STRONG><a name="[4be]"></a>dev_8266_open</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dev_esp8266.o(i.dev_8266_open))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_esp8266
</UL>

<P><STRONG><a name="[302]"></a>dev_8266_read</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dev_esp8266.o(i.dev_8266_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dev_8266_read &rArr; mcu_uart_read
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_read
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_esp8266
</UL>

<P><STRONG><a name="[304]"></a>dev_8266_write</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dev_esp8266.o(i.dev_8266_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dev_8266_write &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_write
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_esp8266
</UL>

<P><STRONG><a name="[306]"></a>dev_buzzer_close</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, dev_buzzer.o(i.dev_buzzer_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dev_buzzer_close &rArr; mcu_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_stop
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_resetbit
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_out
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_buzzer
</UL>

<P><STRONG><a name="[2c2]"></a>dev_buzzer_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, dev_buzzer.o(i.dev_buzzer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = dev_buzzer_init &rArr; mcu_io_config_timer &rArr; log2 &rArr; log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_pwm_init
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_main_init
</UL>

<P><STRONG><a name="[30a]"></a>dev_buzzer_open</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dev_buzzer.o(i.dev_buzzer_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = dev_buzzer_open &rArr; mcu_io_config_timer &rArr; log2 &rArr; log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_start
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_buzzer
</UL>

<P><STRONG><a name="[30c]"></a>dev_camera_close</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, camera_api.o(i.dev_camera_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dev_camera_close &rArr; dev_camera_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_camera_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_camera
</UL>

<P><STRONG><a name="[30e]"></a>dev_camera_config</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, camera_api.o(i.dev_camera_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = dev_camera_config &rArr; BUS_DCMI_DMA_Init &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_Init
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_Init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_DCMI_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_camera_show
</UL>

<P><STRONG><a name="[30f]"></a>dev_camera_fresh</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, camera_api.o(i.dev_camera_fresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dev_camera_fresh
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_Cmd
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_CaptureCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_camera_show
</UL>

<P><STRONG><a name="[2c9]"></a>dev_camera_init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, camera_api.o(i.dev_camera_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dev_camera_init &rArr; SCCB_GPIO_Config &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_GPIO_Config
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9655_ReadID
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_ReadID
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCO1_Init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_PWDN_RESET_Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_DCMI_HW_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_main_init
</UL>

<P><STRONG><a name="[4ba]"></a>dev_camera_open</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, camera_api.o(i.dev_camera_open))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_camera
</UL>

<P><STRONG><a name="[312]"></a>dev_camera_show</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, camera_api.o(i.dev_camera_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = dev_camera_show &rArr; dev_camera_config &rArr; BUS_DCMI_DMA_Init &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_setdir
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_prepare_display
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_flush
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dcmi_get_sta
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_camera_fresh
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_camera_config
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_camera
</UL>

<P><STRONG><a name="[30d]"></a>dev_camera_stop</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, camera_api.o(i.dev_camera_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dev_camera_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_Cmd
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_CaptureCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_camera_close
</UL>

<P><STRONG><a name="[318]"></a>dev_dacsound_close</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, dev_dacsound.o(i.dev_dacsound_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = dev_dacsound_close &rArr; dev_dacsound_init &rArr; mcu_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_dacsound_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_stop
</UL>

<P><STRONG><a name="[3e9]"></a>dev_dacsound_dataformat</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dev_dacsound.o(i.dev_dacsound_dataformat))
<BR><BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_play
</UL>

<P><STRONG><a name="[2c4]"></a>dev_dacsound_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dev_dacsound.o(i.dev_dacsound_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dev_dacsound_init &rArr; mcu_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_resetbit
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_out
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_main_init
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_dacsound_close
</UL>

<P><STRONG><a name="[319]"></a>dev_dacsound_open</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dev_dacsound.o(i.dev_dacsound_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = dev_dacsound_open &rArr; mcu_timer_config &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_init
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_config
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_dac
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dac_open
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_play
</UL>

<P><STRONG><a name="[3ea]"></a>dev_dacsound_setbuf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dev_dacsound.o(i.dev_dacsound_setbuf))
<BR><BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_play
</UL>

<P><STRONG><a name="[f0]"></a>dev_dacsound_timerinit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, dev_dacsound.o(i.dev_dacsound_timerinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dev_dacsound_timerinit &rArr; mcu_dac_output &rArr; DAC_SetChannel2Data
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dac_output
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_set_free_buf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_dacsound.o(i.dev_dacsound_open)
</UL>
<P><STRONG><a name="[320]"></a>dev_dacsound_transfer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dev_dacsound.o(i.dev_dacsound_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dev_dacsound_transfer &rArr; mcu_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_stop
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_stop
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_play
</UL>

<P><STRONG><a name="[2cc]"></a>dev_htu21d_init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, dev_htu21d.o(i.dev_htu21d_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = dev_htu21d_init &rArr; mcu_i2c_transfer &rArr; mcu_vi2c_transfer &rArr; mcu_vi2c_wait_ack &rArr; mcu_vi2c_stop &rArr; mcu_vi2c_sda_output &rArr; mcu_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2c_transfer
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2c_open
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2c_close
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_main_init
</UL>

<P><STRONG><a name="[4c1]"></a>dev_key_close</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dev_key.o(i.dev_key_close))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_key
</UL>

<P><STRONG><a name="[2c0]"></a>dev_key_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dev_key.o(i.dev_key_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dev_key_init &rArr; mcu_io_config_in &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_in
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_main_init
</UL>

<P><STRONG><a name="[4bf]"></a>dev_key_open</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dev_key.o(i.dev_key_open))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wujique_stm407_test
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_key
</UL>

<P><STRONG><a name="[4c0]"></a>dev_key_read</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, dev_key.o(i.dev_key_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = dev_key_read
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_key
</UL>

<P><STRONG><a name="[2b8]"></a>dev_key_scan</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, dev_key.o(i.dev_key_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dev_key_scan
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_input_readbit
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_low_task
</UL>

<P><STRONG><a name="[2c1]"></a>dev_keypad_init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, dev_keypad.o(i.dev_keypad_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = dev_keypad_init &rArr; mcu_io_config_in &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_setbit
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_in
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_out
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_main_init
</UL>

<P><STRONG><a name="[4c2]"></a>dev_keypad_open</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, dev_keypad.o(i.dev_keypad_open))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wujique_stm407_test
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_keypad
</UL>

<P><STRONG><a name="[3c0]"></a>dev_keypad_read</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, dev_keypad.o(i.dev_keypad_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = dev_keypad_read
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emenu_get_key
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_wait_key
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_uart
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tp_test
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_touchkey
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tft_display
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_rec
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_buzzer
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_rs485_snd
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_rs485_rec
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_keypad
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_key
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_esp8266
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_cogoled_lcd_display
</UL>

<P><STRONG><a name="[2b9]"></a>dev_keypad_scan</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, dev_keypad.o(i.dev_keypad_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dev_keypad_scan
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_setbit
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_input_readbit
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_resetbit
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_low_task
</UL>

<P><STRONG><a name="[4c8]"></a>dev_lcd_close</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, dev_lcd.o(i.dev_lcd_close))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tp_calibrate
</UL>

<P><STRONG><a name="[3be]"></a>dev_lcd_color_fill</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, dev_lcd.o(i.dev_lcd_color_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dev_lcd_color_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emenu_display
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_test_showstr
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_uart
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tp_test
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tp_calibrate
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_touchkey
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tft_display
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_spiflash_core
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_spiflash_board
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_spi_cog_display
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_wm8978
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_rec
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_fm
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_dac
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_buzzer
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_rs485_snd
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_rs485_rec
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_lcd_pic
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_keypad
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_key
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_i2c_oled_display
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_esp8266
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_cogoled_lcd_display
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_camera
</UL>

<P><STRONG><a name="[402]"></a>dev_lcd_drawpoint</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, dev_lcd.o(i.dev_lcd_drawpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dev_lcd_drawpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tp_test
</UL>

<P><STRONG><a name="[329]"></a>dev_lcd_fill</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, dev_lcd.o(i.dev_lcd_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dev_lcd_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
</UL>

<P><STRONG><a name="[317]"></a>dev_lcd_flush</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dev_lcd.o(i.dev_lcd_flush))
<BR><BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_show_bmp
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_camera_show
</UL>

<P><STRONG><a name="[323]"></a>dev_lcd_open</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, dev_lcd.o(i.dev_lcd_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dev_lcd_open &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wujique_stm407_test
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tp_test
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tp_calibrate
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tft_display
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_lcd_pic
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_cogoled_lcd_display
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_camera
</UL>

<P><STRONG><a name="[315]"></a>dev_lcd_prepare_display</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, dev_lcd.o(i.dev_lcd_prepare_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dev_lcd_prepare_display
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_show_bmp
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_camera_show
</UL>

<P><STRONG><a name="[324]"></a>dev_lcd_put_string</STRONG> (Thumb, 470 bytes, Stack size 72 bytes, dev_lcd.o(i.dev_lcd_put_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = dev_lcd_put_string &rArr; font_get_hz &rArr; font_hzfont_init &rArr; vfs_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_get_hw
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_free_m
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_get_hz
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_get_asc
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_fill
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emenu_display
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_test_showstr
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_uart
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tp_test
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tp_calibrate
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_touchkey
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tft_display
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_spiflash_core
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_spiflash_board
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_spi_cog_display
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_wm8978
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_rec
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_fm
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_dac
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_buzzer
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_rs485_snd
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_rs485_rec
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_lcd_pic
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_keypad
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_key
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_i2c_oled_display
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_esp8266
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_cogoled_lcd_display
</UL>

<P><STRONG><a name="[32b]"></a>dev_lcd_register</STRONG> (Thumb, 336 bytes, Stack size 40 bytes, dev_lcd.o(i.dev_lcd_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = dev_lcd_register &rArr; dev_lcd_setdir &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_setdir
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_finddrv
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dev_register
</UL>

<P><STRONG><a name="[314]"></a>dev_lcd_setdir</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, dev_lcd.o(i.dev_lcd_setdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dev_lcd_setdir &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_register
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_camera_show
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tp_test
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tp_calibrate
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_lcd_pic
</UL>

<P><STRONG><a name="[32d]"></a>dev_lcd_show_bmp</STRONG> (Thumb, 1638 bytes, Stack size 208 bytes, dev_lcd.o(i.dev_lcd_show_bmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 724<LI>Call Chain = dev_lcd_show_bmp &rArr; vfs_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_update
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_free_m
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_read
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_open
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_close
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_prepare_display
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_lcd_pic
</UL>

<P><STRONG><a name="[331]"></a>dev_lcd_update</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dev_lcd.o(i.dev_lcd_update))
<BR><BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emenu_display
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_show_bmp
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_test_showstr
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_uart
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tp_test
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tp_calibrate
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_touchkey
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tft_display
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_spiflash_core
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_spiflash_board
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_spi_cog_display
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_wm8978
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_rec
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_fm
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_dac
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_buzzer
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_rs485_snd
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_rs485_rec
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_lcd_pic
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_keypad
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_key
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_i2c_oled_display
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_esp8266
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_cogoled_lcd_display
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_camera
</UL>

<P><STRONG><a name="[332]"></a>dev_lcdbus_register</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, bus_lcd.o(i.dev_lcdbus_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = dev_lcdbus_register &rArr; mcu_fsmc_lcd_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_fsmc_lcd_Init
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_IO_init
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dev_register
</UL>

<P><STRONG><a name="[2cd]"></a>dev_ptHCHO_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dev_pthcho.o(i.dev_ptHCHO_init))
<BR><BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_main_init
</UL>

<P><STRONG><a name="[2c6]"></a>dev_rs485_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dev_rs485.o(i.dev_rs485_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dev_rs485_init &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_main_init
</UL>

<P><STRONG><a name="[334]"></a>dev_rs485_open</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, dev_rs485.o(i.dev_rs485_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = dev_rs485_open &rArr; mcu_uart_open &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_set_baud
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_open
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_rs485_snd
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_rs485_rec
</UL>

<P><STRONG><a name="[336]"></a>dev_rs485_read</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dev_rs485.o(i.dev_rs485_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dev_rs485_read &rArr; mcu_uart_read
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_read
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_rs485_rec
</UL>

<P><STRONG><a name="[337]"></a>dev_rs485_write</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, dev_rs485.o(i.dev_rs485_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = dev_rs485_write &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_write
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_rs485_snd
</UL>

<P><STRONG><a name="[338]"></a>dev_spiflash_close</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, dev_spiflash.o(i.dev_spiflash_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dev_spiflash_close &rArr; mcu_spi_close &rArr; mcu_hspi_close &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_spi_close
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_test_chiperase
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_test_chipcheck
</UL>

<P><STRONG><a name="[339]"></a>dev_spiflash_erase</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, dev_spiflash.o(i.dev_spiflash_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = dev_spiflash_erase &rArr; dev_spiflash_waitwriteend &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_spi_transfer
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_spi_cs
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_writeen
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_waitwriteend
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_sector_erase
</UL>

<P><STRONG><a name="[33d]"></a>dev_spiflash_open</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, dev_spiflash.o(i.dev_spiflash_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = dev_spiflash_open &rArr; mcu_spi_open &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_spi_open
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_test_chiperase
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_test_chipcheck
</UL>

<P><STRONG><a name="[33e]"></a>dev_spiflash_read</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, dev_spiflash.o(i.dev_spiflash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dev_spiflash_read &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_spi_transfer
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_spi_cs
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_sector_read
</UL>

<P><STRONG><a name="[341]"></a>dev_spiflash_register</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, dev_spiflash.o(i.dev_spiflash_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = dev_spiflash_register &rArr; dev_spiflash_readMTD &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_spi_open
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_spi_close
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_readMTD
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_readJTD
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dev_register
</UL>

<P><STRONG><a name="[342]"></a>dev_spiflash_sector_erase</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, dev_spiflash.o(i.dev_spiflash_sector_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = dev_spiflash_sector_erase &rArr; dev_spiflash_erase &rArr; dev_spiflash_waitwriteend &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_test_chiperase
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_test_chipcheck
</UL>

<P><STRONG><a name="[343]"></a>dev_spiflash_sector_read</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dev_spiflash.o(i.dev_spiflash_sector_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = dev_spiflash_sector_read &rArr; dev_spiflash_read &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_test_chiperase
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_test_chipcheck
</UL>

<P><STRONG><a name="[344]"></a>dev_spiflash_sector_write</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, dev_spiflash.o(i.dev_spiflash_sector_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = dev_spiflash_sector_write &rArr; dev_spiflash_write &rArr; dev_spiflash_waitwriteend &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_write
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_test_chipcheck
</UL>

<P><STRONG><a name="[346]"></a>dev_spiflash_test_chipcheck</STRONG> (Thumb, 298 bytes, Stack size 24 bytes, dev_spiflash.o(i.dev_spiflash_test_chipcheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = dev_spiflash_test_chipcheck &rArr; dev_spiflash_sector_write &rArr; dev_spiflash_write &rArr; dev_spiflash_waitwriteend &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_open
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_close
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_sector_write
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_sector_read
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_sector_erase
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_free_m
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_spiflash_board
</UL>

<P><STRONG><a name="[347]"></a>dev_spiflash_test_chiperase</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, dev_spiflash.o(i.dev_spiflash_test_chiperase))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = dev_spiflash_test_chiperase &rArr; dev_spiflash_sector_erase &rArr; dev_spiflash_erase &rArr; dev_spiflash_waitwriteend &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_open
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_close
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_sector_read
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_sector_erase
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_free_m
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_spiflash_core
</UL>

<P><STRONG><a name="[345]"></a>dev_spiflash_write</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, dev_spiflash.o(i.dev_spiflash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = dev_spiflash_write &rArr; dev_spiflash_waitwriteend &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_spi_transfer
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_spi_cs
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_writeen
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_waitwriteend
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_sector_write
</UL>

<P><STRONG><a name="[2c3]"></a>dev_tea5767_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dev_tea5767.o(i.dev_tea5767_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dev_tea5767_init &rArr; dev_tea5767_writereg &rArr; mcu_i2c_transfer &rArr; mcu_vi2c_transfer &rArr; mcu_vi2c_wait_ack &rArr; mcu_vi2c_stop &rArr; mcu_vi2c_sda_output &rArr; mcu_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_tea5767_writereg
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_main_init
</UL>

<P><STRONG><a name="[349]"></a>dev_tea5767_open</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dev_tea5767.o(i.dev_tea5767_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dev_tea5767_open &rArr; dev_tea5767_writereg &rArr; mcu_i2c_transfer &rArr; mcu_vi2c_transfer &rArr; mcu_vi2c_wait_ack &rArr; mcu_vi2c_stop &rArr; mcu_vi2c_sda_output &rArr; mcu_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_tea5767_writereg
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_fm
</UL>

<P><STRONG><a name="[34a]"></a>dev_tea5767_setfre</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, dev_tea5767.o(i.dev_tea5767_setfre))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dev_tea5767_setfre &rArr; dev_tea5767_writereg &rArr; mcu_i2c_transfer &rArr; mcu_vi2c_transfer &rArr; mcu_vi2c_wait_ack &rArr; mcu_vi2c_stop &rArr; mcu_vi2c_sda_output &rArr; mcu_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_tea5767_writereg
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_tea5767_fre2pll
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_fm
</UL>

<P><STRONG><a name="[4c6]"></a>dev_touchkey_close</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dev_touchkey.o(i.dev_touchkey_close))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_touchkey
</UL>

<P><STRONG><a name="[2c8]"></a>dev_touchkey_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dev_touchkey.o(i.dev_touchkey_init))
<BR><BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_main_init
</UL>

<P><STRONG><a name="[4c4]"></a>dev_touchkey_open</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, dev_touchkey.o(i.dev_touchkey_open))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_touchkey
</UL>

<P><STRONG><a name="[4c5]"></a>dev_touchkey_read</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, dev_touchkey.o(i.dev_touchkey_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = dev_touchkey_read
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_touchkey
</UL>

<P><STRONG><a name="[2bd]"></a>dev_touchkey_task</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, dev_touchkey.o(i.dev_touchkey_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = dev_touchkey_task &rArr; dev_touchkey_iocap &rArr; mcu_io_config_timer &rArr; log2 &rArr; log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_get_cap
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_cap_init
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_start
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_touchkey_scan
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_touchkey_resetpad
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_touchkey_iocap
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_low_task
</UL>

<P><STRONG><a name="[351]"></a>dev_touchscreen_close</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dev_touchscreen.o(i.dev_touchscreen_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dev_touchscreen_close &rArr; dev_xpt2046_close &rArr; mcu_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_xpt2046_close
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tp_test
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tp_calibrate
</UL>

<P><STRONG><a name="[2c7]"></a>dev_touchscreen_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dev_touchscreen.o(i.dev_touchscreen_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dev_touchscreen_init &rArr; dev_xpt2046_init &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_xpt2046_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_main_init
</UL>

<P><STRONG><a name="[354]"></a>dev_touchscreen_open</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dev_touchscreen.o(i.dev_touchscreen_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dev_touchscreen_open &rArr; dev_xpt2046_open &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_xpt2046_open
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tp_test
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tp_calibrate
</UL>

<P><STRONG><a name="[4cd]"></a>dev_touchscreen_read</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, dev_touchscreen.o(i.dev_touchscreen_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dev_touchscreen_read
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_input_read
</UL>

<P><STRONG><a name="[366]"></a>dev_touchscreen_write</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, dev_touchscreen.o(i.dev_touchscreen_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = dev_touchscreen_write
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_xpt2046_task
</UL>

<P><STRONG><a name="[356]"></a>dev_wm8978_dataformat</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, dev_wm8978.o(i.dev_wm8978_dataformat))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = dev_wm8978_dataformat &rArr; dev_wm8978_set_dataformat &rArr; dev_wm8978_writereg &rArr; mcu_i2c_transfer &rArr; mcu_vi2c_transfer &rArr; mcu_vi2c_wait_ack &rArr; mcu_vi2c_stop &rArr; mcu_vi2c_sda_output &rArr; mcu_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2sext_config
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_config
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_set_dataformat
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_rec
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_play
</UL>

<P><STRONG><a name="[2c5]"></a>dev_wm8978_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dev_wm8978.o(i.dev_wm8978_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = dev_wm8978_init &rArr; dev_wm8978_setting_init &rArr; dev_wm8978_inout &rArr; dev_wm8978_writereg &rArr; mcu_i2c_transfer &rArr; mcu_vi2c_transfer &rArr; mcu_vi2c_wait_ack &rArr; mcu_vi2c_stop &rArr; mcu_vi2c_sda_output &rArr; mcu_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_init
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_setting_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_main_init
</UL>

<P><STRONG><a name="[35c]"></a>dev_wm8978_inout</STRONG> (Thumb, 512 bytes, Stack size 32 bytes, dev_wm8978.o(i.dev_wm8978_inout))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = dev_wm8978_inout &rArr; dev_wm8978_writereg &rArr; mcu_i2c_transfer &rArr; mcu_vi2c_transfer &rArr; mcu_vi2c_wait_ack &rArr; mcu_vi2c_stop &rArr; mcu_vi2c_sda_output &rArr; mcu_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_writereg
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_rec
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_play
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_setting_init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_fm
</UL>

<P><STRONG><a name="[3e7]"></a>dev_wm8978_open</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dev_wm8978.o(i.dev_wm8978_open))
<BR><BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_rec
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_play
</UL>

<P><STRONG><a name="[35f]"></a>dev_wm8978_readreg</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dev_wm8978.o(i.dev_wm8978_readreg))
<BR><BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_set_aux_gain
</UL>

<P><STRONG><a name="[35e]"></a>dev_wm8978_set_aux_gain</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dev_wm8978.o(i.dev_wm8978_set_aux_gain))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = dev_wm8978_set_aux_gain &rArr; dev_wm8978_writereg &rArr; mcu_i2c_transfer &rArr; mcu_vi2c_transfer &rArr; mcu_vi2c_wait_ack &rArr; mcu_vi2c_stop &rArr; mcu_vi2c_sda_output &rArr; mcu_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_writereg
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_readreg
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_setting_init
</UL>

<P><STRONG><a name="[357]"></a>dev_wm8978_set_dataformat</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dev_wm8978.o(i.dev_wm8978_set_dataformat))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = dev_wm8978_set_dataformat &rArr; dev_wm8978_writereg &rArr; mcu_i2c_transfer &rArr; mcu_vi2c_transfer &rArr; mcu_vi2c_wait_ack &rArr; mcu_vi2c_stop &rArr; mcu_vi2c_sda_output &rArr; mcu_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_writereg
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_dataformat
</UL>

<P><STRONG><a name="[360]"></a>dev_wm8978_set_mic_gain</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dev_wm8978.o(i.dev_wm8978_set_mic_gain))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = dev_wm8978_set_mic_gain &rArr; dev_wm8978_writereg &rArr; mcu_i2c_transfer &rArr; mcu_vi2c_transfer &rArr; mcu_vi2c_wait_ack &rArr; mcu_vi2c_stop &rArr; mcu_vi2c_sda_output &rArr; mcu_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_writereg
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_setting_init
</UL>

<P><STRONG><a name="[361]"></a>dev_wm8978_set_phone_vol</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dev_wm8978.o(i.dev_wm8978_set_phone_vol))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = dev_wm8978_set_phone_vol &rArr; dev_wm8978_writereg &rArr; mcu_i2c_transfer &rArr; mcu_vi2c_transfer &rArr; mcu_vi2c_wait_ack &rArr; mcu_vi2c_stop &rArr; mcu_vi2c_sda_output &rArr; mcu_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_writereg
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_setting_init
</UL>

<P><STRONG><a name="[362]"></a>dev_wm8978_set_spk_vol</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dev_wm8978.o(i.dev_wm8978_set_spk_vol))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = dev_wm8978_set_spk_vol &rArr; dev_wm8978_writereg &rArr; mcu_i2c_transfer &rArr; mcu_vi2c_transfer &rArr; mcu_vi2c_wait_ack &rArr; mcu_vi2c_stop &rArr; mcu_vi2c_sda_output &rArr; mcu_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_writereg
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_setting_init
</UL>

<P><STRONG><a name="[363]"></a>dev_wm8978_transfer</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dev_wm8978.o(i.dev_wm8978_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dev_wm8978_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_dma_stop
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_dma_start
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_stop
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_rec
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_play
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_rec_stop
</UL>

<P><STRONG><a name="[35d]"></a>dev_wm8978_writereg</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, dev_wm8978.o(i.dev_wm8978_writereg))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dev_wm8978_writereg &rArr; mcu_i2c_transfer &rArr; mcu_vi2c_transfer &rArr; mcu_vi2c_wait_ack &rArr; mcu_vi2c_stop &rArr; mcu_vi2c_sda_output &rArr; mcu_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2c_transfer
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2c_open
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2c_close
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_inout
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_set_spk_vol
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_set_phone_vol
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_set_mic_gain
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_set_dataformat
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_set_aux_gain
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_setting_init
</UL>

<P><STRONG><a name="[352]"></a>dev_xpt2046_close</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, dev_xpt2046.o(i.dev_xpt2046_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dev_xpt2046_close &rArr; mcu_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_touchscreen_close
</UL>

<P><STRONG><a name="[353]"></a>dev_xpt2046_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dev_xpt2046.o(i.dev_xpt2046_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dev_xpt2046_init &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_touchscreen_init
</UL>

<P><STRONG><a name="[355]"></a>dev_xpt2046_open</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, dev_xpt2046.o(i.dev_xpt2046_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dev_xpt2046_open &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_config
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_touchscreen_open
</UL>

<P><STRONG><a name="[f1]"></a>dev_xpt2046_task</STRONG> (Thumb, 286 bytes, Stack size 32 bytes, dev_xpt2046.o(i.dev_xpt2046_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = dev_xpt2046_task &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_spi_transfer
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_spi_open
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_spi_close
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_touchscreen_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_xpt2046.o(i.dev_xpt2046_open)
</UL>
<P><STRONG><a name="[1bc]"></a>dhcp_coarse_tmr</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_coarse_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = dhcp_coarse_tmr &rArr; dhcp_t2_timeout &rArr; dhcp_rebind &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t2_timeout
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t1_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Periodic_Handle
</UL>

<P><STRONG><a name="[1bb]"></a>dhcp_fine_tmr</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_fine_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = dhcp_fine_tmr &rArr; dhcp_timeout &rArr; dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Periodic_Handle
</UL>

<P><STRONG><a name="[383]"></a>dhcp_network_changed</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_network_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = dhcp_network_changed &rArr; dhcp_reboot &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
</UL>

<P><STRONG><a name="[38b]"></a>dhcp_release</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = dhcp_release &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[38c]"></a>dhcp_renew</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_renew))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = dhcp_renew &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t1_timeout
</UL>

<P><STRONG><a name="[1b6]"></a>dhcp_start</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_DHCP_Process_Handle
</UL>

<P><STRONG><a name="[1b4]"></a>dhcp_stop</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dhcp_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_DHCP_Process_Handle
</UL>

<P><STRONG><a name="[3a1]"></a>disk_initialize</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = disk_initialize &rArr; SD_disk_initialize &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_disk_initialize
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[3a2]"></a>disk_ioctl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, diskio.o(i.disk_ioctl))
<BR><BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_disk_ioctl
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[3a5]"></a>disk_read</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, diskio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = disk_read &rArr; SD_disk_read &rArr; SD_ReadMultiBlocks &rArr; SD_LowLevel_DMA_RxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_disk_read
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[3a6]"></a>disk_status</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, diskio.o(i.disk_status))
<BR><BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_disk_status
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[3a9]"></a>disk_write</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, diskio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_disk_write
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[3]"></a>drv_IL3820_color_fill</STRONG> (Thumb, 242 bytes, Stack size 48 bytes, dev_il3820.o(i.drv_IL3820_color_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = drv_IL3820_color_fill &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_il3820.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>drv_IL3820_fill</STRONG> (Thumb, 268 bytes, Stack size 48 bytes, dev_il3820.o(i.drv_IL3820_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = drv_IL3820_fill &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_il3820.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>drv_IL3820_flush</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dev_il3820.o(i.drv_IL3820_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = drv_IL3820_flush &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_il3820.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>drv_IL3820_init</STRONG> (Thumb, 570 bytes, Stack size 40 bytes, dev_il3820.o(i.drv_IL3820_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = drv_IL3820_init &rArr; EPD_select_LUT &rArr; drv_il3820_write_data &rArr; bus_lcd_write_data &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_input_readbit
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_in
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_rst
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_il3820_write_data
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_il3820_write_cmd
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_select_LUT
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_il3820.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>drv_IL3820_lcd_bl</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, dev_il3820.o(i.drv_IL3820_lcd_bl))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = drv_IL3820_lcd_bl &rArr; bus_lcd_open &rArr; mcu_spi_open &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_bl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_il3820.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>drv_IL3820_prepare_display</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dev_il3820.o(i.drv_IL3820_prepare_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = drv_IL3820_prepare_display &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_il3820.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>drv_IL3820_update</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dev_il3820.o(i.drv_IL3820_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = drv_IL3820_update &rArr; drv_IL3820_refresh_gram &rArr; drv_il91874_write_data &rArr; bus_lcd_write_data &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_refresh_gram
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_il3820.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>drv_IL91874_color_fill</STRONG> (Thumb, 368 bytes, Stack size 40 bytes, dev_il91874.o(i.drv_IL91874_color_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = drv_IL91874_color_fill &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_il91874.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>drv_IL91874_fill</STRONG> (Thumb, 432 bytes, Stack size 56 bytes, dev_il91874.o(i.drv_IL91874_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = drv_IL91874_fill &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_il91874.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>drv_IL91874_flush</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dev_il91874.o(i.drv_IL91874_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = drv_IL91874_flush &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_il91874.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>drv_IL91874_init</STRONG> (Thumb, 420 bytes, Stack size 32 bytes, dev_il91874.o(i.drv_IL91874_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = drv_IL91874_init &rArr; drv_il91874_write_data &rArr; bus_lcd_write_data &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_input_readbit
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_in
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_il91874_write_data
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_il91874_write_cmd
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_rst
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_il91874.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>drv_IL91874_lcd_bl</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, dev_il91874.o(i.drv_IL91874_lcd_bl))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = drv_IL91874_lcd_bl &rArr; bus_lcd_open &rArr; mcu_spi_open &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_bl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_il91874.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>drv_IL91874_prepare_display</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dev_il91874.o(i.drv_IL91874_prepare_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = drv_IL91874_prepare_display &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_il91874.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>drv_IL91874_update</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dev_il91874.o(i.drv_IL91874_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = drv_IL91874_update &rArr; drv_IL91874_refresh_gram &rArr; drv_il91874_write_data &rArr; bus_lcd_write_data &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL91874_refresh_gram
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_il91874.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>drv_ILI9325_color_fill</STRONG> (Thumb, 130 bytes, Stack size 64 bytes, dev_ili9325.o(i.drv_ILI9325_color_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = drv_ILI9325_color_fill &rArr; drv_ILI9325_set_cp_addr &rArr; bus_lcd_write_data &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_w_data
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_xy2cp
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_set_cp_addr
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_ili9325.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>drv_ILI9325_fill</STRONG> (Thumb, 130 bytes, Stack size 64 bytes, dev_ili9325.o(i.drv_ILI9325_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = drv_ILI9325_fill &rArr; drv_ILI9325_set_cp_addr &rArr; bus_lcd_write_data &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_xy2cp
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_set_cp_addr
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_ili9325.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>drv_ILI9325_flush</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dev_ili9325.o(i.drv_ILI9325_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = drv_ILI9325_flush &rArr; bus_lcd_write_data &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_ili9325.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>drv_ILI9325_init</STRONG> (Thumb, 1360 bytes, Stack size 56 bytes, dev_ili9325.o(i.drv_ILI9325_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = drv_ILI9325_init &rArr; bus_lcd_write_data &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_read_data
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_rst
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_ili9325.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>drv_ILI9325_lcd_bl</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, dev_ili9325.o(i.drv_ILI9325_lcd_bl))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = drv_ILI9325_lcd_bl &rArr; bus_lcd_open &rArr; mcu_spi_open &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_bl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_ili9325.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>drv_ILI9325_prepare_display</STRONG> (Thumb, 122 bytes, Stack size 64 bytes, dev_ili9325.o(i.drv_ILI9325_prepare_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = drv_ILI9325_prepare_display &rArr; drv_ILI9325_set_cp_addr &rArr; bus_lcd_write_data &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_xy2cp
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_set_cp_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_ili9325.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>drv_ILI9325_update</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dev_ili9325.o(i.drv_ILI9325_update))
<BR>[Address Reference Count : 1]<UL><LI> dev_ili9325.o(.data)
</UL>
<P><STRONG><a name="[3ae]"></a>drv_ILI9325_xy2cp</STRONG> (Thumb, 102 bytes, Stack size 28 bytes, dev_ili9325.o(i.drv_ILI9325_xy2cp))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = drv_ILI9325_xy2cp
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_prepare_display
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_fill
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_color_fill
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_drawpoint
</UL>

<P><STRONG><a name="[2b]"></a>drv_ILI9341_8_color_fill</STRONG> (Thumb, 250 bytes, Stack size 64 bytes, dev_ili9341.o(i.drv_ILI9341_8_color_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = drv_ILI9341_8_color_fill &rArr; drv_ILI9341_8_set_cp_addr &rArr; bus_lcd_write_data &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_free_m
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_xy2cp
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_set_cp_addr
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_ili9341.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>drv_ILI9341_8_fill</STRONG> (Thumb, 194 bytes, Stack size 72 bytes, dev_ili9341.o(i.drv_ILI9341_8_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = drv_ILI9341_8_fill &rArr; drv_ILI9341_8_set_cp_addr &rArr; bus_lcd_write_data &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_free_m
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_xy2cp
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_set_cp_addr
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_ili9341.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>drv_ILI9341_8_flush</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, dev_ili9341.o(i.drv_ILI9341_8_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = drv_ILI9341_8_flush &rArr; bus_lcd_write_data &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_free_m
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_ili9341.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>drv_ILI9341_8_init</STRONG> (Thumb, 834 bytes, Stack size 56 bytes, dev_ili9341.o(i.drv_ILI9341_8_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = drv_ILI9341_8_init &rArr; bus_lcd_write_data &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_read_data
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_rst
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_ili9341.o(.data)
</UL>
<P><STRONG><a name="[2d]"></a>drv_ILI9341_8_prepare_display</STRONG> (Thumb, 122 bytes, Stack size 64 bytes, dev_ili9341.o(i.drv_ILI9341_8_prepare_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = drv_ILI9341_8_prepare_display &rArr; drv_ILI9341_8_set_cp_addr &rArr; bus_lcd_write_data &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_xy2cp
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_set_cp_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_ili9341.o(.data)
</UL>
<P><STRONG><a name="[3b2]"></a>drv_ILI9341_8_set_cp_addr</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, dev_ili9341.o(i.drv_ILI9341_8_set_cp_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = drv_ILI9341_8_set_cp_addr &rArr; bus_lcd_write_data &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_prepare_display
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_fill
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_color_fill
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_drawpoint
</UL>

<P><STRONG><a name="[30]"></a>drv_ILI9341_8_update</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dev_ili9341.o(i.drv_ILI9341_8_update))
<BR>[Address Reference Count : 1]<UL><LI> dev_ili9341.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>drv_ILI9341_color_fill</STRONG> (Thumb, 130 bytes, Stack size 64 bytes, dev_ili9341.o(i.drv_ILI9341_color_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = drv_ILI9341_color_fill &rArr; drv_ILI9341_set_cp_addr &rArr; bus_lcd_write_data &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_xy2cp
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_set_cp_addr
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_w_data
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_ili9341.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>drv_ILI9341_fill</STRONG> (Thumb, 142 bytes, Stack size 64 bytes, dev_ili9341.o(i.drv_ILI9341_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = drv_ILI9341_fill &rArr; drv_ILI9341_set_cp_addr &rArr; bus_lcd_write_data &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_xy2cp
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_set_cp_addr
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_ili9341.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>drv_ILI9341_flush</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dev_ili9341.o(i.drv_ILI9341_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = drv_ILI9341_flush &rArr; bus_lcd_write_data &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_ili9341.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>drv_ILI9341_init</STRONG> (Thumb, 894 bytes, Stack size 64 bytes, dev_ili9341.o(i.drv_ILI9341_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = drv_ILI9341_init &rArr; bus_lcd_write_data &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_read_data
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_rst
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_ili9341.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>drv_ILI9341_lcd_bl</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, dev_ili9341.o(i.drv_ILI9341_lcd_bl))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = drv_ILI9341_lcd_bl &rArr; bus_lcd_open &rArr; mcu_spi_open &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_bl
</UL>
<BR>[Address Reference Count : 2]<UL><LI> dev_ili9341.o(.data)
<LI> dev_ili9341.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>drv_ILI9341_prepare_display</STRONG> (Thumb, 122 bytes, Stack size 64 bytes, dev_ili9341.o(i.drv_ILI9341_prepare_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = drv_ILI9341_prepare_display &rArr; drv_ILI9341_set_cp_addr &rArr; bus_lcd_write_data &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_xy2cp
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_set_cp_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_ili9341.o(.data)
</UL>
<P><STRONG><a name="[3b3]"></a>drv_ILI9341_set_cp_addr</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, dev_ili9341.o(i.drv_ILI9341_set_cp_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = drv_ILI9341_set_cp_addr &rArr; bus_lcd_write_data &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_prepare_display
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_fill
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_color_fill
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_drawpoint
</UL>

<P><STRONG><a name="[28]"></a>drv_ILI9341_update</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dev_ili9341.o(i.drv_ILI9341_update))
<BR>[Address Reference Count : 1]<UL><LI> dev_ili9341.o(.data)
</UL>
<P><STRONG><a name="[3b1]"></a>drv_ILI9341_xy2cp</STRONG> (Thumb, 114 bytes, Stack size 28 bytes, dev_ili9341.o(i.drv_ILI9341_xy2cp))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = drv_ILI9341_xy2cp
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_prepare_display
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_fill
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_color_fill
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_prepare_display
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_fill
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_color_fill
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_drawpoint
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_drawpoint
</UL>

<P><STRONG><a name="[47]"></a>drv_ST7565_color_fill</STRONG> (Thumb, 164 bytes, Stack size 36 bytes, dev_str7565.o(i.drv_ST7565_color_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = drv_ST7565_color_fill
</UL>
<BR>[Address Reference Count : 2]<UL><LI> dev_str7565.o(.data)
<LI> dev_str7565.o(.data)
</UL>
<P><STRONG><a name="[48]"></a>drv_ST7565_fill</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, dev_str7565.o(i.drv_ST7565_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = drv_ST7565_fill
</UL>
<BR>[Address Reference Count : 2]<UL><LI> dev_str7565.o(.data)
<LI> dev_str7565.o(.data)
</UL>
<P><STRONG><a name="[4a]"></a>drv_ST7565_flush</STRONG> (Thumb, 222 bytes, Stack size 36 bytes, dev_str7565.o(i.drv_ST7565_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = drv_ST7565_flush
</UL>
<BR>[Address Reference Count : 2]<UL><LI> dev_str7565.o(.data)
<LI> dev_str7565.o(.data)
</UL>
<P><STRONG><a name="[45]"></a>drv_ST7565_init</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, dev_str7565.o(i.drv_ST7565_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = drv_ST7565_init &rArr; bus_lcd_write_cmd &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_rst
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_str7565.o(.data)
</UL>
<P><STRONG><a name="[4d]"></a>drv_ST7565_lcd_bl</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, dev_str7565.o(i.drv_ST7565_lcd_bl))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = drv_ST7565_lcd_bl &rArr; bus_lcd_open &rArr; mcu_spi_open &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_bl
</UL>
<BR>[Address Reference Count : 2]<UL><LI> dev_str7565.o(.data)
<LI> dev_str7565.o(.data)
</UL>
<P><STRONG><a name="[49]"></a>drv_ST7565_prepare_display</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dev_str7565.o(i.drv_ST7565_prepare_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = drv_ST7565_prepare_display
</UL>
<BR>[Address Reference Count : 2]<UL><LI> dev_str7565.o(.data)
<LI> dev_str7565.o(.data)
</UL>
<P><STRONG><a name="[4e]"></a>drv_ST7565_update</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dev_str7565.o(i.drv_ST7565_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = drv_ST7565_update &rArr; drv_ST7565_refresh_gram &rArr; bus_lcd_write_data &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_refresh_gram
</UL>
<BR>[Address Reference Count : 2]<UL><LI> dev_str7565.o(.data)
<LI> dev_str7565.o(.data)
</UL>
<P><STRONG><a name="[33]"></a>drv_ST7735R_color_fill</STRONG> (Thumb, 250 bytes, Stack size 64 bytes, dev_st7735r.o(i.drv_ST7735R_color_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = drv_ST7735R_color_fill &rArr; drv_ST7735R_set_cp_addr &rArr; bus_lcd_write_data &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_free_m
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_xy2cp
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_set_cp_addr
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_st7735r.o(.data)
</UL>
<P><STRONG><a name="[34]"></a>drv_ST7735R_fill</STRONG> (Thumb, 194 bytes, Stack size 72 bytes, dev_st7735r.o(i.drv_ST7735R_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = drv_ST7735R_fill &rArr; drv_ST7735R_set_cp_addr &rArr; bus_lcd_write_data &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_free_m
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_xy2cp
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_set_cp_addr
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_st7735r.o(.data)
</UL>
<P><STRONG><a name="[36]"></a>drv_ST7735R_flush</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, dev_st7735r.o(i.drv_ST7735R_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = drv_ST7735R_flush &rArr; bus_lcd_write_data &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_free_m
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_st7735r.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>drv_ST7735R_init</STRONG> (Thumb, 776 bytes, Stack size 56 bytes, dev_st7735r.o(i.drv_ST7735R_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = drv_ST7735R_init &rArr; bus_lcd_write_data &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_rst
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_st7735r.o(.data)
</UL>
<P><STRONG><a name="[39]"></a>drv_ST7735R_lcd_bl</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, dev_st7735r.o(i.drv_ST7735R_lcd_bl))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = drv_ST7735R_lcd_bl &rArr; bus_lcd_open &rArr; mcu_spi_open &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_bl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_st7735r.o(.data)
</UL>
<P><STRONG><a name="[35]"></a>drv_ST7735R_prepare_display</STRONG> (Thumb, 122 bytes, Stack size 64 bytes, dev_st7735r.o(i.drv_ST7735R_prepare_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = drv_ST7735R_prepare_display &rArr; drv_ST7735R_set_cp_addr &rArr; bus_lcd_write_data &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_xy2cp
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_set_cp_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_st7735r.o(.data)
</UL>
<P><STRONG><a name="[3b6]"></a>drv_ST7735R_set_cp_addr</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, dev_st7735r.o(i.drv_ST7735R_set_cp_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = drv_ST7735R_set_cp_addr &rArr; bus_lcd_write_data &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_prepare_display
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_fill
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_color_fill
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_drawpoint
</UL>

<P><STRONG><a name="[3a]"></a>drv_ST7735R_update</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dev_st7735r.o(i.drv_ST7735R_update))
<BR>[Address Reference Count : 1]<UL><LI> dev_st7735r.o(.data)
</UL>
<P><STRONG><a name="[3b5]"></a>drv_ST7735R_xy2cp</STRONG> (Thumb, 114 bytes, Stack size 28 bytes, dev_st7735r.o(i.drv_ST7735R_xy2cp))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = drv_ST7735R_xy2cp
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_prepare_display
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_fill
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_color_fill
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_drawpoint
</UL>

<P><STRONG><a name="[3d]"></a>drv_ST7789_color_fill</STRONG> (Thumb, 250 bytes, Stack size 64 bytes, dev_st7789.o(i.drv_ST7789_color_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = drv_ST7789_color_fill &rArr; drv_ST7789_set_cp_addr &rArr; bus_lcd_write_data &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_free_m
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_xy2cp
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_set_cp_addr
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_st7789.o(.data)
</UL>
<P><STRONG><a name="[3e]"></a>drv_ST7789_fill</STRONG> (Thumb, 194 bytes, Stack size 72 bytes, dev_st7789.o(i.drv_ST7789_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = drv_ST7789_fill &rArr; drv_ST7789_set_cp_addr &rArr; bus_lcd_write_data &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_free_m
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_xy2cp
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_set_cp_addr
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_st7789.o(.data)
</UL>
<P><STRONG><a name="[40]"></a>drv_ST7789_flush</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, dev_st7789.o(i.drv_ST7789_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = drv_ST7789_flush &rArr; bus_lcd_write_data &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_free_m
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_st7789.o(.data)
</UL>
<P><STRONG><a name="[3b]"></a>drv_ST7789_init</STRONG> (Thumb, 586 bytes, Stack size 56 bytes, dev_st7789.o(i.drv_ST7789_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = drv_ST7789_init &rArr; bus_lcd_write_data &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_rst
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_st7789.o(.data)
</UL>
<P><STRONG><a name="[43]"></a>drv_ST7789_lcd_bl</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, dev_st7789.o(i.drv_ST7789_lcd_bl))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = drv_ST7789_lcd_bl &rArr; bus_lcd_open &rArr; mcu_spi_open &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_bl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_st7789.o(.data)
</UL>
<P><STRONG><a name="[3f]"></a>drv_ST7789_prepare_display</STRONG> (Thumb, 122 bytes, Stack size 64 bytes, dev_st7789.o(i.drv_ST7789_prepare_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = drv_ST7789_prepare_display &rArr; drv_ST7789_set_cp_addr &rArr; bus_lcd_write_data &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_xy2cp
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_set_cp_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_st7789.o(.data)
</UL>
<P><STRONG><a name="[3b8]"></a>drv_ST7789_set_cp_addr</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, dev_st7789.o(i.drv_ST7789_set_cp_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = drv_ST7789_set_cp_addr &rArr; bus_lcd_write_data &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_prepare_display
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_fill
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_color_fill
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_drawpoint
</UL>

<P><STRONG><a name="[44]"></a>drv_ST7789_update</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dev_st7789.o(i.drv_ST7789_update))
<BR>[Address Reference Count : 1]<UL><LI> dev_st7789.o(.data)
</UL>
<P><STRONG><a name="[3b7]"></a>drv_ST7789_xy2cp</STRONG> (Thumb, 114 bytes, Stack size 28 bytes, dev_st7789.o(i.drv_ST7789_xy2cp))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = drv_ST7789_xy2cp
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_prepare_display
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_fill
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_color_fill
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_drawpoint
</UL>

<P><STRONG><a name="[197]"></a>drv_il3820_write_cmd</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dev_il3820.o(i.drv_il3820_write_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = drv_il3820_write_cmd &rArr; bus_lcd_write_cmd &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_spi_cs
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_refresh_gram
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_select_LUT
</UL>

<P><STRONG><a name="[198]"></a>drv_il3820_write_data</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, dev_il3820.o(i.drv_il3820_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = drv_il3820_write_data &rArr; bus_lcd_write_data &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_spi_cs
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_refresh_gram
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_select_LUT
</UL>

<P><STRONG><a name="[3ab]"></a>drv_il91874_write_cmd</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dev_il91874.o(i.drv_il91874_write_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = drv_il91874_write_cmd &rArr; bus_lcd_write_cmd &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_spi_cs
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_refresh_gram
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL91874_init
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL91874_refresh_gram
</UL>

<P><STRONG><a name="[3ac]"></a>drv_il91874_write_data</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, dev_il91874.o(i.drv_il91874_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = drv_il91874_write_data &rArr; bus_lcd_write_data &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_spi_cs
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_refresh_gram
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL91874_init
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL91874_refresh_gram
</UL>

<P><STRONG><a name="[50]"></a>drv_ssd1615_display_onoff</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, dev_str7565.o(i.drv_ssd1615_display_onoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = drv_ssd1615_display_onoff &rArr; bus_lcd_write_cmd &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_str7565.o(.data)
</UL>
<P><STRONG><a name="[4f]"></a>drv_ssd1615_init</STRONG> (Thumb, 324 bytes, Stack size 16 bytes, dev_str7565.o(i.drv_ssd1615_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = drv_ssd1615_init &rArr; bus_lcd_write_cmd &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_rst
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_str7565.o(.data)
</UL>
<P><STRONG><a name="[3b9]"></a>emenu_deal_key_2col</STRONG> (Thumb, 364 bytes, Stack size 32 bytes, emenu.o(i.emenu_deal_key_2col))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = emenu_deal_key_2col &rArr; emunu_find_next &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emunu_find_next
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emenu_find_fa
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emenu_run
</UL>

<P><STRONG><a name="[3bc]"></a>emenu_deal_key_list</STRONG> (Thumb, 342 bytes, Stack size 24 bytes, emenu.o(i.emenu_deal_key_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = emenu_deal_key_list &rArr; emunu_find_next &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emunu_find_next
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emenu_find_fa
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emenu_run
</UL>

<P><STRONG><a name="[3bd]"></a>emenu_display</STRONG> (Thumb, 564 bytes, Stack size 80 bytes, emenu.o(i.emenu_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 708<LI>Call Chain = emenu_display &rArr; dev_lcd_put_string &rArr; font_get_hz &rArr; font_hzfont_init &rArr; vfs_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_update
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_color_fill
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emenu_run
</UL>

<P><STRONG><a name="[3bb]"></a>emenu_find_fa</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, emenu.o(i.emenu_find_fa))
<BR><BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emenu_deal_key_list
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emenu_deal_key_2col
</UL>

<P><STRONG><a name="[3bf]"></a>emenu_get_key</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, emenu.o(i.emenu_get_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = emenu_get_key &rArr; dev_keypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_keypad_read
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emenu_run
</UL>

<P><STRONG><a name="[3c1]"></a>emenu_run</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, emenu.o(i.emenu_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 708<LI>Call Chain = emenu_run &rArr; emenu_display &rArr; dev_lcd_put_string &rArr; font_get_hz &rArr; font_hzfont_init &rArr; vfs_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_get_hw
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emenu_get_key
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emenu_display
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emenu_deal_key_list
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emenu_deal_key_2col
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wujique_stm407_test
</UL>

<P><STRONG><a name="[3ba]"></a>emunu_find_next</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, emenu.o(i.emunu_find_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = emunu_find_next &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emenu_deal_key_list
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emenu_deal_key_2col
</UL>

<P><STRONG><a name="[2ba]"></a>eth_loop_task</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, eth_app.o(i.eth_loop_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = eth_loop_task &rArr; LwIP_Periodic_Handle &rArr; LwIP_DHCP_Process_Handle &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stime_get_localtime
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_CheckFrameReceived
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Pkt_Handle
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Periodic_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_low_task
</UL>

<P><STRONG><a name="[3c4]"></a>etharp_cleanup_netif</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, etharp.o(i.etharp_cleanup_netif))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = etharp_cleanup_netif &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
</UL>

<P><STRONG><a name="[36e]"></a>etharp_query</STRONG> (Thumb, 248 bytes, Stack size 56 bytes, etharp.o(i.etharp_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
</UL>

<P><STRONG><a name="[3c8]"></a>etharp_request</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, etharp.o(i.etharp_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[1ba]"></a>etharp_tmr</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, etharp.o(i.etharp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = etharp_tmr &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Periodic_Handle
</UL>

<P><STRONG><a name="[1be]"></a>ethernetif_input</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ethernetif.o(i.ethernetif_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = ethernetif_input &rArr; low_level_input &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Pkt_Handle
</UL>

<P><STRONG><a name="[191]"></a>f_close</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_close
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demo_Application
</UL>

<P><STRONG><a name="[3d1]"></a>f_lseek</STRONG> (Thumb, 348 bytes, Stack size 32 bytes, ff.o(i.f_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_lseek
</UL>

<P><STRONG><a name="[18a]"></a>f_mount</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mount
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demo_Application
</UL>

<P><STRONG><a name="[18f]"></a>f_open</STRONG> (Thumb, 368 bytes, Stack size 96 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_open
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demo_Application
</UL>

<P><STRONG><a name="[19f]"></a>f_opendir</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, ff.o(i.f_opendir))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explore_Disk
</UL>

<P><STRONG><a name="[3db]"></a>f_read</STRONG> (Thumb, 358 bytes, Stack size 40 bytes, ff.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_read
</UL>

<P><STRONG><a name="[1a0]"></a>f_readdir</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, ff.o(i.f_readdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = f_readdir &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explore_Disk
</UL>

<P><STRONG><a name="[3cf]"></a>f_sync</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[190]"></a>f_write</STRONG> (Thumb, 422 bytes, Stack size 40 bytes, ff.o(i.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demo_Application
</UL>

<P><STRONG><a name="[2fb]"></a>ff_convert</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, cc936.o(i.ff_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[3d4]"></a>ff_memalloc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, syscall.o(i.ff_memalloc))
<BR><BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[3da]"></a>ff_memfree</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, syscall.o(i.ff_memfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ff_memfree &rArr; wjq_free_m &rArr; wjq_free_t
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_free_m
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[2f6]"></a>ff_wtoupper</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, cc936.o(i.ff_wtoupper))
<BR><BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>

<P><STRONG><a name="[3de]"></a>font_find_index</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, font.o(i.font_find_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = font_find_index &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_get_hw
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_get_hz
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_get_asc
</UL>

<P><STRONG><a name="[327]"></a>font_get_asc</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, font.o(i.font_get_asc))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = font_get_asc &rArr; font_hzfont_init &rArr; vfs_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_hzfont_init
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_find_index
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
</UL>

<P><STRONG><a name="[326]"></a>font_get_hw</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, font.o(i.font_get_hw))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = font_get_hw &rArr; font_hzfont_init &rArr; vfs_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_hzfont_init
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_find_index
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emenu_run
</UL>

<P><STRONG><a name="[328]"></a>font_get_hz</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, font.o(i.font_get_hz))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = font_get_hz &rArr; font_hzfont_init &rArr; vfs_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_read
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_lseek
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_hzfont_init
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_find_index
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
</UL>

<P><STRONG><a name="[2d0]"></a>font_hzfont_init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, font.o(i.font_hzfont_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = font_hzfont_init &rArr; vfs_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_open
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_get_hw
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_main_init
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_get_hz
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_get_asc
</UL>

<P><STRONG><a name="[3e0]"></a>frexp</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, frexp.o(i.frexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = frexp &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log2
</UL>

<P><STRONG><a name="[432]"></a>fun_rec_set_free_buf</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, soundplay.o(i.fun_rec_set_free_buf))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2sext_dma_process
</UL>

<P><STRONG><a name="[3e1]"></a>fun_rec_stop</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, soundplay.o(i.fun_rec_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = fun_rec_stop &rArr; vfs_lseek &rArr; f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_free_m
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_write
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_lseek
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_close
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2sext_dma_stop
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_rec
</UL>

<P><STRONG><a name="[2bc]"></a>fun_rec_task</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, soundplay.o(i.fun_rec_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fun_rec_task &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_rec_get_buff_index
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_low_task
</UL>

<P><STRONG><a name="[4c3]"></a>fun_sound_get_sta</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, soundplay.o(i.fun_sound_get_sta))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_rec
</UL>

<P><STRONG><a name="[3e5]"></a>fun_sound_play</STRONG> (Thumb, 610 bytes, Stack size 32 bytes, soundplay.o(i.fun_sound_play))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = fun_sound_play &rArr; vfs_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_deal_1ch_data
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_free_m
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_read
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_open
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_dma_init
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_transfer
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_open
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_inout
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_dataformat
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_dacsound_transfer
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_dacsound_setbuf
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_dacsound_open
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_dacsound_dataformat
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_wm8978
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_rec
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_dac
</UL>

<P><STRONG><a name="[3eb]"></a>fun_sound_rec</STRONG> (Thumb, 320 bytes, Stack size 32 bytes, soundplay.o(i.fun_sound_rec))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = fun_sound_rec &rArr; vfs_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_free_m
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_write
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_open
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2sext_dma_start
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2sext_dma_init
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_dma_init
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_transfer
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_open
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_inout
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_dataformat
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_rec
</UL>

<P><STRONG><a name="[31e]"></a>fun_sound_set_free_buf</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, soundplay.o(i.fun_sound_set_free_buf))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_dacsound_timerinit
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2s_dma_process
</UL>

<P><STRONG><a name="[3ee]"></a>fun_sound_stop</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, soundplay.o(i.fun_sound_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = fun_sound_stop &rArr; vfs_close &rArr; f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_free_m
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_close
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_transfer
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_dacsound_transfer
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_dacsound_close
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_task
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_wm8978
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_dac
</UL>

<P><STRONG><a name="[2bb]"></a>fun_sound_task</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, soundplay.o(i.fun_sound_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = fun_sound_task &rArr; vfs_read &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_get_buff_index
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_deal_1ch_data
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_read
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_low_task
</UL>

<P><STRONG><a name="[2f8]"></a>get_fat</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[3d6]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbh_msc_fatfs.o(i.get_fattime))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[3f1]"></a>getxy</STRONG> (Thumb, 302 bytes, Stack size 1568 bytes, testutils.o(i.getxy))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632<LI>Call Chain = getxy &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_read_raw
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsort
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sample
</UL>

<P><STRONG><a name="[3f3]"></a>inet_chksum</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, inet_chksum.o(i.inet_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[3c7]"></a>ip4_addr_isbroadcast</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ip_addr.o(i.ip4_addr_isbroadcast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ip4_addr_isbroadcast
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[3f5]"></a>ip_frag</STRONG> (Thumb, 392 bytes, Stack size 88 bytes, ip_frag.o(i.ip_frag))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloced_custom
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_alloc_pbuf_custom_ref
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
</UL>

<P><STRONG><a name="[3fd]"></a>ip_output</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, ip.o(i.ip_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[3ff]"></a>ip_output_if</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, ip.o(i.ip_output_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>

<P><STRONG><a name="[3fe]"></a>ip_route</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ip.o(i.ip_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
</UL>

<P><STRONG><a name="[401]"></a>line</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, dev_lcd.o(i.line))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = line &rArr; dev_lcd_drawpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_drawpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_cross
</UL>

<P><STRONG><a name="[405]"></a>log</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, log.o(i.log))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log2
</UL>

<P><STRONG><a name="[406]"></a>log2</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, log2.o(i.log2))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = log2 &rArr; log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_timer
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_init
</UL>

<P><STRONG><a name="[373]"></a>lwip_htonl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, def.o(i.lwip_htonl))
<BR><BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_offer
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
</UL>

<P><STRONG><a name="[3cd]"></a>lwip_htons</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, def.o(i.lwip_htons))
<BR><BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>

<P><STRONG><a name="[388]"></a>lwip_ntohl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, def.o(i.lwip_ntohl))
<BR><BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
</UL>

<P><STRONG><a name="[3f6]"></a>lwip_ntohs</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, def.o(i.lwip_ntohs))
<BR><BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[ec]"></a>main</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = main &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_mcu_preinit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[12c]"></a>mcu_adc_IRQhandler</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, mcu_adc.o(i.mcu_adc_IRQhandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mcu_adc_IRQhandler &rArr; ADC_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetITStatus
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearITPendingBit
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[2cb]"></a>mcu_adc_temprate_init</STRONG> (Thumb, 142 bytes, Stack size 64 bytes, mcu_adc.o(i.mcu_adc_temprate_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mcu_adc_temprate_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TempSensorVrefintCmd
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonInit
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_main_init
</UL>

<P><STRONG><a name="[144]"></a>mcu_can1_rx0_IRQ</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mcu_can.o(i.mcu_can1_rx0_IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mcu_can1_rx0_IRQ &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[31b]"></a>mcu_dac_open</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, mcu_dac.o(i.mcu_dac_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mcu_dac_open &rArr; DAC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetChannel2Data
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Cmd
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_dacsound_open
</UL>

<P><STRONG><a name="[31f]"></a>mcu_dac_output</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mcu_dac.o(i.mcu_dac_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mcu_dac_output &rArr; DAC_SetChannel2Data
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetChannel2Data
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_dacsound_timerinit
</UL>

<P><STRONG><a name="[184]"></a>mcu_dcmi_dma_process</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, mcu_dcmi.o(i.mcu_dcmi_dma_process))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream1_IRQHandler
</UL>

<P><STRONG><a name="[179]"></a>mcu_dcmi_frame_process</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mcu_dcmi.o(i.mcu_dcmi_frame_process))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_IRQHandler
</UL>

<P><STRONG><a name="[316]"></a>mcu_dcmi_get_sta</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mcu_dcmi.o(i.mcu_dcmi_get_sta))
<BR><BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_camera_show
</UL>

<P><STRONG><a name="[333]"></a>mcu_fsmc_lcd_Init</STRONG> (Thumb, 382 bytes, Stack size 136 bytes, stm324xg_eval_fsmc_sram.o(i.mcu_fsmc_lcd_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mcu_fsmc_lcd_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB3PeriphClockCmd
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMInit
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcdbus_register
</UL>

<P><STRONG><a name="[427]"></a>mcu_hi2c_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mcu_i2c.o(i.mcu_hi2c_init))
<BR><BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2c_register
</UL>

<P><STRONG><a name="[428]"></a>mcu_hi2c_transfer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mcu_i2c.o(i.mcu_hi2c_transfer))
<BR><BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2c_transfer
</UL>

<P><STRONG><a name="[41c]"></a>mcu_hspi_close</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, mcu_spi.o(i.mcu_hspi_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mcu_hspi_close &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_spi_close
</UL>

<P><STRONG><a name="[41e]"></a>mcu_hspi_init</STRONG> (Thumb, 208 bytes, Stack size 48 bytes, mcu_spi.o(i.mcu_hspi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = mcu_hspi_init &rArr; log2 &rArr; log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log2
</UL>
<BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_spi_register
</UL>

<P><STRONG><a name="[41f]"></a>mcu_hspi_open</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, mcu_spi.o(i.mcu_hspi_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mcu_hspi_open &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_spi_open
</UL>

<P><STRONG><a name="[421]"></a>mcu_hspi_transfer</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, mcu_spi.o(i.mcu_hspi_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mcu_hspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_spi_transfer
</UL>

<P><STRONG><a name="[2e1]"></a>mcu_i2c_close</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bus_i2c.o(i.mcu_i2c_close))
<BR><BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_tea5767_writereg
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_writereg
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_htu21d_init
</UL>

<P><STRONG><a name="[2e5]"></a>mcu_i2c_open</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, bus_i2c.o(i.mcu_i2c_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mcu_i2c_open &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_tea5767_writereg
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_writereg
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_htu21d_init
</UL>

<P><STRONG><a name="[425]"></a>mcu_i2c_register</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, bus_i2c.o(i.mcu_i2c_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mcu_i2c_register &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_init
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hi2c_init
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dev_register
</UL>

<P><STRONG><a name="[2ea]"></a>mcu_i2c_transfer</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, bus_i2c.o(i.mcu_i2c_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mcu_i2c_transfer &rArr; mcu_vi2c_transfer &rArr; mcu_vi2c_wait_ack &rArr; mcu_vi2c_stop &rArr; mcu_vi2c_sda_output &rArr; mcu_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_transfer
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hi2c_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_tea5767_writereg
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_writereg
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_htu21d_init
</UL>

<P><STRONG><a name="[358]"></a>mcu_i2s_config</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, mcu_i2s.o(i.mcu_i2s_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mcu_i2s_config &rArr; I2S_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLI2SCmd
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_I2SCLKConfig
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Cmd
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_dataformat
</UL>

<P><STRONG><a name="[3e8]"></a>mcu_i2s_dma_init</STRONG> (Thumb, 176 bytes, Stack size 88 bytes, mcu_i2s.o(i.mcu_i2s_dma_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = mcu_i2s_dma_init &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DMACmd
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DoubleBufferModeConfig
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DoubleBufferModeCmd
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_rec
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_play
</UL>

<P><STRONG><a name="[181]"></a>mcu_i2s_dma_process</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mcu_i2s.o(i.mcu_i2s_dma_process))
<BR><BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_set_free_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream4_IRQHandler
</UL>

<P><STRONG><a name="[365]"></a>mcu_i2s_dma_start</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mcu_i2s.o(i.mcu_i2s_dma_start))
<BR><BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_transfer
</UL>

<P><STRONG><a name="[364]"></a>mcu_i2s_dma_stop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mcu_i2s.o(i.mcu_i2s_dma_stop))
<BR><BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_transfer
</UL>

<P><STRONG><a name="[35a]"></a>mcu_i2s_init</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, mcu_i2s.o(i.mcu_i2s_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mcu_i2s_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_init
</UL>

<P><STRONG><a name="[359]"></a>mcu_i2sext_config</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, mcu_i2s.o(i.mcu_i2sext_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mcu_i2sext_config &rArr; I2S_FullDuplexConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_FullDuplexConfig
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_dataformat
</UL>

<P><STRONG><a name="[3ec]"></a>mcu_i2sext_dma_init</STRONG> (Thumb, 186 bytes, Stack size 88 bytes, mcu_i2s.o(i.mcu_i2sext_dma_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = mcu_i2sext_dma_init &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DMACmd
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCmdStatus
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DoubleBufferModeConfig
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DoubleBufferModeCmd
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_rec
</UL>

<P><STRONG><a name="[180]"></a>mcu_i2sext_dma_process</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mcu_i2s.o(i.mcu_i2sext_dma_process))
<BR><BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_rec_set_free_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream3_IRQHandler
</UL>

<P><STRONG><a name="[3ed]"></a>mcu_i2sext_dma_start</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mcu_i2s.o(i.mcu_i2sext_dma_start))
<BR><BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_rec
</UL>

<P><STRONG><a name="[3e2]"></a>mcu_i2sext_dma_stop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mcu_i2s.o(i.mcu_i2sext_dma_stop))
<BR><BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_rec_stop
</UL>

<P><STRONG><a name="[31a]"></a>mcu_io_config_dac</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, mcu_io.o(i.mcu_io_config_dac))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mcu_io_config_dac &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_dacsound_open
</UL>

<P><STRONG><a name="[321]"></a>mcu_io_config_in</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mcu_io.o(i.mcu_io_config_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mcu_io_config_in &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_keypad_init
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_key_init
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL91874_init
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_init
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vspi_init
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_sda_input
</UL>

<P><STRONG><a name="[2db]"></a>mcu_io_config_out</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, mcu_io.o(i.mcu_io_config_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mcu_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_keypad_init
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_dacsound_init
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_buzzer_close
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_touchkey_resetpad
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vspi_init
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_spich_register
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_IO_init
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_init
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_sda_output
</UL>

<P><STRONG><a name="[308]"></a>mcu_io_config_timer</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, mcu_io.o(i.mcu_io_config_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = mcu_io_config_timer &rArr; log2 &rArr; log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log2
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_buzzer_open
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_buzzer_init
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_touchkey_iocap
</UL>

<P><STRONG><a name="[2d7]"></a>mcu_io_init</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, mcu_io.o(i.mcu_io_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mcu_io_init
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_mcu_preinit
</UL>

<P><STRONG><a name="[322]"></a>mcu_io_input_readbit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mcu_io.o(i.mcu_io_input_readbit))
<BR><BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_keypad_scan
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_key_scan
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_refresh_gram
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL91874_init
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL91874_refresh_gram
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_init
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vspi_transfer
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_readsda
</UL>

<P><STRONG><a name="[2de]"></a>mcu_io_output_resetbit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mcu_io.o(i.mcu_io_output_resetbit))
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_spi_open
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_spi_cs
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_keypad_scan
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_dacsound_init
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_buzzer_close
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_rst
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_bl
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vspi_transfer
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_sda
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_scl
</UL>

<P><STRONG><a name="[2dc]"></a>mcu_io_output_setbit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mcu_io.o(i.mcu_io_output_setbit))
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_spi_cs
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_spi_close
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_keypad_scan
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_keypad_init
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_touchkey_resetpad
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_rst
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_bl
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vspi_transfer
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vspi_init
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_spich_register
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_IO_init
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_init
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_sda
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_scl
</UL>

<P><STRONG><a name="[2d4]"></a>mcu_rtc_init</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, mcu_rtc.o(i.mcu_rtc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mcu_rtc_init &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteBackupRegister
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadBackupRegister
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSEConfig
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_mcu_init
</UL>

<P><STRONG><a name="[2e0]"></a>mcu_spi_close</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bus_spi.o(i.mcu_spi_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mcu_spi_close &rArr; mcu_hspi_close &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_setbit
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vspi_close
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_close
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_close
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_register
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_xpt2046_task
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>

<P><STRONG><a name="[33b]"></a>mcu_spi_cs</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bus_spi.o(i.mcu_spi_cs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mcu_spi_cs
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_setbit
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_resetbit
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_write
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_read
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_erase
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_writeen
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_waitwriteend
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_readMTD
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_readJTD
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_il91874_write_data
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_il91874_write_cmd
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_il3820_write_data
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_il3820_write_cmd
</UL>

<P><STRONG><a name="[2e4]"></a>mcu_spi_open</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, bus_spi.o(i.mcu_spi_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mcu_spi_open &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_resetbit
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vspi_open
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_open
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_open
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_register
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_xpt2046_task
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
</UL>

<P><STRONG><a name="[43b]"></a>mcu_spi_register</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, bus_spi.o(i.mcu_spi_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = mcu_spi_register &rArr; mcu_hspi_init &rArr; log2 &rArr; log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vspi_init
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_init
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dev_register
</UL>

<P><STRONG><a name="[2e7]"></a>mcu_spi_transfer</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, bus_spi.o(i.mcu_spi_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vspi_transfer
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_write
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_read
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_erase
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_writeen
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_waitwriteend
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_readMTD
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_readJTD
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_xpt2046_task
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_read_data
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
</UL>

<P><STRONG><a name="[43e]"></a>mcu_spich_register</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, bus_spi.o(i.mcu_spich_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mcu_spich_register &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_setbit
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_out
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dev_register
</UL>

<P><STRONG><a name="[228]"></a>mcu_tim3_IRQhandler</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, mcu_timer.o(i.mcu_tim3_IRQhandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mcu_tim3_IRQhandler
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[229]"></a>mcu_tim5_IRQhandler</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, mcu_timer.o(i.mcu_tim5_IRQhandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mcu_tim5_IRQhandler
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
</UL>

<P><STRONG><a name="[22a]"></a>mcu_tim7_IRQhandler</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, mcu_timer.o(i.mcu_tim7_IRQhandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mcu_tim7_IRQhandler
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
</UL>

<P><STRONG><a name="[34e]"></a>mcu_timer_cap_init</STRONG> (Thumb, 244 bytes, Stack size 56 bytes, mcu_timer.o(i.mcu_timer_cap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = mcu_timer_cap_init &rArr; TIM_ICInit &rArr; TI3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_touchkey_task
</UL>

<P><STRONG><a name="[31d]"></a>mcu_timer_config</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, mcu_timer.o(i.mcu_timer_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mcu_timer_config &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_dacsound_open
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_xpt2046_open
</UL>

<P><STRONG><a name="[34f]"></a>mcu_timer_get_cap</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, mcu_timer.o(i.mcu_timer_get_cap))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mcu_timer_get_cap
</UL>
<BR>[Calls]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetFlagStatus
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture4
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture3
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture2
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture1
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_touchkey_task
</UL>

<P><STRONG><a name="[31c]"></a>mcu_timer_init</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, mcu_timer.o(i.mcu_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mcu_timer_init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_dacsound_open
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_xpt2046_init
</UL>

<P><STRONG><a name="[309]"></a>mcu_timer_pwm_init</STRONG> (Thumb, 292 bytes, Stack size 56 bytes, mcu_timer.o(i.mcu_timer_pwm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mcu_timer_pwm_init &rArr; TIM_OC4Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare4
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare3
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_buzzer_init
</UL>

<P><STRONG><a name="[30b]"></a>mcu_timer_start</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mcu_timer.o(i.mcu_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mcu_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_buzzer_open
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_dacsound_transfer
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_xpt2046_open
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_touchkey_task
</UL>

<P><STRONG><a name="[307]"></a>mcu_timer_stop</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mcu_timer.o(i.mcu_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mcu_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_buzzer_close
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_dacsound_transfer
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_xpt2046_close
</UL>

<P><STRONG><a name="[234]"></a>mcu_uart1_IRQhandler</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, mcu_uart.o(i.mcu_uart1_IRQhandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mcu_uart1_IRQhandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[235]"></a>mcu_uart2_IRQhandler</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, mcu_uart.o(i.mcu_uart2_IRQhandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mcu_uart2_IRQhandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[236]"></a>mcu_uart3_IRQhandler</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, mcu_uart.o(i.mcu_uart3_IRQhandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mcu_uart3_IRQhandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[2d8]"></a>mcu_uart_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mcu_uart.o(i.mcu_uart_init))
<BR><BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_mcu_preinit
</UL>

<P><STRONG><a name="[2d9]"></a>mcu_uart_open</STRONG> (Thumb, 698 bytes, Stack size 64 bytes, mcu_uart.o(i.mcu_uart_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mcu_uart_open &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_mcu_preinit
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_rs485_open
</UL>

<P><STRONG><a name="[303]"></a>mcu_uart_read</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, mcu_uart.o(i.mcu_uart_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mcu_uart_read
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_rs485_read
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_8266_read
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_uart
</UL>

<P><STRONG><a name="[335]"></a>mcu_uart_set_baud</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, mcu_uart.o(i.mcu_uart_set_baud))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mcu_uart_set_baud &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_tcflush
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_rs485_open
</UL>

<P><STRONG><a name="[459]"></a>mcu_uart_tcflush</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, mcu_uart.o(i.mcu_uart_tcflush))
<BR><BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_set_baud
</UL>

<P><STRONG><a name="[305]"></a>mcu_uart_write</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, mcu_uart.o(i.mcu_uart_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_rs485_write
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_8266_write
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_uart
</UL>

<P><STRONG><a name="[426]"></a>mcu_vi2c_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bus_vi2c.o(i.mcu_vi2c_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mcu_vi2c_init &rArr; mcu_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_setbit
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_out
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2c_register
</UL>

<P><STRONG><a name="[462]"></a>mcu_vi2c_sda_input</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bus_vi2c.o(i.mcu_vi2c_sda_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mcu_vi2c_sda_input &rArr; mcu_io_config_in &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_in
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_wait_ack
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_readbyte
</UL>

<P><STRONG><a name="[45e]"></a>mcu_vi2c_sda_output</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bus_vi2c.o(i.mcu_vi2c_sda_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mcu_vi2c_sda_output &rArr; mcu_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_out
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_writebyte
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_stop
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_start
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_ack
</UL>

<P><STRONG><a name="[429]"></a>mcu_vi2c_transfer</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, bus_vi2c.o(i.mcu_vi2c_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mcu_vi2c_transfer &rArr; mcu_vi2c_wait_ack &rArr; mcu_vi2c_stop &rArr; mcu_vi2c_sda_output &rArr; mcu_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_writebyte
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_wait_ack
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_stop
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_start
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_readbyte
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2c_transfer
</UL>

<P><STRONG><a name="[439]"></a>mcu_vspi_close</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bus_vspi.o(i.mcu_vspi_close))
<BR><BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_spi_close
</UL>

<P><STRONG><a name="[43c]"></a>mcu_vspi_init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, bus_vspi.o(i.mcu_vspi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mcu_vspi_init &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_setbit
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_in
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_out
</UL>
<BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_spi_register
</UL>

<P><STRONG><a name="[43a]"></a>mcu_vspi_open</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bus_vspi.o(i.mcu_vspi_open))
<BR><BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_spi_open
</UL>

<P><STRONG><a name="[43d]"></a>mcu_vspi_transfer</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, bus_vspi.o(i.mcu_vspi_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_setbit
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_input_readbit
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_resetbit
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_spi_transfer
</UL>

<P><STRONG><a name="[468]"></a>mem_free</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, mem.o(i.mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>

<P><STRONG><a name="[392]"></a>mem_malloc</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, mem.o(i.mem_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[46f]"></a>mem_trim</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, mem.o(i.mem_trim))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mem_trim
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>

<P><STRONG><a name="[3fc]"></a>memp_free</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, memp.o(i.memp_free))
<BR><BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
</UL>

<P><STRONG><a name="[3fb]"></a>memp_malloc</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, memp.o(i.memp_malloc))
<BR><BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_alloc_pbuf_custom_ref
</UL>

<P><STRONG><a name="[1b7]"></a>netif_set_addr</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, netif.o(i.netif_set_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_DHCP_Process_Handle
</UL>

<P><STRONG><a name="[380]"></a>netif_set_down</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, netif.o(i.netif_set_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = netif_set_down &rArr; etharp_cleanup_netif &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_cleanup_netif
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
</UL>

<P><STRONG><a name="[36a]"></a>netif_set_gw</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, netif.o(i.netif_set_gw))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[368]"></a>netif_set_ipaddr</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, netif.o(i.netif_set_ipaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[19e]"></a>netif_set_link_down</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, netif.o(i.netif_set_link_down))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eth_Link_ITHandler
</UL>

<P><STRONG><a name="[19d]"></a>netif_set_link_up</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, netif.o(i.netif_set_link_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = netif_set_link_up &rArr; dhcp_network_changed &rArr; dhcp_reboot &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eth_Link_ITHandler
</UL>

<P><STRONG><a name="[369]"></a>netif_set_netmask</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, netif.o(i.netif_set_netmask))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[36b]"></a>netif_set_up</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, netif.o(i.netif_set_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = netif_set_up &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[372]"></a>pbuf_alloc</STRONG> (Thumb, 302 bytes, Stack size 32 bytes, pbuf.o(i.pbuf_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>

<P><STRONG><a name="[3f8]"></a>pbuf_alloced_custom</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_alloced_custom))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pbuf_alloced_custom
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[3f9]"></a>pbuf_cat</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, pbuf.o(i.pbuf_cat))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pbuf_cat
</UL>
<BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[46e]"></a>pbuf_chain</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pbuf.o(i.pbuf_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pbuf_chain &rArr; pbuf_cat
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>

<P><STRONG><a name="[4ad]"></a>pbuf_clen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pbuf.o(i.pbuf_clen))
<BR><BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>

<P><STRONG><a name="[3ca]"></a>pbuf_copy</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, pbuf.o(i.pbuf_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pbuf_copy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[387]"></a>pbuf_copy_partial</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, pbuf.o(i.pbuf_copy_partial))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pbuf_copy_partial &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
</UL>

<P><STRONG><a name="[377]"></a>pbuf_free</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>

<P><STRONG><a name="[400]"></a>pbuf_header</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, pbuf.o(i.pbuf_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>

<P><STRONG><a name="[37b]"></a>pbuf_realloc</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pbuf_realloc &rArr; mem_trim
</UL>
<BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>

<P><STRONG><a name="[3cb]"></a>pbuf_ref</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pbuf.o(i.pbuf_ref))
<BR><BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[470]"></a>perform_calibration</STRONG> (Thumb, 674 bytes, Stack size 56 bytes, ts_calibrate.o(i.perform_calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = perform_calibration &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_calibrate
</UL>

<P><STRONG><a name="[49c]"></a>put_char</STRONG> (Thumb, 98 bytes, Stack size 56 bytes, dev_lcd.o(i.put_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = put_char
</UL>
<BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_string
</UL>

<P><STRONG><a name="[49a]"></a>put_cross</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, dev_lcd.o(i.put_cross))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = put_cross &rArr; line &rArr; dev_lcd_drawpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line
</UL>
<BR>[Called By]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_calibrate
</UL>

<P><STRONG><a name="[2f9]"></a>put_fat</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[49b]"></a>put_string</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, dev_lcd.o(i.put_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = put_string &rArr; put_char
</UL>
<BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_char
</UL>
<BR>[Called By]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_string_center
</UL>

<P><STRONG><a name="[49d]"></a>put_string_center</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, dev_lcd.o(i.put_string_center))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = put_string_center &rArr; put_string &rArr; put_char
</UL>
<BR>[Calls]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_string
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_calibrate
</UL>

<P><STRONG><a name="[487]"></a>pxPortInitialiseStack</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[f6]"></a>start_task</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(i.start_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = start_task &rArr; board_main_init &rArr; font_hzfont_init &rArr; vfs_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_mcu_init
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_main_init
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_low_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[2bf]"></a>sys_dev_register</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, board_sysconf.o(i.sys_dev_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = sys_dev_register &rArr; mcu_spi_register &rArr; mcu_hspi_init &rArr; log2 &rArr; log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_register
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_register
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_spich_register
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_spi_register
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcdbus_register
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2c_register
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_main_init
</UL>

<P><STRONG><a name="[49f]"></a>tcp_abandon</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, tcp.o(i.tcp_abandon))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>

<P><STRONG><a name="[46d]"></a>tcp_abort</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(i.tcp_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
</UL>

<P><STRONG><a name="[4a3]"></a>tcp_close</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tcp.o(i.tcp_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>

<P><STRONG><a name="[4ab]"></a>tcp_eff_send_mss</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tcp.o(i.tcp_eff_send_mss))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tcp_eff_send_mss &rArr; ip_route
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
</UL>

<P><STRONG><a name="[4ac]"></a>tcp_enqueue_flags</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_enqueue_flags))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = tcp_enqueue_flags &rArr; tcp_create_segment &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
</UL>

<P><STRONG><a name="[4ae]"></a>tcp_fasttmr</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tcp.o(i.tcp_fasttmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[4b0]"></a>tcp_keepalive</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_keepalive))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = tcp_keepalive &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[4a8]"></a>tcp_output</STRONG> (Thumb, 388 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[4a5]"></a>tcp_pcb_purge</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, tcp.o(i.tcp_pcb_purge))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = tcp_pcb_purge &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[4a0]"></a>tcp_pcb_remove</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, tcp.o(i.tcp_pcb_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
</UL>
<BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[4af]"></a>tcp_process_refused_data</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, tcp.o(i.tcp_process_refused_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>
<BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>

<P><STRONG><a name="[4b4]"></a>tcp_recv_null</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, tcp.o(i.tcp_recv_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
</UL>

<P><STRONG><a name="[4b5]"></a>tcp_recved</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, tcp.o(i.tcp_recved))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
</UL>
<BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>

<P><STRONG><a name="[4b7]"></a>tcp_rexmit_rto</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, tcp_out.o(i.tcp_rexmit_rto))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[4a2]"></a>tcp_rst</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, tcp_out.o(i.tcp_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = tcp_rst &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[4aa]"></a>tcp_seg_free</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tcp.o(i.tcp_seg_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>

<P><STRONG><a name="[4a1]"></a>tcp_segs_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tcp.o(i.tcp_segs_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>

<P><STRONG><a name="[4b2]"></a>tcp_send_empty_ack</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_send_empty_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[4a7]"></a>tcp_send_fin</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, tcp_out.o(i.tcp_send_fin))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = tcp_send_fin &rArr; tcp_enqueue_flags &rArr; tcp_create_segment &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[4b8]"></a>tcp_slowtmr</STRONG> (Thumb, 606 bytes, Stack size 40 bytes, tcp.o(i.tcp_slowtmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = tcp_slowtmr &rArr; tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[4a6]"></a>tcp_timer_needed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, timers.o(i.tcp_timer_needed))
<BR><BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[1b9]"></a>tcp_tmr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tcp.o(i.tcp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Periodic_Handle
</UL>

<P><STRONG><a name="[4b6]"></a>tcp_update_rcv_ann_wnd</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, tcp.o(i.tcp_update_rcv_ann_wnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tcp_update_rcv_ann_wnd
</UL>
<BR>[Called By]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
</UL>

<P><STRONG><a name="[4b9]"></a>tcp_zero_window_probe</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_zero_window_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = tcp_zero_window_probe &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[10b]"></a>test_camera</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, wujique_test.o(i.test_camera))
<BR><BR>[Stack]<UL><LI>Max Depth = 668<LI>Call Chain = test_camera &rArr; wjq_test_showstr &rArr; dev_lcd_put_string &rArr; font_get_hz &rArr; font_hzfont_init &rArr; vfs_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_update
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_color_fill
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_open
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_camera_show
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_camera_open
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_camera_close
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_wait_key
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_test_showstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wujique_test.o(.constdata)
</UL>
<P><STRONG><a name="[110]"></a>test_can_rec</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wujique_test.o(i.test_can_rec))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = test_can_rec &rArr; wjq_test_showstr &rArr; dev_lcd_put_string &rArr; font_get_hz &rArr; font_hzfont_init &rArr; vfs_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_test_showstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wujique_test.o(.constdata)
</UL>
<P><STRONG><a name="[111]"></a>test_can_snd</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wujique_test.o(i.test_can_snd))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = test_can_snd &rArr; wjq_test_showstr &rArr; dev_lcd_put_string &rArr; font_get_hz &rArr; font_hzfont_init &rArr; vfs_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_test_showstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wujique_test.o(.constdata)
</UL>
<P><STRONG><a name="[4bd]"></a>test_cogoled_lcd_display</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, wujique_test.o(i.test_cogoled_lcd_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 692<LI>Call Chain = test_cogoled_lcd_display &rArr; wjq_test_showstr &rArr; dev_lcd_put_string &rArr; font_get_hz &rArr; font_hzfont_init &rArr; vfs_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_update
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_color_fill
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_keypad_read
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_open
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_test_showstr
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_spi_cog_display
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_i2c_oled_display
</UL>

<P><STRONG><a name="[113]"></a>test_esp8266</STRONG> (Thumb, 154 bytes, Stack size 56 bytes, wujique_test.o(i.test_esp8266))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = test_esp8266 &rArr; dev_lcd_put_string &rArr; font_get_hz &rArr; font_hzfont_init &rArr; vfs_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_update
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_color_fill
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_keypad_read
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_8266_write
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_8266_read
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_8266_open
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wujique_test.o(.constdata)
</UL>
<P><STRONG><a name="[fc]"></a>test_i2c_oled_display</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, wujique_test.o(i.test_i2c_oled_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 708<LI>Call Chain = test_i2c_oled_display &rArr; test_cogoled_lcd_display &rArr; wjq_test_showstr &rArr; dev_lcd_put_string &rArr; font_get_hz &rArr; font_hzfont_init &rArr; vfs_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_update
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_color_fill
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_cogoled_lcd_display
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wujique_test.o(.constdata)
</UL>
<P><STRONG><a name="[108]"></a>test_key</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, wujique_test.o(i.test_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = test_key &rArr; dev_lcd_put_string &rArr; font_get_hz &rArr; font_hzfont_init &rArr; vfs_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_update
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_color_fill
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_keypad_read
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_key_read
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_key_open
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_key_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wujique_test.o(.constdata)
</UL>
<P><STRONG><a name="[10a]"></a>test_keypad</STRONG> (Thumb, 388 bytes, Stack size 80 bytes, wujique_test.o(i.test_keypad))
<BR><BR>[Stack]<UL><LI>Max Depth = 708<LI>Call Chain = test_keypad &rArr; dev_lcd_put_string &rArr; font_get_hz &rArr; font_hzfont_init &rArr; vfs_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_update
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_color_fill
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_keypad_read
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_keypad_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wujique_test.o(.constdata)
</UL>
<P><STRONG><a name="[100]"></a>test_lcd_font</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wujique_test.o(i.test_lcd_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = test_lcd_font &rArr; wjq_test_showstr &rArr; dev_lcd_put_string &rArr; font_get_hz &rArr; font_hzfont_init &rArr; vfs_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_test_showstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wujique_test.o(.constdata)
</UL>
<P><STRONG><a name="[ff]"></a>test_lcd_pic</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, wujique_test.o(i.test_lcd_pic))
<BR><BR>[Stack]<UL><LI>Max Depth = 748<LI>Call Chain = test_lcd_pic &rArr; dev_lcd_show_bmp &rArr; vfs_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_update
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_color_fill
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_show_bmp
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_setdir
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_open
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_wait_key
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_test_showstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wujique_test.o(.constdata)
</UL>
<P><STRONG><a name="[10e]"></a>test_rs485_rec</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, wujique_test.o(i.test_rs485_rec))
<BR><BR>[Stack]<UL><LI>Max Depth = 676<LI>Call Chain = test_rs485_rec &rArr; dev_lcd_put_string &rArr; font_get_hz &rArr; font_hzfont_init &rArr; vfs_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_update
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_color_fill
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_keypad_read
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_rs485_read
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_rs485_open
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wujique_test.o(.constdata)
</UL>
<P><STRONG><a name="[10f]"></a>test_rs485_snd</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, wujique_test.o(i.test_rs485_snd))
<BR><BR>[Stack]<UL><LI>Max Depth = 652<LI>Call Chain = test_rs485_snd &rArr; dev_lcd_put_string &rArr; font_get_hz &rArr; font_hzfont_init &rArr; vfs_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_update
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_color_fill
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_keypad_read
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_rs485_write
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_rs485_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wujique_test.o(.constdata)
</UL>
<P><STRONG><a name="[101]"></a>test_sound_buzzer</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, wujique_test.o(i.test_sound_buzzer))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = test_sound_buzzer &rArr; dev_lcd_put_string &rArr; font_get_hz &rArr; font_hzfont_init &rArr; vfs_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_update
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_color_fill
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_keypad_read
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_buzzer_open
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_buzzer_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wujique_test.o(.constdata)
</UL>
<P><STRONG><a name="[102]"></a>test_sound_dac</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, wujique_test.o(i.test_sound_dac))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = test_sound_dac &rArr; dev_lcd_put_string &rArr; font_get_hz &rArr; font_hzfont_init &rArr; vfs_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_update
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_color_fill
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_stop
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_play
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_wait_key
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wujique_test.o(.constdata)
</UL>
<P><STRONG><a name="[103]"></a>test_sound_fm</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, wujique_test.o(i.test_sound_fm))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = test_sound_fm &rArr; dev_lcd_put_string &rArr; font_get_hz &rArr; font_hzfont_init &rArr; vfs_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_update
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_color_fill
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_inout
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_tea5767_setfre
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_tea5767_open
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_wait_key
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wujique_test.o(.constdata)
</UL>
<P><STRONG><a name="[105]"></a>test_sound_rec</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, wujique_test.o(i.test_sound_rec))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = test_sound_rec &rArr; dev_lcd_put_string &rArr; font_get_hz &rArr; font_hzfont_init &rArr; vfs_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_update
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_color_fill
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_keypad_read
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_rec
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_play
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_get_sta
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_rec_stop
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_wait_key
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wujique_test.o(.constdata)
</UL>
<P><STRONG><a name="[104]"></a>test_sound_wm8978</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, wujique_test.o(i.test_sound_wm8978))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = test_sound_wm8978 &rArr; dev_lcd_put_string &rArr; font_get_hz &rArr; font_hzfont_init &rArr; vfs_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_update
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_color_fill
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_stop
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_play
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_wait_key
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wujique_test.o(.constdata)
</UL>
<P><STRONG><a name="[fd]"></a>test_spi_cog_display</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, wujique_test.o(i.test_spi_cog_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 708<LI>Call Chain = test_spi_cog_display &rArr; test_cogoled_lcd_display &rArr; wjq_test_showstr &rArr; dev_lcd_put_string &rArr; font_get_hz &rArr; font_hzfont_init &rArr; vfs_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_update
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_color_fill
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_cogoled_lcd_display
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wujique_test.o(.constdata)
</UL>
<P><STRONG><a name="[10d]"></a>test_spiflash_board</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, wujique_test.o(i.test_spiflash_board))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = test_spiflash_board &rArr; dev_lcd_put_string &rArr; font_get_hz &rArr; font_hzfont_init &rArr; vfs_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_update
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_color_fill
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_test_chipcheck
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_wait_key
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wujique_test.o(.constdata)
</UL>
<P><STRONG><a name="[10c]"></a>test_spiflash_core</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, wujique_test.o(i.test_spiflash_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = test_spiflash_core &rArr; dev_lcd_put_string &rArr; font_get_hz &rArr; font_hzfont_init &rArr; vfs_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_update
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_color_fill
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_test_chiperase
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_wait_key
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wujique_test.o(.constdata)
</UL>
<P><STRONG><a name="[fe]"></a>test_tft_display</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, wujique_test.o(i.test_tft_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 692<LI>Call Chain = test_tft_display &rArr; wjq_test_showstr &rArr; dev_lcd_put_string &rArr; font_get_hz &rArr; font_hzfont_init &rArr; vfs_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_update
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_color_fill
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_keypad_read
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_open
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_test_showstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wujique_test.o(.constdata)
</UL>
<P><STRONG><a name="[109]"></a>test_touchkey</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, wujique_test.o(i.test_touchkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = test_touchkey &rArr; dev_lcd_put_string &rArr; font_get_hz &rArr; font_hzfont_init &rArr; vfs_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_update
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_color_fill
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_keypad_read
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_touchkey_read
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_touchkey_open
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_touchkey_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wujique_test.o(.constdata)
</UL>
<P><STRONG><a name="[106]"></a>test_tp_calibrate</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, wujique_test.o(i.test_tp_calibrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = test_tp_calibrate &rArr; ts_calibrate &rArr; get_sample &rArr; getxy &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_update
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_color_fill
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_touchscreen_open
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_touchscreen_close
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_setdir
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_open
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_close
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_calibrate
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_test_showstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wujique_test.o(.constdata)
</UL>
<P><STRONG><a name="[107]"></a>test_tp_test</STRONG> (Thumb, 224 bytes, Stack size 168 bytes, wujique_test.o(i.test_tp_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 820<LI>Call Chain = test_tp_test &rArr; wjq_test_showstr &rArr; dev_lcd_put_string &rArr; font_get_hz &rArr; font_hzfont_init &rArr; vfs_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_update
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_color_fill
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_keypad_read
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_touchscreen_open
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_touchscreen_close
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_setdir
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_open
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_drawpoint
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_read
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_open_module
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_test_showstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wujique_test.o(.constdata)
</UL>
<P><STRONG><a name="[112]"></a>test_uart</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, wujique_test.o(i.test_uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = test_uart &rArr; dev_lcd_put_string &rArr; font_get_hz &rArr; font_hzfont_init &rArr; vfs_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_update
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_color_fill
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_keypad_read
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_write
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wujique_test.o(.constdata)
</UL>
<P><STRONG><a name="[4c7]"></a>ts_calibrate</STRONG> (Thumb, 362 bytes, Stack size 40 bytes, ts_calibrate.o(i.ts_calibrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = ts_calibrate &rArr; get_sample &rArr; getxy &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_string_center
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_cross
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_open
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_config
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_calibration
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sample
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tp_calibrate
</UL>

<P><STRONG><a name="[4cc]"></a>ts_config</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tslib.o(i.ts_config))
<BR><BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_open_module
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_calibrate
</UL>

<P><STRONG><a name="[4cb]"></a>ts_open</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tslib.o(i.ts_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ts_open &rArr; mod_variance_init &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_variance_init
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_linear_init
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_dejitter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_open_module
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_calibrate
</UL>

<P><STRONG><a name="[4c9]"></a>ts_open_module</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ts_calibrate.o(i.ts_open_module))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ts_open_module &rArr; ts_open &rArr; mod_variance_init &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_set_cal
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_open
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_config
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tp_test
</UL>

<P><STRONG><a name="[4ca]"></a>ts_read</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tslib.o(i.ts_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = ts_read &rArr; dejitter_read &rArr; variance_read &rArr; linear_read &rArr; ts_input_read &rArr; dev_touchscreen_read
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dejitter_read
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tp_test
</UL>

<P><STRONG><a name="[3f2]"></a>ts_read_raw</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tslib.o(i.ts_read_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ts_read_raw &rArr; ts_input_read &rArr; dev_touchscreen_read
</UL>
<BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_input_read
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getxy
</UL>

<P><STRONG><a name="[4ce]"></a>ts_set_cal</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tslib.o(i.ts_set_cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ts_set_cal &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_open_module
</UL>

<P><STRONG><a name="[38f]"></a>udp_bind</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, udp.o(i.udp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = udp_bind &rArr; udp_new_port
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[390]"></a>udp_connect</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, udp.o(i.udp_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = udp_connect &rArr; udp_bind &rArr; udp_new_port
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[38e]"></a>udp_new</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, udp.o(i.udp_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udp_new
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[391]"></a>udp_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, udp.o(i.udp_recv))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[38d]"></a>udp_remove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, udp.o(i.udp_remove))
<BR><BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[37c]"></a>udp_sendto_if</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, udp.o(i.udp_sendto_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>

<P><STRONG><a name="[4d2]"></a>usb_Demo_Init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dual_func_demo.o(i.usb_Demo_Init))
<BR><BR>[Called By]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_app_init
</UL>

<P><STRONG><a name="[4d1]"></a>usb_app_init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, dual_func_demo.o(i.usb_app_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = usb_app_init &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_Demo_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_main
</UL>

<P><STRONG><a name="[4d3]"></a>usb_loop_task</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dual_func_demo.o(i.usb_loop_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = usb_loop_task &rArr; Demo_Process &rArr; Demo_Application &rArr; Explore_Disk &rArr;  Explore_Disk (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demo_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_main
</UL>

<P><STRONG><a name="[f8]"></a>usb_main</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dual_func_demo.o(i.usb_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = usb_main &rArr; usb_loop_task &rArr; Demo_Process &rArr; Demo_Application &rArr; Explore_Disk &rArr;  Explore_Disk (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_loop_task
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_app_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dual_func_demo.o(i.usb_task_create)
</UL>
<P><STRONG><a name="[2d1]"></a>usb_task_create</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dual_func_demo.o(i.usb_task_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = usb_task_create &rArr; xTaskCreate &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_main_init
</UL>

<P><STRONG><a name="[473]"></a>uxListRemove</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, frtos_list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[47b]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, frtos_list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>

<P><STRONG><a name="[486]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, frtos_list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[475]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, frtos_list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[474]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, frtos_list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[477]"></a>vPortEnterCritical</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[479]"></a>vPortExitCritical</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[4df]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[4d4]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, port.o(i.vPortValidateInterruptPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[47d]"></a>vQueueAddToRegistry</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, frtos_queue.o(i.vQueueAddToRegistry))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[493]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, frtos_queue.o(i.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[49e]"></a>vTaskDelay</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, frtos_tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_main
</UL>

<P><STRONG><a name="[4e5]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, frtos_tasks.o(i.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[499]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, frtos_tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[4d7]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, frtos_tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[4d6]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, frtos_tasks.o(i.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[40a]"></a>vTaskStartScheduler</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, frtos_tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[491]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, frtos_tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[117]"></a>vTaskSwitchContext</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, frtos_tasks.o(i.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortPendSVHandler
</UL>

<P><STRONG><a name="[330]"></a>vfs_close</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, vfs.o(i.vfs_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = vfs_close &rArr; f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_stop
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_rec_stop
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_show_bmp
</UL>

<P><STRONG><a name="[2ce]"></a>vfs_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, vfs.o(i.vfs_init))
<BR><BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_main_init
</UL>

<P><STRONG><a name="[3df]"></a>vfs_lseek</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, vfs.o(i.vfs_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = vfs_lseek &rArr; f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>
<BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_rec_stop
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_get_hz
</UL>

<P><STRONG><a name="[2cf]"></a>vfs_mount</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, vfs.o(i.vfs_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = vfs_mount &rArr; f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_main_init
</UL>

<P><STRONG><a name="[32e]"></a>vfs_open</STRONG> (Thumb, 116 bytes, Stack size 56 bytes, vfs.o(i.vfs_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = vfs_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_get_dir_name
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_find_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_rec
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_play
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_show_bmp
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_hzfont_init
</UL>

<P><STRONG><a name="[32f]"></a>vfs_read</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, vfs.o(i.vfs_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = vfs_read &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_task
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_play
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_get_hz
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_show_bmp
</UL>

<P><STRONG><a name="[3e3]"></a>vfs_write</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, vfs.o(i.vfs_write))
<BR><BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_rec
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_rec_task
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_rec_stop
</UL>

<P><STRONG><a name="[32a]"></a>wjq_free_m</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, alloc.o(i.wjq_free_m))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = wjq_free_m &rArr; wjq_free_t
</UL>
<BR>[Calls]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_free_t
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_test_chiperase
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_test_chipcheck
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_stop
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_rec
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_play
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_rec_stop
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_flush
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_fill
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_color_fill
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_flush
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_fill
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_color_fill
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_show_bmp
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_flush
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_fill
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_color_fill
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
</UL>

<P><STRONG><a name="[4dc]"></a>wjq_free_t</STRONG> (Thumb, 102 bytes, Stack size 12 bytes, alloc.o(i.wjq_free_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = wjq_free_t
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_free_m
</UL>

<P><STRONG><a name="[143]"></a>wjq_log</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, log.o(i.wjq_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_write
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emunu_find_next
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emenu_run
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emenu_display
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emenu_deal_key_list
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emenu_deal_key_2col
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_mcu_preinit
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_mcu_init
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_main_init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_spi_transfer
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_spi_open
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_test_chiperase
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_test_chipcheck
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_register
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_rs485_init
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_8266_init
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_open
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_task
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_stop
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_rec
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_play
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_rec_task
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_refresh_gram
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_drawpoint
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_display_onoff
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCardInfo
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_xpt2046_open
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_xpt2046_init
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2c_transfer
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_prepare_display
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_fill
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_color_fill
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_prepare_display
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_fill
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_color_fill
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_show_bmp
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_setdir
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_register
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_prepare_display
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_init
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_fill
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_prepare_display
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_init
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_fill
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_color_fill
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_prepare_display
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_init
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL91874_prepare_display
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL91874_init
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL91874_flush
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL91874_fill
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL91874_color_fill
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL91874_refresh_gram
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL91874_drawpoint
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL91874_display_onoff
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_prepare_display
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_init
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_flush
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_fill
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_color_fill
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_t
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vspi_transfer
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vspi_init
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_hspi_transfer
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_spich_register
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_spi_register
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcdbus_register
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2c_register
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_camera_show
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_camera_init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ssd1615_init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_hzfont_init
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_mount
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_rtc_init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_can1_rx0_IRQ
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceInit
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_variance_init
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_linear_init
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_dejitter_init
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_open_module
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_calibrate
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_calibration
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sample
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getxy
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_app_init
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explore_Disk
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demo_Application
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_DHCP_Process_Handle
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wujique_stm407_test
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_test_showstr
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_touchkey
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_wm8978
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_rec
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_dac
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_rs485_snd
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_rs485_rec
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_esp8266
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_camera
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dev_register
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_UnrecoveredError
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_SerialNum_String
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_Product_String
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_OverCurrentDetected
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_Manufacturer_String
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_EnumerationDone
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_DeviceSpeedDetected
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_DeviceNotSupported
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_DeviceDisconnected
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_Configuration_DescAvailable
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_DeviceSuspended
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_DeviceDisconnected
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_DeviceConnected
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_DeviceConfigured
</UL>

<P><STRONG><a name="[313]"></a>wjq_malloc_m</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, alloc.o(i.wjq_malloc_m))
<BR><BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_test_chiperase
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_test_chipcheck
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_register
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_uart_open
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_open
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_rec
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_play
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_flush
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_fill
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_color_fill
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_flush
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_fill
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_color_fill
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_show_bmp
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_register
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_flush
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_fill
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_color_fill
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL91874_init
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_init
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_spich_register
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_spi_register
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcdbus_register
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2c_register
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_camera_show
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ssd1615_init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_init
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>

<P><STRONG><a name="[4de]"></a>wjq_malloc_t</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, alloc.o(i.wjq_malloc_t), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>

<P><STRONG><a name="[4bc]"></a>wjq_test_showstr</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, wujique_test.o(i.wjq_test_showstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 652<LI>Call Chain = wjq_test_showstr &rArr; dev_lcd_put_string &rArr; font_get_hz &rArr; font_hzfont_init &rArr; vfs_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_update
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_put_string
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_color_fill
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_wait_key
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tp_test
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tp_calibrate
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tft_display
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_lcd_pic
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_lcd_font
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_cogoled_lcd_display
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_can_snd
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_can_rec
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_camera
</UL>

<P><STRONG><a name="[4bb]"></a>wjq_wait_key</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, wujique_test.o(i.wjq_wait_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = wjq_wait_key &rArr; dev_keypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_keypad_read
</UL>
<BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_test_showstr
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_spiflash_core
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_spiflash_board
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_wm8978
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_rec
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_fm
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sound_dac
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_lcd_pic
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_camera
</UL>

<P><STRONG><a name="[2d2]"></a>wujique_407test_init</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, wujique_test.o(i.wujique_407test_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = wujique_407test_init &rArr; xTaskCreate &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_main_init
</UL>

<P><STRONG><a name="[fa]"></a>wujique_stm407_test</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, wujique_test.o(i.wujique_stm407_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 724<LI>Call Chain = wujique_stm407_test &rArr; emenu_run &rArr; emenu_display &rArr; dev_lcd_put_string &rArr; font_get_hz &rArr; font_hzfont_init &rArr; vfs_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emenu_run
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_keypad_open
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_key_open
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wujique_test.o(i.wujique_407test_init)
</UL>
<P><STRONG><a name="[4d9]"></a>xPortStartScheduler</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[225]"></a>xPortSysTickHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, port.o(i.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[47c]"></a>xQueueGenericCreate</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, frtos_queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xQueueGenericCreate &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[484]"></a>xQueueGenericReset</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, frtos_queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[4e3]"></a>xQueueGenericSend</STRONG> (Thumb, 352 bytes, Stack size 56 bytes, frtos_queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericSend &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[4e7]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, frtos_queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[48f]"></a>xQueueReceive</STRONG> (Thumb, 310 bytes, Stack size 56 bytes, frtos_queue.o(i.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[4e6]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, frtos_tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[409]"></a>xTaskCreate</STRONG> (Thumb, 96 bytes, Stack size 56 bytes, frtos_tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xTaskCreate &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_malloc_m
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_free_m
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wujique_407test_init
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_task_create
</UL>

<P><STRONG><a name="[4e4]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, frtos_tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[494]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, frtos_tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[4e2]"></a>xTaskIncrementTick</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, frtos_tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[482]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, frtos_tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[498]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, frtos_tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[492]"></a>xTaskResumeAll</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, frtos_tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[4d8]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, frtos_timers.o(i.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskCreate &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[48c]"></a>xTimerGenericCommand</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, frtos_timers.o(i.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[3e4]"></a>fun_rec_get_buff_index</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, soundplay.o(i.fun_rec_get_buff_index))
<BR><BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_rec_task
</UL>

<P><STRONG><a name="[3e6]"></a>fun_sound_deal_1ch_data</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, soundplay.o(i.fun_sound_deal_1ch_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fun_sound_deal_1ch_data
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_task
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_play
</UL>

<P><STRONG><a name="[3ef]"></a>fun_sound_get_buff_index</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, soundplay.o(i.fun_sound_get_buff_index))
<BR><BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun_sound_task
</UL>

<P><STRONG><a name="[33f]"></a>dev_spiflash_readJTD</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, dev_spiflash.o(i.dev_spiflash_readJTD))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dev_spiflash_readJTD &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_spi_transfer
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_spi_cs
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_register
</UL>

<P><STRONG><a name="[340]"></a>dev_spiflash_readMTD</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, dev_spiflash.o(i.dev_spiflash_readMTD))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dev_spiflash_readMTD &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_spi_transfer
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_spi_cs
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_register
</UL>

<P><STRONG><a name="[33c]"></a>dev_spiflash_waitwriteend</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, dev_spiflash.o(i.dev_spiflash_waitwriteend))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dev_spiflash_waitwriteend &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_spi_transfer
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_spi_cs
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_write
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_erase
</UL>

<P><STRONG><a name="[33a]"></a>dev_spiflash_writeen</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, dev_spiflash.o(i.dev_spiflash_writeen))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dev_spiflash_writeen &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_spi_transfer
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_spi_cs
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_write
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_spiflash_erase
</UL>

<P><STRONG><a name="[34b]"></a>dev_tea5767_fre2pll</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, dev_tea5767.o(i.dev_tea5767_fre2pll))
<BR><BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_tea5767_setfre
</UL>

<P><STRONG><a name="[348]"></a>dev_tea5767_writereg</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, dev_tea5767.o(i.dev_tea5767_writereg))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = dev_tea5767_writereg &rArr; mcu_i2c_transfer &rArr; mcu_vi2c_transfer &rArr; mcu_vi2c_wait_ack &rArr; mcu_vi2c_stop &rArr; mcu_vi2c_sda_output &rArr; mcu_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2c_transfer
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2c_open
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2c_close
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_tea5767_setfre
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_tea5767_open
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_tea5767_init
</UL>

<P><STRONG><a name="[34c]"></a>dev_touchkey_iocap</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dev_touchkey.o(i.dev_touchkey_iocap))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = dev_touchkey_iocap &rArr; mcu_io_config_timer &rArr; log2 &rArr; log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_touchkey_task
</UL>

<P><STRONG><a name="[34d]"></a>dev_touchkey_resetpad</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dev_touchkey.o(i.dev_touchkey_resetpad))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dev_touchkey_resetpad &rArr; mcu_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_setbit
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_out
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_touchkey_task
</UL>

<P><STRONG><a name="[350]"></a>dev_touchkey_scan</STRONG> (Thumb, 140 bytes, Stack size 12 bytes, dev_touchkey.o(i.dev_touchkey_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dev_touchkey_scan
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_touchkey_task
</UL>

<P><STRONG><a name="[35b]"></a>dev_wm8978_setting_init</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, dev_wm8978.o(i.dev_wm8978_setting_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = dev_wm8978_setting_init &rArr; dev_wm8978_inout &rArr; dev_wm8978_writereg &rArr; mcu_i2c_transfer &rArr; mcu_vi2c_transfer &rArr; mcu_vi2c_wait_ack &rArr; mcu_vi2c_stop &rArr; mcu_vi2c_sda_output &rArr; mcu_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_inout
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_writereg
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_set_spk_vol
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_set_phone_vol
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_set_mic_gain
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_set_aux_gain
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_wm8978_init
</UL>

<P><STRONG><a name="[145]"></a>CmdError</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stm324xg_eval_sdio_sd.o(i.CmdError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CmdError
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[148]"></a>CmdResp1Error</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, stm324xg_eval_sdio_sd.o(i.CmdResp1Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetCommandResponse
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransfer
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[14b]"></a>CmdResp2Error</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm324xg_eval_sdio_sd.o(i.CmdResp2Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CmdResp2Error
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[14c]"></a>CmdResp3Error</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm324xg_eval_sdio_sd.o(i.CmdResp3Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CmdResp3Error
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[14d]"></a>CmdResp6Error</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, stm324xg_eval_sdio_sd.o(i.CmdResp6Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CmdResp6Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetCommandResponse
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[14e]"></a>CmdResp7Error</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm324xg_eval_sdio_sd.o(i.CmdResp7Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CmdResp7Error
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[1a4]"></a>FindSCR</STRONG> (Thumb, 364 bytes, Stack size 40 bytes, stm324xg_eval_sdio_sd.o(i.FindSCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FindSCR &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadData
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
</UL>

<P><STRONG><a name="[1fc]"></a>SDEnWideBus</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, stm324xg_eval_sdio_sd.o(i.SDEnWideBus))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SDEnWideBus &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
</UL>

<P><STRONG><a name="[209]"></a>SD_NVIC_Configuration</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm324xg_eval_sdio_sd.o(i.SD_NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SD_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[7]"></a>drv_IL3820_display_onoff</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dev_il3820.o(i.drv_IL3820_display_onoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = drv_IL3820_display_onoff &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_il3820.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>drv_IL3820_drawpoint</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dev_il3820.o(i.drv_IL3820_drawpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = drv_IL3820_drawpoint &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_il3820.o(.data)
</UL>
<P><STRONG><a name="[3aa]"></a>drv_IL3820_refresh_gram</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, dev_il3820.o(i.drv_IL3820_refresh_gram))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = drv_IL3820_refresh_gram &rArr; drv_il91874_write_data &rArr; bus_lcd_write_data &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_input_readbit
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_il91874_write_data
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_il91874_write_cmd
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_il3820_write_data
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_il3820_write_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL3820_update
</UL>

<P><STRONG><a name="[8]"></a>drv_IL3820_scan_dir</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dev_il3820.o(i.drv_IL3820_scan_dir))
<BR>[Address Reference Count : 1]<UL><LI> dev_il3820.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>drv_IL91874_display_onoff</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dev_il91874.o(i.drv_IL91874_display_onoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = drv_IL91874_display_onoff &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_il91874.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>drv_IL91874_drawpoint</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dev_il91874.o(i.drv_IL91874_drawpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = drv_IL91874_drawpoint &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_il91874.o(.data)
</UL>
<P><STRONG><a name="[3ad]"></a>drv_IL91874_refresh_gram</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, dev_il91874.o(i.drv_IL91874_refresh_gram))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = drv_IL91874_refresh_gram &rArr; drv_il91874_write_data &rArr; bus_lcd_write_data &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_input_readbit
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_il91874_write_data
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_il91874_write_cmd
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_IL91874_update
</UL>

<P><STRONG><a name="[12]"></a>drv_IL91874_scan_dir</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dev_il91874.o(i.drv_IL91874_scan_dir))
<BR>[Address Reference Count : 1]<UL><LI> dev_il91874.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>drv_ILI9325_display_onoff</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, dev_ili9325.o(i.drv_ILI9325_display_onoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = drv_ILI9325_display_onoff &rArr; bus_lcd_write_data &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_ili9325.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>drv_ILI9325_drawpoint</STRONG> (Thumb, 100 bytes, Stack size 64 bytes, dev_ili9325.o(i.drv_ILI9325_drawpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = drv_ILI9325_drawpoint &rArr; drv_ILI9325_set_cp_addr &rArr; bus_lcd_write_data &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_xy2cp
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_set_cp_addr
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_ili9325.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>drv_ILI9325_scan_dir</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, dev_ili9325.o(i.drv_ILI9325_scan_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = drv_ILI9325_scan_dir &rArr; bus_lcd_write_data &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_ili9325.o(.data)
</UL>
<P><STRONG><a name="[3af]"></a>drv_ILI9325_set_cp_addr</STRONG> (Thumb, 266 bytes, Stack size 40 bytes, dev_ili9325.o(i.drv_ILI9325_set_cp_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = drv_ILI9325_set_cp_addr &rArr; bus_lcd_write_data &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_prepare_display
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_fill
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_color_fill
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9325_drawpoint
</UL>

<P><STRONG><a name="[2a]"></a>drv_ILI9341_8_drawpoint</STRONG> (Thumb, 106 bytes, Stack size 64 bytes, dev_ili9341.o(i.drv_ILI9341_8_drawpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = drv_ILI9341_8_drawpoint &rArr; drv_ILI9341_8_set_cp_addr &rArr; bus_lcd_write_data &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_xy2cp
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_8_set_cp_addr
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_ili9341.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>drv_ILI9341_8_scan_dir</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, dev_ili9341.o(i.drv_ILI9341_8_scan_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = drv_ILI9341_8_scan_dir &rArr; bus_lcd_write_data &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_ili9341.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>drv_ILI9341_display_onoff</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, dev_ili9341.o(i.drv_ILI9341_display_onoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = drv_ILI9341_display_onoff &rArr; bus_lcd_write_cmd &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 2]<UL><LI> dev_ili9341.o(.data)
<LI> dev_ili9341.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>drv_ILI9341_drawpoint</STRONG> (Thumb, 100 bytes, Stack size 64 bytes, dev_ili9341.o(i.drv_ILI9341_drawpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = drv_ILI9341_drawpoint &rArr; drv_ILI9341_set_cp_addr &rArr; bus_lcd_write_data &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_xy2cp
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ILI9341_set_cp_addr
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_ili9341.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>drv_ILI9341_scan_dir</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, dev_ili9341.o(i.drv_ILI9341_scan_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = drv_ILI9341_scan_dir &rArr; bus_lcd_write_data &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_ili9341.o(.data)
</UL>
<P><STRONG><a name="[32c]"></a>dev_lcd_finddrv</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, dev_lcd.o(i.dev_lcd_finddrv))
<BR><BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_register
</UL>

<P><STRONG><a name="[37]"></a>drv_ST7735R_display_onoff</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, dev_st7735r.o(i.drv_ST7735R_display_onoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = drv_ST7735R_display_onoff &rArr; bus_lcd_write_cmd &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_st7735r.o(.data)
</UL>
<P><STRONG><a name="[32]"></a>drv_ST7735R_drawpoint</STRONG> (Thumb, 106 bytes, Stack size 64 bytes, dev_st7735r.o(i.drv_ST7735R_drawpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = drv_ST7735R_drawpoint &rArr; drv_ST7735R_set_cp_addr &rArr; bus_lcd_write_data &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_xy2cp
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7735R_set_cp_addr
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_st7735r.o(.data)
</UL>
<P><STRONG><a name="[38]"></a>drv_ST7735R_scan_dir</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dev_st7735r.o(i.drv_ST7735R_scan_dir))
<BR>[Address Reference Count : 1]<UL><LI> dev_st7735r.o(.data)
</UL>
<P><STRONG><a name="[41]"></a>drv_ST7789_display_onoff</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, dev_st7789.o(i.drv_ST7789_display_onoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = drv_ST7789_display_onoff &rArr; bus_lcd_write_cmd &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_st7789.o(.data)
</UL>
<P><STRONG><a name="[3c]"></a>drv_ST7789_drawpoint</STRONG> (Thumb, 106 bytes, Stack size 64 bytes, dev_st7789.o(i.drv_ST7789_drawpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = drv_ST7789_drawpoint &rArr; drv_ST7789_set_cp_addr &rArr; bus_lcd_write_data &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_xy2cp
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7789_set_cp_addr
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_st7789.o(.data)
</UL>
<P><STRONG><a name="[42]"></a>drv_ST7789_scan_dir</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dev_st7789.o(i.drv_ST7789_scan_dir))
<BR>[Address Reference Count : 1]<UL><LI> dev_st7789.o(.data)
</UL>
<P><STRONG><a name="[4b]"></a>drv_ST7565_display_onoff</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, dev_str7565.o(i.drv_ST7565_display_onoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = drv_ST7565_display_onoff &rArr; bus_lcd_write_cmd &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_str7565.o(.data)
</UL>
<P><STRONG><a name="[46]"></a>drv_ST7565_drawpoint</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, dev_str7565.o(i.drv_ST7565_drawpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = drv_ST7565_drawpoint &rArr; bus_lcd_write_data &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Address Reference Count : 2]<UL><LI> dev_str7565.o(.data)
<LI> dev_str7565.o(.data)
</UL>
<P><STRONG><a name="[3b4]"></a>drv_ST7565_refresh_gram</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, dev_str7565.o(i.drv_ST7565_refresh_gram))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = drv_ST7565_refresh_gram &rArr; bus_lcd_write_data &rArr; mcu_spi_transfer &rArr; mcu_vspi_transfer &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_data
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_cmd
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_open
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_close
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ST7565_update
</UL>

<P><STRONG><a name="[4c]"></a>drv_ST7565_scan_dir</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dev_str7565.o(i.drv_ST7565_scan_dir))
<BR>[Address Reference Count : 2]<UL><LI> dev_str7565.o(.data)
<LI> dev_str7565.o(.data)
</UL>
<P><STRONG><a name="[2da]"></a>bus_lcd_IO_init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, bus_lcd.o(i.bus_lcd_IO_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bus_lcd_IO_init &rArr; mcu_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_setbit
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_config_out
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcdbus_register
</UL>

<P><STRONG><a name="[45c]"></a>mcu_vi2c_ack</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bus_vi2c.o(i.mcu_vi2c_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mcu_vi2c_ack &rArr; mcu_vi2c_sda_output &rArr; mcu_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_sda_output
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_sda
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_scl
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_transfer
</UL>

<P><STRONG><a name="[460]"></a>mcu_vi2c_delay</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bus_vi2c.o(i.mcu_vi2c_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mcu_vi2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_writebyte
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_wait_ack
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_stop
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_start
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_readbyte
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_ack
</UL>

<P><STRONG><a name="[461]"></a>mcu_vi2c_readbyte</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, bus_vi2c.o(i.mcu_vi2c_readbyte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mcu_vi2c_readbyte &rArr; mcu_vi2c_sda_input &rArr; mcu_io_config_in &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_sda_input
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_scl
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_readsda
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_transfer
</UL>

<P><STRONG><a name="[463]"></a>mcu_vi2c_readsda</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bus_vi2c.o(i.mcu_vi2c_readsda))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mcu_vi2c_readsda
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_input_readbit
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_wait_ack
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_readbyte
</UL>

<P><STRONG><a name="[45d]"></a>mcu_vi2c_scl</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bus_vi2c.o(i.mcu_vi2c_scl))
<BR><BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_setbit
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_resetbit
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_writebyte
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_wait_ack
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_stop
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_start
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_readbyte
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_ack
</UL>

<P><STRONG><a name="[45f]"></a>mcu_vi2c_sda</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bus_vi2c.o(i.mcu_vi2c_sda))
<BR><BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_setbit
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_io_output_resetbit
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_writebyte
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_wait_ack
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_stop
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_start
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_ack
</UL>

<P><STRONG><a name="[464]"></a>mcu_vi2c_start</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bus_vi2c.o(i.mcu_vi2c_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mcu_vi2c_start &rArr; mcu_vi2c_sda_output &rArr; mcu_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_sda_output
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_sda
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_scl
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_transfer
</UL>

<P><STRONG><a name="[465]"></a>mcu_vi2c_stop</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, bus_vi2c.o(i.mcu_vi2c_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mcu_vi2c_stop &rArr; mcu_vi2c_sda_output &rArr; mcu_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_sda_output
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_sda
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_scl
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_transfer
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_wait_ack
</UL>

<P><STRONG><a name="[467]"></a>mcu_vi2c_wait_ack</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, bus_vi2c.o(i.mcu_vi2c_wait_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mcu_vi2c_wait_ack &rArr; mcu_vi2c_stop &rArr; mcu_vi2c_sda_output &rArr; mcu_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_sda_input
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_stop
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_sda
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_scl
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_readsda
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_transfer
</UL>

<P><STRONG><a name="[466]"></a>mcu_vi2c_writebyte</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, bus_vi2c.o(i.mcu_vi2c_writebyte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mcu_vi2c_writebyte &rArr; mcu_vi2c_sda_output &rArr; mcu_io_config_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_sda_output
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_sda
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_scl
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_vi2c_transfer
</UL>

<P><STRONG><a name="[4da]"></a>vfs_find_dir</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, vfs.o(i.vfs_find_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vfs_find_dir &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_open
</UL>

<P><STRONG><a name="[4db]"></a>vfs_get_dir_name</STRONG> (Thumb, 154 bytes, Stack size 72 bytes, vfs.o(i.vfs_get_dir_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vfs_get_dir_name
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_open
</UL>

<P><STRONG><a name="[226]"></a>SetSysClock</STRONG> (Thumb, 168 bytes, Stack size 12 bytes, system_stm32f4xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1e6]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
</UL>

<P><STRONG><a name="[1e7]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
</UL>

<P><STRONG><a name="[22e]"></a>TI1_Config</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TI1_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TI1_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[230]"></a>TI2_Config</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TI2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TI2_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[232]"></a>TI3_Config</STRONG> (Thumb, 50 bytes, Stack size 20 bytes, stm32f4xx_tim.o(i.TI3_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TI3_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[22c]"></a>TI4_Config</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TI4_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TI4_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[297]"></a>USB_OTG_CoreReset</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, usb_core.o(i.USB_OTG_CoreReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USB_OTG_CoreReset &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_uDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInit
</UL>

<P><STRONG><a name="[29e]"></a>USB_OTG_EnableCommonInt</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_EnableCommonInt))
<BR><BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableHostInt
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableDevInt
</UL>

<P><STRONG><a name="[160]"></a>DCD_HandleEnumDone_ISR</STRONG> (Thumb, 302 bytes, Stack size 40 bytes, usb_dcd_int.o(i.DCD_HandleEnumDone_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = DCD_HandleEnumDone_ISR &rArr; USB_OTG_EP0Activate
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_GetDeviceSpeed
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0Activate
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[164]"></a>DCD_HandleInEP_ISR</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, usb_dcd_int.o(i.DCD_HandleInEP_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = DCD_HandleInEP_ISR &rArr; DCD_WriteEmptyTxFifo &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_WriteEmptyTxFifo
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_ReadDevInEP
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadDevAllInEPItr
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[169]"></a>DCD_HandleOutEP_ISR</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, usb_dcd_int.o(i.DCD_HandleOutEP_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DCD_HandleOutEP_ISR &rArr; USB_OTG_EP0_OutStart
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadDevOutEP_itr
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadDevAllOutEp_itr
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[24c]"></a>DCD_HandleResume_ISR</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, usb_dcd_int.o(i.DCD_HandleResume_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DCD_HandleResume_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[16c]"></a>DCD_HandleRxStatusQueueLevel_ISR</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, usb_dcd_int.o(i.DCD_HandleRxStatusQueueLevel_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DCD_HandleRxStatusQueueLevel_ISR &rArr; USB_OTG_ReadPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[24e]"></a>DCD_HandleSof_ISR</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usb_dcd_int.o(i.DCD_HandleSof_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DCD_HandleSof_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[24d]"></a>DCD_HandleUSBSuspend_ISR</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, usb_dcd_int.o(i.DCD_HandleUSBSuspend_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DCD_HandleUSBSuspend_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[16e]"></a>DCD_HandleUsbReset_ISR</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, usb_dcd_int.o(i.DCD_HandleUsbReset_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = DCD_HandleUsbReset_ISR &rArr; USB_OTG_FlushTxFifo &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[24f]"></a>DCD_IsoINIncomplete_ISR</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usb_dcd_int.o(i.DCD_IsoINIncomplete_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DCD_IsoINIncomplete_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[250]"></a>DCD_IsoOUTIncomplete_ISR</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usb_dcd_int.o(i.DCD_IsoOUTIncomplete_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DCD_IsoOUTIncomplete_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[166]"></a>DCD_ReadDevInEP</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usb_dcd_int.o(i.DCD_ReadDevInEP))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleInEP_ISR
</UL>

<P><STRONG><a name="[168]"></a>DCD_WriteEmptyTxFifo</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, usb_dcd_int.o(i.DCD_WriteEmptyTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DCD_WriteEmptyTxFifo &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleInEP_ISR
</UL>

<P><STRONG><a name="[28a]"></a>USB_OTG_USBH_handle_Disconnect_ISR</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_Disconnect_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_USBH_handle_Disconnect_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[28b]"></a>USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[288]"></a>USB_OTG_USBH_handle_hc_ISR</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_hc_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USB_OTG_USBH_handle_hc_ISR &rArr; USB_OTG_USBH_handle_hc_n_In_ISR &rArr; USB_OTG_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_n_Out_ISR
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_n_In_ISR
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadHostAllChannels_intr
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[2a2]"></a>USB_OTG_USBH_handle_hc_n_In_ISR</STRONG> (Thumb, 1054 bytes, Stack size 40 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_hc_n_In_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = USB_OTG_USBH_handle_hc_n_In_ISR &rArr; USB_OTG_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_Halt
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_ISR
</UL>

<P><STRONG><a name="[2a3]"></a>USB_OTG_USBH_handle_hc_n_Out_ISR</STRONG> (Thumb, 952 bytes, Stack size 32 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_hc_n_Out_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USB_OTG_USBH_handle_hc_n_Out_ISR &rArr; USB_OTG_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_Halt
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_DoPing
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_ISR
</UL>

<P><STRONG><a name="[286]"></a>USB_OTG_USBH_handle_nptxfempty_ISR</STRONG> (Thumb, 302 bytes, Stack size 32 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_nptxfempty_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USB_OTG_USBH_handle_nptxfempty_ISR &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[289]"></a>USB_OTG_USBH_handle_port_ISR</STRONG> (Thumb, 310 bytes, Stack size 32 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_port_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_OTG_USBH_handle_port_ISR
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_InitFSLSPClkSel
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[287]"></a>USB_OTG_USBH_handle_ptxfempty_ISR</STRONG> (Thumb, 302 bytes, Stack size 32 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_ptxfempty_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USB_OTG_USBH_handle_ptxfempty_ISR &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[285]"></a>USB_OTG_USBH_handle_rx_qlvl_ISR</STRONG> (Thumb, 356 bytes, Stack size 32 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_rx_qlvl_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_OTG_USBH_handle_rx_qlvl_ISR &rArr; USB_OTG_ReadPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[284]"></a>USB_OTG_USBH_handle_sof_ISR</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_sof_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_USBH_handle_sof_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[270]"></a>USBH_HandleEnum</STRONG> (Thumb, 452 bytes, Stack size 96 bytes, usbh_core.o(i.USBH_HandleEnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = USBH_HandleEnum &rArr; USBH_Get_CfgDesc &rArr; USBH_ParseCfgDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetCfg
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetAddress
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Modify_Channel
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_StringDesc
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_DevDesc
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_CfgDesc
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[25c]"></a>USBH_GetFreeChannel</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usbh_hcs.o(i.USBH_GetFreeChannel))
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Alloc_Channel
</UL>

<P><STRONG><a name="[262]"></a>USBH_SubmitSetupRequest</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbh_ioreq.o(i.USBH_SubmitSetupRequest))
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>

<P><STRONG><a name="[26a]"></a>USBH_ParseDevDesc</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, usbh_stdreq.o(i.USBH_ParseDevDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_ParseDevDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_DevDesc
</UL>

<P><STRONG><a name="[28e]"></a>USBH_ParseEPDesc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usbh_stdreq.o(i.USBH_ParseEPDesc))
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseCfgDesc
</UL>

<P><STRONG><a name="[28d]"></a>USBH_ParseInterfaceDesc</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usbh_stdreq.o(i.USBH_ParseInterfaceDesc))
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseCfgDesc
</UL>

<P><STRONG><a name="[26c]"></a>USBH_ParseStringDesc</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usbh_stdreq.o(i.USBH_ParseStringDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_ParseStringDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_StringDesc
</UL>

<P><STRONG><a name="[58]"></a>USBH_MSC_ClassRequest</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_msc_core.o(i.USBH_MSC_ClassRequest))
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_core.o(.data)
</UL>
<P><STRONG><a name="[277]"></a>USBH_MSC_GETMaxLUN</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usbh_msc_core.o(i.USBH_MSC_GETMaxLUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_MSC_GETMaxLUN &rArr; USBH_CtlReq
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[59]"></a>USBH_MSC_Handle</STRONG> (Thumb, 306 bytes, Stack size 40 bytes, usbh_msc_core.o(i.USBH_MSC_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = USBH_MSC_Handle &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_TestUnitReady
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_RequestSense
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_ReadCapacity10
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_ModeSense6
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_ErrorHandle
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_GETMaxLUN
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Init
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClrFeature
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_core.o(.data)
</UL>
<P><STRONG><a name="[57]"></a>USBH_MSC_InterfaceDeInit</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, usbh_msc_core.o(i.USBH_MSC_InterfaceDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USBH_MSC_InterfaceDeInit &rArr; USB_OTG_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Free_Channel
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_Halt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_core.o(.data)
</UL>
<P><STRONG><a name="[56]"></a>USBH_MSC_InterfaceInit</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, usbh_msc_core.o(i.USBH_MSC_InterfaceInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBH_MSC_InterfaceInit &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Open_Channel
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Alloc_Channel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_core.o(.data)
</UL>
<P><STRONG><a name="[5b]"></a>USBD_DataInStage</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_DataInStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USBD_DataInStage &rArr; USBD_CtlReceiveStatus &rArr; DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_RunTestMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[5a]"></a>USBD_DataOutStage</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_DataOutStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USBD_DataOutStage &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[61]"></a>USBD_IsoINIncomplete</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_IsoINIncomplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_IsoINIncomplete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[62]"></a>USBD_IsoOUTIncomplete</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_IsoOUTIncomplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_IsoOUTIncomplete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[5e]"></a>USBD_Reset</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_Reset &rArr; DCD_EP_Open &rArr; USB_OTG_EPActivate
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[60]"></a>USBD_Resume</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_Resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_Resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[23f]"></a>USBD_RunTestMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_RunTestMode))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
</UL>

<P><STRONG><a name="[5d]"></a>USBD_SOF</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_SOF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_SOF
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[5c]"></a>USBD_SetupStage</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_SetupStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USBD_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_SetFeature &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ParseSetupRequest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[5f]"></a>USBD_Suspend</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_Suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_Suspend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[238]"></a>USBD_ClrFeature</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usbd_req.o(i.USBD_ClrFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USBD_ClrFeature &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[240]"></a>USBD_GetConfig</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, usbd_req.o(i.USBD_GetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USBD_GetConfig &rArr; USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[241]"></a>USBD_GetDescriptor</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[244]"></a>USBD_GetLen</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_req.o(i.USBD_GetLen))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>

<P><STRONG><a name="[242]"></a>USBD_GetStatus</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, usbd_req.o(i.USBD_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USBD_GetStatus &rArr; USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[251]"></a>USBD_SetAddress</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USBD_SetAddress &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_SetAddress
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[253]"></a>USBD_SetConfig</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USBD_SetConfig &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetCfg
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[256]"></a>USBD_SetFeature</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_SetFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USBD_SetFeature &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1c2]"></a>MSC_BOT_Abort</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usbd_msc_bot.o(i.MSC_BOT_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MSC_BOT_Abort &rArr; DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CBW_Decode
</UL>

<P><STRONG><a name="[1c3]"></a>MSC_BOT_CBW_Decode</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, usbd_msc_bot.o(i.MSC_BOT_CBW_Decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = MSC_BOT_CBW_Decode &rArr; SCSI_ProcessCmd &rArr; SCSI_Write10 &rArr; SCSI_ProcessWrite &rArr; MSC_BOT_SendCSW &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_SendCSW
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_SendData
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_Abort
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DataOut
</UL>

<P><STRONG><a name="[1c7]"></a>MSC_BOT_SendData</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usbd_msc_bot.o(i.MSC_BOT_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MSC_BOT_SendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CBW_Decode
</UL>

<P><STRONG><a name="[1ee]"></a>SCSI_CheckAddressRange</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, usbd_msc_scsi.o(i.SCSI_CheckAddressRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SCSI_CheckAddressRange &rArr; SCSI_SenseCode
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Verify10
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10
</UL>

<P><STRONG><a name="[1f1]"></a>SCSI_Inquiry</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, usbd_msc_scsi.o(i.SCSI_Inquiry))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[1f4]"></a>SCSI_ModeSense10</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usbd_msc_scsi.o(i.SCSI_ModeSense10))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[1f3]"></a>SCSI_ModeSense6</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usbd_msc_scsi.o(i.SCSI_ModeSense6))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[1fa]"></a>SCSI_ProcessRead</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, usbd_msc_scsi.o(i.SCSI_ProcessRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SCSI_ProcessRead &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10
</UL>

<P><STRONG><a name="[1fb]"></a>SCSI_ProcessWrite</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, usbd_msc_scsi.o(i.SCSI_ProcessWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SCSI_ProcessWrite &rArr; MSC_BOT_SendCSW &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_SendCSW
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10
</UL>

<P><STRONG><a name="[1f7]"></a>SCSI_Read10</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, usbd_msc_scsi.o(i.SCSI_Read10))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SCSI_Read10 &rArr; SCSI_ProcessRead &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessRead
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CheckAddressRange
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[1f6]"></a>SCSI_ReadCapacity10</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, usbd_msc_scsi.o(i.SCSI_ReadCapacity10))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SCSI_ReadCapacity10 &rArr; SCSI_SenseCode
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[1f5]"></a>SCSI_ReadFormatCapacity</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, usbd_msc_scsi.o(i.SCSI_ReadFormatCapacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SCSI_ReadFormatCapacity &rArr; SCSI_SenseCode
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[1f0]"></a>SCSI_RequestSense</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, usbd_msc_scsi.o(i.SCSI_RequestSense))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SCSI_RequestSense
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[1f2]"></a>SCSI_StartStopUnit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_msc_scsi.o(i.SCSI_StartStopUnit))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[1ef]"></a>SCSI_TestUnitReady</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, usbd_msc_scsi.o(i.SCSI_TestUnitReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SCSI_TestUnitReady &rArr; SCSI_SenseCode
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[1f9]"></a>SCSI_Verify10</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, usbd_msc_scsi.o(i.SCSI_Verify10))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SCSI_Verify10 &rArr; SCSI_CheckAddressRange &rArr; SCSI_SenseCode
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CheckAddressRange
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[1f8]"></a>SCSI_Write10</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, usbd_msc_scsi.o(i.SCSI_Write10))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = SCSI_Write10 &rArr; SCSI_ProcessWrite &rArr; MSC_BOT_SendCSW &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessWrite
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CheckAddressRange
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[367]"></a>dhcp_bind</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, dhcp.o(i.dhcp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[36d]"></a>dhcp_check</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = dhcp_check &rArr; etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[371]"></a>dhcp_create_msg</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_create_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = dhcp_create_msg &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>

<P><STRONG><a name="[376]"></a>dhcp_delete_msg</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_delete_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = dhcp_delete_msg &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>

<P><STRONG><a name="[378]"></a>dhcp_discover</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_discover))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = dhcp_discover &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
</UL>

<P><STRONG><a name="[37e]"></a>dhcp_handle_ack</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_handle_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dhcp_handle_ack
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[37f]"></a>dhcp_handle_nak</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_handle_nak))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = dhcp_handle_nak &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[381]"></a>dhcp_handle_offer</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_handle_offer))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = dhcp_handle_offer &rArr; dhcp_select &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[374]"></a>dhcp_option</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dhcp_option
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>

<P><STRONG><a name="[375]"></a>dhcp_option_byte</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dhcp.o(i.dhcp_option_byte))
<BR><BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>

<P><STRONG><a name="[38a]"></a>dhcp_option_long</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_option_long))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dhcp_option_long
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
</UL>

<P><STRONG><a name="[379]"></a>dhcp_option_short</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_option_short))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dhcp_option_short
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>

<P><STRONG><a name="[37a]"></a>dhcp_option_trailer</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dhcp.o(i.dhcp_option_trailer))
<BR><BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>

<P><STRONG><a name="[385]"></a>dhcp_parse_reply</STRONG> (Thumb, 618 bytes, Stack size 56 bytes, dhcp.o(i.dhcp_parse_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dhcp_parse_reply &rArr; pbuf_copy_partial &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[389]"></a>dhcp_rebind</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_rebind))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = dhcp_rebind &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t2_timeout
</UL>

<P><STRONG><a name="[384]"></a>dhcp_reboot</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_reboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = dhcp_reboot &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[f2]"></a>dhcp_recv</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = dhcp_recv &rArr; dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_offer
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dhcp.o(i.dhcp_start)
</UL>
<P><STRONG><a name="[382]"></a>dhcp_select</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = dhcp_select &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_offer
</UL>

<P><STRONG><a name="[36c]"></a>dhcp_set_state</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dhcp.o(i.dhcp_set_state))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[370]"></a>dhcp_t1_timeout</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, dhcp.o(i.dhcp_t1_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = dhcp_t1_timeout &rArr; dhcp_renew &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>

<P><STRONG><a name="[36f]"></a>dhcp_t2_timeout</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, dhcp.o(i.dhcp_t2_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = dhcp_t2_timeout &rArr; dhcp_rebind &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>

<P><STRONG><a name="[37d]"></a>dhcp_timeout</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = dhcp_timeout &rArr; dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
</UL>

<P><STRONG><a name="[469]"></a>plug_holes</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, mem.o(i.plug_holes))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>

<P><STRONG><a name="[4a4]"></a>tcp_close_shutdown</STRONG> (Thumb, 350 bytes, Stack size 40 bytes, tcp.o(i.tcp_close_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>

<P><STRONG><a name="[4a9]"></a>tcp_create_segment</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_create_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = tcp_create_segment &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>

<P><STRONG><a name="[4b1]"></a>tcp_output_alloc_header</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_output_alloc_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[4b3]"></a>tcp_output_segment</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_output_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[4d0]"></a>udp_new_port</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, udp.o(i.udp_new_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = udp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>

<P><STRONG><a name="[3c6]"></a>etharp_find_entry</STRONG> (Thumb, 242 bytes, Stack size 48 bytes, etharp.o(i.etharp_find_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = etharp_find_entry &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[3c5]"></a>etharp_free_entry</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, etharp.o(i.etharp_free_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_cleanup_netif
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
</UL>

<P><STRONG><a name="[3cc]"></a>etharp_raw</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, etharp.o(i.etharp_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>

<P><STRONG><a name="[3c9]"></a>etharp_send_ip</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, etharp.o(i.etharp_send_ip))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = etharp_send_ip
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[3f4]"></a>lwip_standard_chksum</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, inet_chksum.o(i.lwip_standard_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
</UL>

<P><STRONG><a name="[3f7]"></a>ip_frag_alloc_pbuf_custom_ref</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ip_frag.o(i.ip_frag_alloc_pbuf_custom_ref))
<BR><BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[3fa]"></a>ip_frag_free_pbuf_custom_ref</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ip_frag.o(i.ip_frag_free_pbuf_custom_ref))
<BR><BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[f5]"></a>ipfrag_free_pbuf_custom</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ip_frag.o(i.ipfrag_free_pbuf_custom))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ipfrag_free_pbuf_custom &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ip_frag.o(i.ip_frag)
</UL>
<P><STRONG><a name="[3ce]"></a>low_level_input</STRONG> (Thumb, 184 bytes, Stack size 64 bytes, ethernetif.o(i.low_level_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = low_level_input &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Get_Received_Frame
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[480]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, frtos_queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvCopyDataFromQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[481]"></a>prvCopyDataToQueue</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, frtos_queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[483]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, frtos_queue.o(i.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[489]"></a>prvIsQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, frtos_queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[48a]"></a>prvIsQueueFull</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, frtos_queue.o(i.prvIsQueueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvIsQueueFull
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[497]"></a>prvUnlockQueue</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, frtos_queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[472]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, frtos_tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[476]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, frtos_tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[47e]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, frtos_tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; wjq_free_m &rArr; wjq_free_t
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[47f]"></a>prvDeleteTCB</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, frtos_tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = prvDeleteTCB &rArr; wjq_free_m &rArr; wjq_free_t
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_free_m
</UL>
<BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[f9]"></a>prvIdleTask</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, frtos_tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; wjq_free_m &rArr; wjq_free_t
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frtos_tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[485]"></a>prvInitialiseNewTask</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, frtos_tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[478]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, frtos_tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[4e8]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, frtos_tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[47a]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, frtos_timers.o(i.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[496]"></a>prvGetNextExpireTime</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, frtos_timers.o(i.prvGetNextExpireTime))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[488]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, frtos_timers.o(i.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[48b]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, frtos_timers.o(i.prvProcessExpiredTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = prvProcessExpiredTimer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[48d]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, frtos_timers.o(i.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_free_m
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[490]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, frtos_timers.o(i.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[48e]"></a>prvSampleTimeNow</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, frtos_timers.o(i.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[495]"></a>prvSwitchTimerLists</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, frtos_timers.o(i.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[fb]"></a>prvTimerTask</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, frtos_timers.o(i.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetNextExpireTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frtos_timers.o(i.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[f7]"></a>prvTaskExitError</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[2f3]"></a>check_fs</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[2fc]"></a>chk_chr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.chk_chr))
<BR><BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[2f5]"></a>cmp_lfn</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, ff.o(i.cmp_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cmp_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[2f7]"></a>create_chain</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[2fa]"></a>create_name</STRONG> (Thumb, 538 bytes, Stack size 48 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = create_name &rArr; ff_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[393]"></a>dir_alloc</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ff.o(i.dir_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[396]"></a>dir_find</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, ff.o(i.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[395]"></a>dir_next</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[39b]"></a>dir_read</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, ff.o(i.dir_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[39d]"></a>dir_register</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fit_lfn
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[394]"></a>dir_sdi</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[3d3]"></a>find_volume</STRONG> (Thumb, 770 bytes, Stack size 48 bytes, ff.o(i.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[3a0]"></a>fit_lfn</STRONG> (Thumb, 104 bytes, Stack size 28 bytes, ff.o(i.fit_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = fit_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[3d5]"></a>follow_path</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[39f]"></a>gen_numname</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, ff.o(i.gen_numname))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gen_numname
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[3dc]"></a>get_fileinfo</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, ff.o(i.get_fileinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_fileinfo &rArr; ff_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[3d2]"></a>get_ldnumber</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[3d7]"></a>ld_clust</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ff.o(i.ld_clust))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[398]"></a>mem_cmp</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ff.o(i.mem_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[39e]"></a>mem_cpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ff.o(i.mem_cpy))
<BR><BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[2fd]"></a>mem_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.mem_set))
<BR><BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[2f4]"></a>move_window</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[39c]"></a>pick_lfn</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, ff.o(i.pick_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pick_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>

<P><STRONG><a name="[3d9]"></a>remove_chain</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[3d8]"></a>st_clust</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.st_clust))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[397]"></a>sum_sfn</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(i.sum_sfn))
<BR><BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[3dd]"></a>sync_fs</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, ff.o(i.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[399]"></a>sync_window</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = sync_window &rArr; disk_write &rArr; SD_disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[3d0]"></a>validate</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = validate
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[f3]"></a>sort_by_x</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, testutils.o(i.sort_by_x))
<BR>[Address Reference Count : 1]<UL><LI> testutils.o(i.getxy)
</UL>
<P><STRONG><a name="[f4]"></a>sort_by_y</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, testutils.o(i.sort_by_y))
<BR>[Address Reference Count : 1]<UL><LI> testutils.o(i.getxy)
</UL>
<P><STRONG><a name="[3f0]"></a>get_sample</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, ts_calibrate.o(i.get_sample))
<BR><BR>[Stack]<UL><LI>Max Depth = 1664<LI>Call Chain = get_sample &rArr; getxy &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getxy
</UL>
<BR>[Called By]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_calibrate
</UL>

<P><STRONG><a name="[301]"></a>average</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, tslib.o(i.average))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = average
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dejitter_read
</UL>

<P><STRONG><a name="[2fe]"></a>dejitter_read</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, tslib.o(i.dejitter_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = dejitter_read &rArr; variance_read &rArr; linear_read &rArr; ts_input_read &rArr; dev_touchscreen_read
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;variance_read
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqr
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;average
</UL>
<BR>[Called By]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_read
</UL>

<P><STRONG><a name="[403]"></a>linear_read</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, tslib.o(i.linear_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = linear_read &rArr; ts_input_read &rArr; dev_touchscreen_read
</UL>
<BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_input_read
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;variance_read
</UL>

<P><STRONG><a name="[46a]"></a>mod_dejitter_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, tslib.o(i.mod_dejitter_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mod_dejitter_init &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqr
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_open
</UL>

<P><STRONG><a name="[46b]"></a>mod_linear_init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, tslib.o(i.mod_linear_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mod_linear_init &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
</UL>
<BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_open
</UL>

<P><STRONG><a name="[46c]"></a>mod_variance_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tslib.o(i.mod_variance_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mod_variance_init &rArr; wjq_log &rArr; mcu_uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqr
</UL>
<BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_open
</UL>

<P><STRONG><a name="[300]"></a>sqr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tslib.o(i.sqr))
<BR><BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;variance_read
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_variance_init
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_dejitter_init
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dejitter_read
</UL>

<P><STRONG><a name="[404]"></a>ts_input_read</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tslib.o(i.ts_input_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ts_input_read &rArr; dev_touchscreen_read
</UL>
<BR>[Calls]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_touchscreen_read
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linear_read
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts_read_raw
</UL>

<P><STRONG><a name="[2ff]"></a>variance_read</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, tslib.o(i.variance_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = variance_read &rArr; linear_read &rArr; ts_input_read &rArr; dev_touchscreen_read
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqr
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linear_read
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dejitter_read
</UL>

<P><STRONG><a name="[186]"></a>Demo_Application</STRONG> (Thumb, 586 bytes, Stack size 40 bytes, dual_func_demo.o(i.Demo_Application))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = Demo_Application &rArr; Explore_Disk &rArr;  Explore_Disk (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeInit
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_DevDisconnect
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_StopHost
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_StopDevice
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableGlobalInt
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DisableGlobalInt
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demo_HandleDisconnect
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explore_Disk
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demo_SelectItem
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demo_Process
</UL>

<P><STRONG><a name="[18b]"></a>Demo_SelectItem</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dual_func_demo.o(i.Demo_SelectItem))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demo_Application
</UL>

<P><STRONG><a name="[18e]"></a>Explore_Disk</STRONG> (Thumb, 232 bytes, Stack size 112 bytes, dual_func_demo.o(i.Explore_Disk))
<BR><BR>[Stack]<UL><LI>Max Depth = 500 + In Cycle
<LI>Call Chain = Explore_Disk &rArr;  Explore_Disk (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjq_log
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Toggle_Leds
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explore_Disk
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explore_Disk
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demo_Application
</UL>

<P><STRONG><a name="[1a2]"></a>Toggle_Leds</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dual_func_demo.o(i.Toggle_Leds))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explore_Disk
</UL>

<P><STRONG><a name="[12d]"></a>BSP_Delay</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usb_bsp.o(i.BSP_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = BSP_Delay &rArr; BSP_SetTime &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_uDelay
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
</UL>

<P><STRONG><a name="[12e]"></a>BSP_SetTime</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, usb_bsp.o(i.BSP_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BSP_SetTime &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Delay
</UL>

<P><STRONG><a name="[294]"></a>USB_OTG_BSP_TimeInit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usb_bsp.o(i.USB_OTG_BSP_TimeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_OTG_BSP_TimeInit &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
</UL>

<P><STRONG><a name="[1a8]"></a>Get_SerialNum</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usbd_desc.o(i.Get_SerialNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Get_SerialNum &rArr; IntToUnicode
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToUnicode
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_SerialStrDescriptor
</UL>

<P><STRONG><a name="[1a9]"></a>IntToUnicode</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, usbd_desc.o(i.IntToUnicode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IntToUnicode
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SerialNum
</UL>

<P><STRONG><a name="[2b2]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2a9]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>

<P><STRONG><a name="[2b5]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2b4]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ef]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0sprintf)
<LI> printfa.o(i.__0vsprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
